/**
 * @description A 3x2 matrix for 2 dimensions.
 * Note that it is a column-preferred matrix because of OpenGL.
 */
class Matrix32 {
	/**
	 * Constructor (identity matrix)
	 */
	function Matrix32();

	/**
	 * constructor
	 * @description Initialize with an argument value.
	 * @param m11 [1] [1] Position value.
	 * @param m12 [1] [2] Position value.
	 * @param m21 [2] [1] Position value.
	 * @param m22 [2] [2] Position value.
	 * @param m31 [3] [1] Position value.
	 * @param m32 [3] [2] Position value.
	 */
	function Matrix32( m11:real, m12:real, m21:real, m22:real, m31:real, m32:real );

	/**
	 * Matrix settings
	 * @param m11 [1] [1] Position value.
	 * @param m12 [1] [2] Position value.
	 * @param m21 [2] [1] Position value.
	 * @param m22 [2] [2] Position value.
	 * @param m31 [3] [1] Position value.
	 * @param m32 [3] [2] Position value.
	 */
	function set( m11:real, m12:real, m21:real, m22:real, m31:real, m32:real );

	/**
	 * Matrix settings
	 * @description Copy from one-dimensional array
	 * @param array Pass an array of 6 elements.
	 */
	function set( array:Array );

	/**
	 * Matrix settings
	 * @description Copy from matrix
	 * @param matrix Pass an instance of the Matrix32 class.
	 */
	function set( matrix:Matrix32 );

	/**
	 * Identity matrix
	 */
	function reset();

	/**
	 * Set the moving matrix
	 * @param x X coordinate value to set
	 * @param y Y coordinate value to set
	 */
	function setTranslate( x:real, y:real );

	/**
	 * Set the augmented matrix
	 * @param x X-axis magnification to set
	 * @param y Y-axis magnification to set
	 */
	function setScale( x:real, y:real );

	/**
	 * Set the rotation matrix
	 * @param degree rotation angle
	 */
	function setRotate( degree:real );

	/**
	 * Set the X-axis tilt matrix
	 * @param degree Tilt angle
	 */
	function setSkewX( degree:real );

	/**
	 * Set the Y-axis tilt matrix
	 * @param degree Tilt angle
	 */
	function setSkewY( degree:real );

	/**
	 * Move the matrix
	 * @param x X coordinate value to move
	 * @param y Y coordinate value to move
	 */
	function translate( x:real, y:real );

	/**
	 * Rotate the matrix
	 * @param degree rotation angle
	 */
	function rotate( degree:real );

	/**
	 * Rotate the matrix
	 * @param degree rotation angle
	 * @param px Center point
	 * @param py Center point
	 */
	function rotate( degree:real, px:real, py:real );

	/**
	 * Expand the matrix
	 * @param x Magnification X coordinate value
	 * @param y Magnification Y coordinate value
	 */
	function scale( x:real, y:real );

	/**
	 * Expand the matrix (pre-expansion)
	 * @param x Magnification X coordinate value
	 * @param y Magnification Y coordinate value
	 */
	function preScale( x:real, y:real );

	/**
	 * Tilt the matrix on the X axis
	 * @param degree Tilt angle
	 */
	function skewX( degree:real );

	/**
	 * Tilt the matrix on the Y axis
	 * @param degree Tilt angle
	 */
	function skewY( degree:real );

	/**
	 * Convert XY coordinate values by multiplying this matrix
	 * @description The input argument becomes the output as it is
	 * @param x X coordinate value
	 * @param y Y coordinate value
	 */
	function transform( x:real, y:real );

	/**
	 * Multiply a matrix (this = this * matrix)
	 * @param matrix Matrix to multiply
	 */
	function multiply( matrix:Matrix32 );

	/**
	 * Put the matrix behind (this = matrix * this)
	 * @param matrix Matrix to multiply
	 */
	function premultiply( matrix:Matrix32 );


	/**
	 * Receive as a one-dimensional array [r]
	 */
	property array;

	/**
	 * [1] [1] Position value [r / w]
	 */
	property m11;
	/**
	 * [1] [2] Position value [r / w]
	 */
	property m12;
	/**
	 * [2] [1] Position value [r / w]
	 */
	property m21;
	/**
	 * [2] [2] Position value [r / w]
	 */
	property m22;
	/**
	 * [3] [1] Position value [r / w]
	 */
	property m31;
	/**
	 * [3] [2] Position value [r / w]
	 */
	property m32;
};
