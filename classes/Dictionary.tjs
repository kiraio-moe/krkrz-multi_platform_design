/*
 * @description The Dictionary class is a class that handles dictionary arrays.
 *
 * A dictionary array, also called an associative array, is an object that holds multiple names and their associated values as a pair.
 * It is accessed with the [] (indirect reference) operator like an array, but with a string instead of a subscript, which is the name.
 * You can also use the. (Direct reference) operator if the name is valid as an identifier.
 * Also, referencing a non-existent name will result in void.
 * Use the delete operator to delete an element.
 *
 * # Dictionary array in formula
 * You can use %[] to write an object of the Dictionary class in an expression on the fly.
 * Separate the element name => element value with a comma and enumerate the expressions that will be the initial elements. For example
 *
 * ```
 * var dic =% ["a" => 1, "b" => 2, "c" => 3];
 * ```
 *
 * If you write, dic is assigned a reference to an object of the Dictionary class whose element name and element pair are "a": 1, "b": 2, and "c": 3, respectively.
 * Internally, => is exactly the same as a comma, but for readability, you can use => (same as perl).
 *
 * # Access to methods of Dictionary class
 *
 * Objects of the Dictionary class have no members when they are created.
 * For example, if you try to use the assign method and write dict.assign (src) for the object dict of the Dictionary class, you will get an error because dict does not have a method called assign.
 * Therefore, use the incontextof operator to execute a method that belongs directly to the Dictionary class with the object of the Dictionary class of interest as the context.
 *
 * Example:
 * ```
 * var a = %[];
 * var b = %[];
 * (Dictionary.assign incontextof a) (b); // Copy b to a
 * (Dictionary.clear incontextof b) (); // Clear the contents of b
 * ```
 *
 */
class Dictionary {
	/**
	 * Outputs structured data to a file
	 * @description Outputs the state of the element to a file in a recoverable state.
	 * Each element can contain strings, real numbers, octet columns, and integers.
	 * Also, if the element has an object, the contents of that object are also output to a file only if it is an object of the Array class or Dictionary class.
	 * For other elements, void is output.
	 * @param storage File name to export
	 * @param mode Specifies the mode string when writing the file.
	 *
	 * + Specifying "c" gives the file a simple encryption (you can just load it with the load method).
	 * + You can specify "z" to compress the file and save it (it cannot be used with "c"; it can also be loaded by the load method as it is).
	 * + If you specify the offset in decimal after "o", it will be written from that byte position in the file.
	 * + If "b" is specified, it will be saved in binary format (cannot be used with other mode specifications; this can also be loaded by the load method as it is).
	 *
	 * @return Returns the output Dictionary class object.
	 * @see Array.saveStruct
	 */
	function saveStruct( storage:string, mode:string=null ):Dictionary;

	/**
	 * Enter structured data from a file
	 * @description Reads structured data from a file as a dictionary array or array.
	 * It can be read in both text format and binary format.
	 * Class method.
	 * @param storage File name to read
	 * @param mode Specifies the mode string when reading the file.
	 *
	 * + If you specify the offset in decimal after "o", it will be written from that byte position in the file.
	 *
	 * @return Returns the loaded Dictionary or Array class object.
	 * @see Array.loadStruct
	 */
	function loadStruct( storage:string, mode:string=null ):Dictionary;

	/**
	 * Copy the dictionary array
	 * @param src Copy source dictionary array
	 * @param clear Whether to clear the contents
	 * @description Copies the entire contents of the other dictionary array specified by the argument.
	 * If clar is false, it does not clear the contents of the destination (the object that executes the method) and overwrites the contents of the source dictionary array.
	 * If a member with the same name as the copy source dictionary array exists in the copy destination dictionary array, the copy destination will be overwritten with the contents of the copy source.
	 * When an array (an object of the Array class) is specified as the copy source array, it is assumed that the elements that should be members of this array are arranged in the order of name and value, and the contents of the array are regarded as this dictionary. Copy to the array.
	 */
	function assign( src:Dictionary, clear:bool=true );

	/**
	 * Copy the dictionary array
	 * @param src Copy source dictionary array
	 * @description Copies the entire contents of the other dictionary array specified by the argument.
	 * Unlike the assign method, if a member has an array or dictionary array, it will also recursively copy its contents (in the case of the assign method, it just copies the reference).
	 */
	function assignStruct( src:Dictionary );

	/**
	 * Erases all the contents of the dictionary array
	 * @description Erases all the contents of the dictionary array.
	 */
	function clear();

	/**
	 * Returns the number of members of the object.
	 * @description Returns the number of members of the object. The target works for anything other than dictionary arrays.
	 * @param target An object that counts the number of members
	 * @return Number of members
	 */
	function getCount( target:Dictionary ):int;

	/**
	 * Returns an array of objects' keys.
	 * @description Returns an array of objects' keys. The target works for anything other than dictionary arrays.
	 * The order of the returned arrays is the same as Array.assgin and is not sorted.
	 * @param target An object that counts the number of members
	 * @return Array of keys
	 */
	function keys( target:Dictionary ):Array;

	/**
	 * Returns an array of object values.
	 * @description Returns an array of object values. The target works for anything other than dictionary arrays.
	 * @param target An object that counts the number of members
	 * @return Array of values
	 */
	function values( target:Dictionary ):Array;

	/**
	 * Determines if the specified key exists in the dictionary array.
	 * @description Returns true if the key specified in the dictionary exists, false otherwise.
	 * You can omit target if you have context.
	 * It can also be determined by the in operator.
	 * @param target Dictionary array to confirm existence
	 * @param key Key to confirm existence
	 * @return With or without key
	 */
	function contains( target:Dictionary, key:string ):bool;

	/**
	 * Execute the argument function for each element of the argument dictionary array.
	 * @description Calls the specified function once for each element of the dictionary array.
	 * If the context is null, such as an anonymous function, it will be called in the context of a dictionary array.
	 * If the function returns a value, processing is interrupted and that value is used as the return value of this function.
	 * When the function is called as a string, the method of all array elements is called without interruption even if the value is returned.
	 * @param target Dictionary array
	 * @param func In the case of a string, that method of the array element is called, and in the case of a function, it is called in the form of function (value, key, args *).
	 * @param args Specify any number of arguments to pass to the function to call. It does not have to be.
	 * @return The value returned by the calling function
	 */
	function forEach( target:Dictionary, func, args ):variant;
};
