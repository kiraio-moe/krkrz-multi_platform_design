/**
 * @description The Storages class is a class that has methods and properties related to the storage system of KiriKiri itself.
 * You cannot create objects from this class.
 */
class Storages {
	/**
	 * Add to automatic search path
	 *
	 * @param path Specify the path to add to the automatic search path.
	 * The end of the path must end with'>' when specifying the root folder in the archive and'/' when specifying a regular folder
	 * (Example: "Archive / arc.xp3>" or "System /"). From 2.19 beta 14, the archive delimiter has changed from'#' to'>'.
	 * @description Adds the specified path to the automatic search path.
	 * Kirikiri When searching for available storage, it looks for the path registered in this automatic search path.
	 * As for the automatic search path, the one specified later is searched with higher priority.
	 * Also, the project folder is searched with the highest priority.
	 * @see Storages.removeAutoPath
	 */
	function addAutoPath( path);

	/**
	 * Delete automatic search path
	 *
	 * @param path Specifies the path to remove from the automatic search.
	 * @description Deletes the specified path from the automatic search path.
	 * @see Storages.addAutoPath
	 */
	function removeAutoPath( path);

	/**
	 * Get the fully unified storage name
	 *
	 * @param path Specify the storage name that you want to be the fully unified storage name.
	 * @return Fully unified storage name
	 * @description Converts the storage name specified by path to a fully unified storage name.
	 * All redundant path access (for example, system / flags / ../ data /) is compressed.
	 * If the current media and current folder are not specified, they will be complemented.
	 * @see Storages.getPlacedPath
	 */
	function getFullPath( path);

	/**
	 * Search for storage
	 *
	 * @param storage Specify the storage name you want to search.
	 * @return The found location is returned with a unified storage name.
	 * If not found, an empty string is returned.
	 * @description Searches the storage specified by storage from the automatic search path.
	 * @see Storages.getFullPath
	 * @see Storages.isExistentStorage
	 */
	function getPlacedPath( storage);

	/**
	 * Storage search, extension specified version
	 *
	 * @param storage Specify the storage name you want to search.
	 * @param extlist Extension list. List the extensions separated by "|". Example. ".tlg | .png | .jpg | .bmp"
	 * @return The found location is returned with a unified storage name.
	 * If not found, an empty string is returned.
	 * @description Searches the storage specified by storage from the automatic search path.
	 * If storage has an extension, the list extension is added after removing the extension.
	 * @see Storages.getFullPath
	 * @see Storages.isExistentStorage
	 */
	function getPlacedPath( storage, extlist );

	/**
	 * Confirmation of storage existence
	 *
	 * @param storage Specify the storage name whose existence you want to check.
	 * @return If the existence can be confirmed, it will be true, otherwise it will be false.
	 * @description Checks if the storage specified in storage exists.
	 * Faster than using getPlacedPath.
	 * @see Storages.getPlacedPath
	 */
	function isExistentStorage( storage);

	/**
	 * Extraction of storage name extension
	 *
	 * @param storage Specify the storage name from which you want to extract the extension part.
	 * @return The extension part is returned. The extension part also includes. (Dot). If there is no extension, an empty string is returned.
	 * @description Extracts the extension part from the specified storage name and returns it.
	 * @see Storages.extractStorageName
	 * @see Storages.extractStoragePath
	 * @see Storages.chopStorageExt
	 */
	function extractStorageExt( storage);

	/**
	 * Extraction of storage name
	 *
	 * @param storage Specify the storage name from which you want to extract the storage name.
	 * @return The storage name is returned.
	 * If there is no storage name, an empty string is returned.
	 * @description Extracts and returns the part of the storage name (excluding the path) from the specified storage name.
	 * For example, if you pass "System / hoge.txt", "hoge.txt" will be returned.
	 * @see Storages.extractStorageExt
	 * @see Storages.extractStoragePath
	 */
	function extractStorageName( storage);

	/**
	 * Extraction of storage name path
	 *
	 * @param storage Specify the storage name from which you want to extract the path.
	 * @return The path will be returned. If there is no path, an empty string is returned.
	 * @description Extracts the path part from the specified storage name and returns it.
	 * For example, if you pass "file: //home/dee/hoge.txt", "file: // home / dee /" will be returned.
	 * @see Storages.extractStorageExt
	 * @see Storages.extractStorageName
	 */
	function extractStoragePath( storage);

	/**
	 * Truncation of storage name extension
	 *
	 * @param storage Specify the storage name where you want to cut off the extension part.
	 * @return Returns the storage name with the extension truncated.
	 * @description The extension part is cut off from the specified storage name and returned.
	 * For example, if you pass "file: //home/dee/hoge.txt", "file: // home / dee / hoge" will be returned.
	 * .
	 * @see Storages.extractStorageExt
	 */
	function chopStorageExt( storage);

	/**
	 * [Windows +] Search for CD
	 *
	 * @param volume Specify the volume label of the CD to search.
	 * @return Returns the drive letter of the found CD-ROM drive.
	 * @description Finds the CD drive with the specified volume label and returns the drive letter (such as'H').
	 * Of course, the drive must have the appropriate CD-ROM inserted.
	 */
	function searchCD( volume);

	/**
	 * Get local file name
	 *
	 * @param path Specify the unified storage name that you want to convert to a local file name.
	 * @return The local file name is returned.
	 * If it cannot be converted to a local file name, an empty string is returned or an exception is thrown.
	 * @description Converts the specified unified storage name to the OS native format (local file name) and returns it.
	 */
	function getLocalName( path);

	/**
	 * Display the [Windows +] file selection dialog box
	 *
	 * @param params Specify the dictionary array used for data transfer.
	 * When passing to this method, you can specify the following members:
	 * Also, some members change their values at the end of this method.
	 * filter Pass the filter string as an array.
	 * The filter string specifies the filter description and the filter separated by | (half-width vertical bar), and the filter specifies a wildcard.
	 * If multiple extensions correspond to one filter, separate them with; (half-width semicolon).
	 * To specify multiple filters, specify them in an array.
	 * If omitted, the filter will not be used.
	 * Example: ["Image file (* .bmp; * .png; * .jpg; * .jpeg; * .eri; * .tlg) | * .bmp; * .png; * .jpg; * .jpeg; *. eri; * .tlg "," Script file (* .tjs; * .ks) | * .tjs; * .ks "]
	 * filterIndex Specifies the number of the selected filter (specified by filter).
	 * If you specify 1, the first filter specified by filter is initially selected.
	 * Specifying 2 causes the second filter to be selected (note that it is not a 0-based index number; it starts with 1).
	 * If omitted, the first filter is selected.
	 * Also, if the user presses the OK button, the index of the last selected filter on the dialog box will be set to this member.
	 * name Specify the file name.
	 * If you omit it or specify an empty string, you can leave no files selected in the initial state.
	 * Also, if the user presses the OK button, the selected file will be set to this member.
	 * initialDir Specifies the folder to be displayed in the initial state.
	 * If omitted, the current directory will be used.
	 * title Displays the title of the dialog box.
	 * If omitted, it defaults to "Open" or "Save As" (depending on the save member settings).
	 * Specifies the type of save dialog box.
	 * If false (default), the Open dialog box is used.
	 * If true, the Save As dialog box is used.
	 * defaultExt Specifies the default extension.
	 * If the user does not specify an extension, this extension is automatically added.
	 * Do not specify. (Period) for the extension specified here.
	 * If omitted, the extension will not be added.
	 * @return If the user selects a file and presses the OK button, it returns true, and if the cancel button is pressed, it returns false.
	 * @description Opens a file selection dialog box.
	 * Example:
	 *
	 * ```
	 * var params = %[filter : [ "text file(*.txt)|*.txt", "Binary file(*.bin)|*.bin" ],filterIndex : 1,name : "",initialDir : System.exePath,title : "Open file",save : false,];
	 * if(Storages.selectFile(params))
	 *     System.inform("The selected file is:" + params.name);
	 * ```
	 */
	function selectFile( params);

	/**
	 * Get file properties
	 *
	 * @param storage Specify the file name for which you want to get the properties.
	 * @return The property is returned in dictionary format. If there is no property, null is returned.
	 * @description Gets and returns the property from the specified storage name.
	 */
	function getFileProperty( storage );

};
