/**
 * @description WaveSoundBuffer クラスは、PCMの再生を管理するクラスです。WaveSoundBuffer クラスでは、ループチューナ で作成した .sli ファイルを読み込み、処理することができます。詳しくはループチューナの説明をご覧ください。
 */
class WaveSoundBuffer {
	/**
	 * WaveSoundBuffer オブジェクトの構築
	 *
	 * @param owner イベントの発生先を指定します。
	 * @description WaveSoundBuffer クラスのオブジェクトを構築します。イベントが発生すると owner で指定したオブジェクトの action メソッドを呼び出します。owner に null を指定すると action メソッドは呼ばれません。通常は Window クラスのオブジェクトを owner に指定します。
	 */
	function WaveSoundBuffer( owner);

	/**
	 * ステータスが変更された
	 *
	 * @param status 新しいステータスです。WaveSoundBuffer.status プロパティを参照してください。
	 * @description 再生のステータス ( 状態 ) が変わった時に発生します。
	 */
	event onStatusChanged( status);

	/**
	 * ラベルを通過した
	 *
	 * @param name 通過したラベル名です。
	 * @description 再生位置がラベルを通過した際に発生します。
	 */
	event onLabel( name);

	/**
	 * フェードが終了した
	 *
	 * @description WaveSoundBuffer.fade メソッドで開始したフェードが終了したときに発生します。
	 */
	event onFadeCompleted( );

	/**
	 * メディアを開く
	 *
	 * @param storage 
	 * 				再生したいストレージを指定します。
	 * 			
	 * @description 指定されたメディアを開きます。このメソッドは再生を開始しません。指定されたストレージ名に .sli を付加したファイル名があれば、サウンドループ情報として読み込みます。
	 */
	function open( storage);

	/**
	 * メディアを再生する
	 *
	 * @description メディアの再生を開始します。
	 */
	function play( );

	/**
	 * メディアを停止する
	 *
	 * @description メディアを停止します。
	 */
	function stop( );

	/**
	 * フェードを開始する
	 *
	 * @param to 到達させる音量を指定します。音量の指定については WaveSoundBuffer.volume プロパティを参照して
	 * 				ください。
	 * @param time フェードにかける時間を ms 単位で指定します。
	 * @param delay フェード開始までの待ち時間を ms 単位で指定します。
	 * @description フェード ( 連続的な音量の変化 ) を開始します。
	 */
	function fade( to, time, delay=0);

	/**
	 * フェードを停止する
	 *
	 * @description WaveSoundBuffer.fade メソッドで開始したフェードを強制的に停止します。音量は停止させた時点のままになります。
	 */
	function stopFade( );

	/**
	 * DirectSound の解放
	 *
	 * @description DirectSound を解放します。すべての WaveSoundBuffer クラスのオブジェクトは停止状態に
	 * 		なります。DirectSound と WaveMapper ( MCI 等 ) による再生を同時に行えない環境などで DirectSound を
	 * 		解放するためにこのメソッドを使います。このメソッドは WaveSoundBuffer クラス上にしか存在しません (WaveSoundBufferから作られたオブジェクト上にこのメソッドはありません)。使用する際は WaveSoundBuffer.freeDirectSound(); としてください。
	 */
	function freeDirectSound( );

	/**
	 * 視覚化用データの取得
	 *
	 * @param buffer 出力データを書き込むバッファを指定します。バッファは 16bit 符号付き整数の配列で、numsamples 引数および channels 引数
	 * 				で指定したサンプルが書き込まれるのに十分な個数 ( numsamples * channels 以上 )
	 * 				である必要があります。channels に 1 以外を指定した場合は、各チャネルのサンプルはインターリーブされて
	 * 				( ステレオならば 右 左 右 左 ・・・・の順に ) 格納されます。配列の先頭要素へのポインタを指定する必要がありますが、整数型にキャストして
	 * 				渡してください。
	 * @param numsamples 取得するサンプル数を指定します。
	 * @param channel 取得するチャンネル数を指定します。1 を指定すると、モノラルの場合はそのまま、そうでない場合は 1チャンネルにダウンミックス
	 * 				されたデータを得ることができます。1 以外の数値を指定する場合は、再生中のサウンドと同じチャンネル数を指定する必要がありま
	 * 				す。このばあいは、そのままのデータを得ることができます。
	 * @param ahead 先読みするサンプル数を指定します。現在の再生位置から、この引数で指定したサンプル数だけ先にあるサンプルから取得することができます。0 を指定するか、この引数を省略すると、現在の再生位置からの取得になります。
	 * @return 取得できたサンプル数が戻ります。
	 * @description 視覚化用に PCM データを取得します。現在の再生位置から PCM データを読み込み、buffer 引数で指定した配列に書き込みます。ただし、バッファの状態や再生形式によっては正常にデータを読み込めない可能性もあります。このメソッドは C や C++ 等で書かれたプラグインから利用されることを想定してますので、たとえば
	 * 		buffer 引数に TJS の配列を指定する、などのようなことはできません。このメソッドを使用するには  WaveSoundBuffer.useVisBuffer プロパティを真に指定する
	 * 		必要があります。
	 */
	function getVisBuffer( buffer, numsamples, channel, ahead=0);

	/**
	 * 再生位置
	 *
	 * @description 再生位置を ms 単位で表します。値を設定するとその位置に移動します。
	 * 		
	 * 	
	 */
	 property position {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 再生位置
	 *
	 * @description 再生位置をサンプル数単位で表します。値を設定するとその位置に移動します。
	 */
	 property samplePosition {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 一時停止状態かどうか
	 *
	 * @description 一時停止状態かどうかを表します。値を設定することもできます。真の場合は一時停止状態です。
	 * 		
	 * 	
	 */
	 property paused {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * メディアの再生時間
	 *
	 * @description メディアの総再生時間を ms 単位で表します。
	 * 		
	 * 	
	 */
	 property totalTime {
		 getter() { return value; }
	}
	/**
	 * ループ再生を行うかどうか
	 *
	 * @description ループ再生を行うかどうかを表します。値を設定することもできます。真を指定するとループ再生がされます。偽を指定しても、再生しているメディアにループ情報があれば、ループ情報が利用されます。
	 */
	 property looping {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 音量
	 *
	 * @description 再生する音量を表します。値を設定することもできます。0 ～ 100000 の数値で指定し、 0 が完全ミュート、100000 が 100% の音量となります。
	 */
	 property volume {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 第２音量
	 *
	 * @description 再生する音量を表します。値を設定することができます。WaveSoundBuffer.volume プロパティと違うのは、このプロパティは
	 * 		WaveSoundBuffer.fade メソッドでも変化しないということです。最終的な音量は、volume プロパティとこのプロパティの積で決定されます。volume プロパティが
	 * 		100000 ( 100% ) で volume2 プロパティも 100000 ( 100% ) ならば 100% × 100% = 100% で
	 * 		100% の音量で再生されます。volume プロパティが 50000 ( 50% ) で volume2 プロパティが 75000 ( 75% ) ならば
	 * 		50% × 75% = 37.5% で 37.5 % の音量で再生されます。
	 */
	 property volume2 {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * ステータス
	 *
	 * @description 現在の状態を表します。状態は文字列で表され、以下の値をとります。"unload"   :  メディアが開かれてない"play"     :  メディアは再生中である"stop"     :  メディアは停止中である
	 */
	 property status {
		 getter() { return value; }
	}
	/**
	 * 視覚化用バッファを使用するかどうか
	 *
	 * @description 視覚化用バッファを使用するかどうか表します。値を設定することもできます。真を指定すると視覚化用バッファが利用可能になり、WaveSoundBuffer.getVisBuffer メソッドが
	 * 		利用可能になります。デフォルトでは偽になっています。真を指定すると偽を指定したときよりも多くのメモリと CPU 時間を
	 * 		消費するようになるので注意してください。
	 */
	 property useVisBuffer {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * チャンネル数
	 *
	 * @description 現在再生中のサウンドのチャンネル数を表します。モノラルの場合は 1、ステレオの場合は 2 になります。メディアが開かれていない状態では正常な値を返さない可能性があります。
	 */
	 property channels {
		 getter() { return value; }
	}
	/**
	 * サンプリング周波数
	 *
	 * @description 現在再生中のサウンドのサンプリング周波数を表します。値を設定することもできます。CD と同じサンプリング周波数の場合は 44100 になります。メディアが開かれていない状態では正常な値を返さない可能性があります。値を設定すると、その周波数で再生します。
	 */
	 property frequency {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 量子化ビット数
	 *
	 * @description 現在再生中のサウンドの量子化ビット数を表します。CD と同じ量子化ビット数の場合は 16 になります。メディアが開かれていない状態では正常な値を返さない可能性があります。
	 */
	 property bits {
		 getter() { return value; }
	}
	/**
	 * フラグ
	 *
	 * @description フラグを表すオブジェクトを得ることができます。このオブジェクトには 0 ～ 15 のプロパティがあり、それぞれ各フラグの値を表しています。プロパティには間接メンバ選択演算子 ('[ ]' 演算子) を用いてアクセスすることができます。これらのプロパティには値を設定することもできます。値は 0 ～ 9999 の範囲であり、これを下回ったり、上回ることはできません。このオブジェクトの count プロパティは常に 16 を返します。このオブジェクトには reset メソッドがあり、このメソッドを実行すると、全てのフラグが 0 にリセットされます。メディアを開いていない場合は、このオブジェクトのプロパティに値を設定しても無視されます。このオブジェクトは一見配列オブジェクトにも見えますが、いわゆるTJSの配列オブジェクト('Array' クラスのオブジェクト) ではありません。フラグは WaveSoundBuffer.open メソッドで全て 0 にリセットされます。例: var buf = new WaveSoundBuffer(window);(略)buf.flags.reset(); // 全てのフラグを 0 にリセットvar cnt = buf.flags.count; // cnt には 16 が入るbuf.flags[4] = 34; // 4番のフラグに34を代入
	 */
	 property flags {
		 getter() { return value; }
	}
	/**
	 * ラベル
	 *
	 * @description ラベルを表すオブジェクトを得ることができます。このオブジェクトは辞書配列で、それぞれ、ループ情報中のラベルの名前をメンバ名とした要素が入っています。それぞれの要素も辞書配列で、name メンバはラベルの名前を表し、position メンバはミリ秒単位でのラベルの位置を表し、samplePosition はサンプル数単位でのラベルの位置を表しています。この辞書配列は読み出し専用であると考えてください。値を代入したり、新しいメンバを作成しても反映されることはありません。例: var buf = new WaveSoundBuffer(window);(略)debug.message(buf.labels['start'].position); // 'start' というラベル名の位置をミリ秒単位でdebug.message(buf.labels['start'].samplePosition); // 'start' というラベル名の位置をサンプル数単位で
	 */
	 property labels {
		 getter() { return value; }
	}
	/**
	 * パン
	 *
	 * @description パン (音像位置) を表します。値を設定することもできます。音の聞こえる左右の位置を指定することができます。-100000 ～ 0 ～ 100000 の数値で指定し、 -100000 が 完全に左、0 が中央、100000 が完全に右になります。
	 */
	 property pan {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 大域音量
	 *
	 * @description 大域音量 (マスターボリューム)を表します。値を設定することもできます。この音量は、すべての WaveSoundBuffer に影響します。0 ～ 100000 の数値で指定し、 0 が完全ミュート、100000 が 100% の音量となります。デフォルトの値は 100000 です。このプロパティは WaveSoundBuffer クラス上にしか存在しません (WaveSoundBufferから作られたオブジェクト上にこのプロパティはありません)。使用する際は WaveSoundBuffer.globalVolume としてください。
	 */
	 property globalVolume {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * フォーカスモード
	 *
	 * @description フォーカスモードを表します。値を設定することもできます。フォーカスモードは、アプリケーションが最小化したときや非アクティブになったときにミュートするモードです。sgfmNeverMuteを指定すると、アプリケーションがどのような状態でもミュートはしません。sgfmMuteOnMinimizeを指定すると、アプリケーションが最小化時にミュートします。sgfmMuteOnDeactivateを指定すると、アプリケーションが非アクティブ化したときにミュートします。このプロパティは WaveSoundBuffer クラス上にしか存在しません (WaveSoundBufferから作られたオブジェクト上にこのプロパティはありません)。使用する際は WaveSoundBuffer.globalFocusMode としてください。このプロパティの設定よりも、コマンドラインオプションで指定した '-wsmute' (DirectSound ミュート) の設定が優先されます。
	 */
	 property globalFocusMode {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * フィルタ配列
	 *
	 * @description インサーションフィルタオブジェクトを保持している配列(Arrayクラスのインスタンス)です。この配列にフィルタオブジェクトを登録することにより、再生中にリアルタイムで音声に対して
	 * 		様々な効果をかけることができます。フィルタ配列への変更が反映されるのは、WaveSoundBuffer.openメソッドが実行された
	 * 		時だけです。それまでは、この配列への変更を行っても反映はされません。例: var buf = new WaveSoundBuffer(window);(略)buf.filters.clear(); // フィルタ配列をクリアbuf.filters.add(new WaveSoundBuffer.PhaseVocoder()); // PhaseVocoderフィルタを追加buf.filters[0].time = 0.5; // 倍速再生
	 */
	 property filters {
		 getter() { return value; }
	}
};
