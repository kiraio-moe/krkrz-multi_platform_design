/**
 * @description Debug クラスは 吉里吉里のデバッグに関する機能を提供するクラスです。
 * このクラスからオブジェクトを作成することはできません。
 * 吉里吉里のコンソールのログの名前は krkr.console.log になります。
 * また、ハードウェア例外が発生したときに作成されるファイルは hwexcept.log となります。
 * これらのログファイルは、デフォルトではプロジェクトディレクトリになります。
 * ただし、プロジェクトディレクトリがアーカイブなど、書き込みができないディレクトリの場合は出力されません。
 * ログファイルの出力先は logLocation プロパティで変更することができます (KAGの場合は栞データの保存先に設定されます)。
 * Windowsではコンソールはコマンドプロンプト、AndroidではlogCatへの出力となります。
 */
class Debug {
	/**
	 * コンソールへメッセージを出力
	 *
	 * @param message 出力するメッセージを指定します。
	 * @description コンソールへメッセージを出力します。
	 */
	function message( message);

	/**
	 * コンソールへ重要なメッセージを出力
	 *
	 * @param message 出力するメッセージを指定します。
	 * @description コンソールへメッセージを出力します。
	 * Debug.message と違い、ここで出力したメッセージは ログファイルへの書き出しを途中から開始したとしても、必ずログファイルに書き出されます ( Debug.message で出力したメッセージは、ある程度さかのぼってまでしか書き込まれません )。
	 * ログファイルを回収したときに有用になるような重要な情報を出力するために使います。
	 */
	function notice( message);

	/**
	 * コンソールのログの出力開始
	 *
	 * @param clear 真を指定するとログファイルはクリアされます。
	 * 偽を指定すると既存のファイルに追加されます。
	 * @description コンソールのログのファイルへの出力を開始します。
	 * @see Debug.logToFileOnError
	 * @see Debug.clearLogFileOnError
	 */
	function startLogToFile( clear=false);

	/**
	 * エラー時と同じようにログをファイルに出力開始する
	 *
	 * @description エラーログファイルに関し、吉里吉里がエラーが発生したときと同じ動作をさせます。
	 * つまり、Debug.logToFileOnError が真ならばファイルにコンソールのログの出力を開始します。
	 * その際、Debug.clearLogFileOnError が真ならばファイルをクリアします。
	 * これに対し、Debug.startLogToFile は無条件でコンソールのログのファイルへの出力を開始します。
	 * @see Debug.startLogToFile
	 * @see Debug.logToFileOnError
	 * @see Debug.clearLogFileOnError
	 */
	function logAsError();

	/**
	 * ログハンドラを追加します
	 *
	 * @param handler ログハンドラを指定します。
	 * @description エラーログが出力されるごとに呼び出されるハンドラを登録します。
	 * ハンドラはログメッセージを引数に与えられて呼び出されます。
	 * 登録メソッド内でログを出力しても、再帰的な呼び出しは行われず無視されます。
	 */
	function addLoggingHandler( handler);

	/**
	 * ログハンドラを削除します
	 *
	 * @param handler ログハンドラを指定します。
	 * @description 登録したログハンドラを削除します。
	 */
	function removeLoggingHandler( handler);

	/**
	 * 未出力のログを取得します
	 *
	 * @description 出力していないログを取得します。
	 */
	function getLastLog( );

	/**
	 * ログファイルの出力先
	 *
	 * @description ログファイルの出力先ディレクトリを表します。
	 * 値を書き込むこともできます。
	 * デフォルトではデータ保存場所 (コマンドラインオプションの -datapath) に設定されています。
	 * この値を変更すると、以降のログはそのディレクトリ下の *.console.log として出力されるようになります。
	 */
	 property logLocation {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * エラー発生時にコンソールのログをファイルに出力するか
	 *
	 * @description 真の場合、エラーが発生したときにコンソールのログのファイルへの出力を開始するようになります。
	 * 偽の場合はエラーが発生してもログのファイルへの出力は開始されません。
	 * @see Debug.startLogToFile
	 * @see Debug.clearLogFileOnError
	 */
	 property logToFileOnError {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * エラー発生時にコンソールのログファイルをクリアするかどうか
	 *
	 * @description 真の場合、エラーが発生したときにコンソールのログを自動的にクリアするようになります。
	 * 偽の場合はクリアはされず、既存のログファイルに追加されます。
	 * @see Debug.startLogToFile
	 * @see Debug.logToFileOnError
	 */
	 property clearLogFileOnError {
		 getter() { return value; }
		 setter( value ) {}
	}
};
