/**
 * @description Off screen.
 * The so-called render target. It can also be used as a texture.
 * FBO, Renderbuffer, Texture are generated internally.
 * If you don't set it as a render target, you don't need to use this class.
 * It is more memory efficient to use the Texture class.
 */
class Offscreen {
	/**
	 * Generate offscreen.
	 * @description Discarding is done at invalidate, so explicit invalidate is recommended when it is no longer needed.
	 * @param width Offscreen width
	 * @param height Off-screen height
	 */
	function Offscreen( width:int, height:int );


	/**
	 * Rectangle copy
	 * @param dleft Copy destination left end
	 * @param dtop Top edge of copy destination
	 * @param src Bitmap class object
	 * @param srcRect src copy source rectangle
	 */
	function copyRect( dleft:int, dtop:int, src:Bitmap, srcRect:Rect );

	/**
	 * Rectangle copy
	 * @param dleft Copy destination left end
	 * @param dtop Top edge of copy destination
	 * @param src Bitmap class object
	 * @param sleft Copy source left edge position
	 * @param stop Copy source top position
	 * @param swidth Copy source width
	 * @param sheight Copy source height
	 */
	function copyRect( dleft:int, dtop:int, src:Bitmap, sleft:int, stop:int, swidth:int, sheight:int );

    /**
	 * Copy to Bitmap
	 * @param destBitmap Storage bitmap
	 * @param dleft Copy destination left end
	 * @param dtop Top edge of copy destination
	 * @param sleft Copy source left end
	 * @param stop Top edge of copy source
	 * @param width Size width
	 * @param height Size height
	 */
	function copyTo( destBitmap:Bitmap, dleft:int, dtop:int, sleft:int, stop:int, width:int, height:int );

    /**
	 * Copy to Bitmap
	 * @description Bitmaps are scaled to fit the size of the Offscreen.
	 * @param destBitmap Storage bitmap
	 */
	function copyTo( destBitmap:Bitmap );

    /**
	 * Copy to Bitmap
	 * @param destBitmap Storage bitmap
	 * @param dleft Copy destination left end
	 * @param dtop Top edge of copy destination
	 * @param srcRect Copy source rectangle
	 */
	function copyTo( destBitmap:Bitmap, dleft:int, dtop:int, srcRect:Rect );

	// Since Texture is set to the render target (for reuse), it is effectively a copy from Texture to memory,
	// OpenGL ES 2.0 / 3.0 can only copy from the framebuffer.
	// Therefore, the copyTo method sets it in the framebuffer, copies it, and then returns it to the original render target.
	// Processing such as returning is performed.
	// In other words, it is better or inefficient to recommend that you do not use this method as much as possible.
	// If it's currently set in the framebuffer, that's fine.
	// However, it is not clear without measuring the speed whether it is actually inefficient.
	// In the first place, it is better to avoid the transfer between CPU <-> GPU as much as possible.


	/**
	 * Swap the texture set in the framebuffer with the texture pointed to by the Texture class.
	 * @description The exception is if the size of the texture to be exchanged is not matched.
	 * The color format must also be RGBA.
	 * It may be better not to replace it during rendering (confirmation required).
	 * If you don't need to draw on both sides, such as with a crossfade, you can reduce the overhead by taking the old image as a Texture and replacing it with a new Texture.
	 * @param texture Instances of the Texture class to be exchanged.
	 */
	function exchangeTexture( texture:Texture );

	/**
	 * Width, specified at the time of generation [r]
	 */
	property width;
	/**
	 * Height, specified at the time of generation [r]
	 */
	property height;

	/**
	 * Environment-dependent handle [r]
	 * @description Under OpenGL ES, it is a texture id.
	 */
	property nativeHandle;
};
