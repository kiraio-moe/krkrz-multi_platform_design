/**
 * @description A class that stores a compiled / linked version of the Vertex / Fragment shader.
 * Compile / link is executed in the constructor, and if there is an error, an exception will be thrown, so look at the log and correct it.
 * The parameters used to enter the shader are added to the member so you can set the value via the member.
 * The variable name is obtained from the shader using reflection.
 * Designation such as Texture is decided in advance as a reserved word, and it is made with that name.
 * The Attribute attribute value that becomes the vertex information can be set via the member only when `VertexBuffer` / `VertexBinder` is used in `drawMesh`.
 * The original member functions and properties of ShaderProgram cannot necessarily be used as input variable names in the shader (so we currently add only a minimal number of members).
 *
 * If you set a value for the property added as the input name defined in the shader, that value will be set at the time of drawing.
 * The added property can only be set to a value and cannot be obtained.
 * The value will be retained, so if you want to use the same shader, you need to change it to the value you want to specify before drawing.
 * The property type is obtained from the shader script.
 * `vec4` etc. are passed to `Array` class as an array of real type.
 *
 * Reserved words are automatically set internally when drawing is executed, so there is no need to set a value explicitly (except for `drawMesh`).
 * The first texture id is passed to ex. `s_tex0`.
 * The value that is set automatically depends on the drawing instruction.
 *
 * If the shader can be specified from the script and can be replaced freely, the TJS2 script alone can produce the effect faster than the conventional CPU processing, without writing a plug-in to extend the function to the layer as in the past. You can expect to be able to add.
 * There is no function equivalent to `Layer` at present, but if you enhance the peripheral functions required to realize `Layer` / `Sprite` etc. with TJS2 script, you can write with a script around that, and the number of native (C++) plugins is less than before. I can do it.
 * On Android, where binaries need to be prepared for multiple CPUs, scripting enhancements also help reduce the apk size.
 * It is also advantageous for multi-platform.
 * If you distribute a set of TJS2 scripts that realize shaders + Sprites that handle them, you can enhance the production.
 *
 * When inputting the shader script to a file, write it in UTF-8.
 *
 *
 * Variable names that cannot be used in shaders (internally defined)
 *
 * + `ShaderProgram`
 * + `finalize`
 *
 * The name of the value that is set automatically
 *
 * + texture : `s_tex0`, `s_tex1`, `s_tex2`, `s_tex3`...
 * + Vertex coordinates : `a_pos(vec2)`
 * + Texture coordinates : `a_texCoord(vec2)`
 * + queue : `a_modelMat4(mat4)`
 *
 *
 * GLSL structures and arrays are not initially supported.
 */
class ShaderProgram {

	/**
	 * constructor
	 * @param vertex Specifies the party shader.
	 * When file is true, specify the file name, and when file is false, specify the character string directly.
	 * @param fragment Specify the fragment shader.
	 * When file is true, specify the file name, and when file is false, specify the character string directly.
	 * @param vsfile Select whether the character string specified by vertex is a file or a direct script specification.
	 * @param fsfile Select whether the character string specified by fragment is a file or a direct script specification.
	 */
	function ShaderProgram( vertex:string, fragment:string, vsfile:boolean=true, fsfile:boolean=true );

};
