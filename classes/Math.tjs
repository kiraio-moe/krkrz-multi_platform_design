/**
 * @description Almost compatible with JavaScript Math.
 * Provides mathematical functions.
 */
class Math {
	/**
	 * Get absolute value
	 * @param val Real number
	 * @return Absolute value
	 */
	function abs( val:real ):real;
	/**
	 * Ark cosine
	 * @param val Real number
	 * @return Ark cosine
	 */
	function acos( val:real ):real;
	/**
	 * Ark sign
	 * @param val Real number
	 * @return Ark sign
	 */
	function asin( val:real ):real;
	/**
	 * Ark tangent
	 * @param val Real number
	 * @return Ark tangent
	 */
	function atan( val:real ):real;
	/**
	 * Two-variable arc tangent
	 * @description Returns the tangent of y / x in the range [-π, π].
	 * @param y Edge y
	 * @param x Edge x
	 * @return Ark tangent
	 */
	function atan2( y:real, x:real ):real; ()
	/**
	 * Round up
	 * @param val Real number
	 * @return Round up
	 */
	function ceil( val:real ):real;
	/**
	 * Truncate
	 * @param val Real number
	 * @return Truncate
	 */
	function floor( val:real ):real;
	/**
	 * e to nth power
	 * @param val Real number
	 * @return e to nth power
	 */
	function exp( val:real ):real;
	/**
	 * Natural logarithm
	 * @param val Real number
	 * @return Natural logarithm
	 */
	function log( val:real ):real;
	/**
	 * Larger of two or more values
	 * @param a Real number
	 * @param b Real number
	 * @return Largest value
	 */
	function max( a:real, b:real, ... ):real;
	/**
	 * The smaller of two or more values
	 * @param a Real number
	 * @param b Real number
	 * @return Minimum value
	 */
	function min( a:real, b:real, ... ):real;
	/**
	 * Random numbers greater than or equal to 0 and less than 1
	 * @description Implementation by xorshift
	 * @return Random numbers greater than or equal to 0 and less than 1
	 */
	function random():real;
	/**
	 * multiplier
	 * @description Returns a to the bth power.
	 * @param a Real number
	 * @param b Real number
	 * @return a to the bth power
	 */
	function pow( a:real, a:real ):real; ()
	/**
	 * Rounding to integers
	 * @param val Real number
	 * @return Rounded value
	 */
	function round( val:real ):real;
	/**
	 * Sign
	 * @param val Real number
	 * @return Sign
	 */
	function sin( val:real ):real;
	/**
	 * Cosine
	 * @param val Real number
	 * @return Cosine
	 */
	function cos( val:real ):real;
	/**
	 * Tangent
	 * @param val Real number
	 * @return Tangent
	 */
	function tan( val:real ):real;
	/**
	 * square root
	 * @param val Real number
	 * @return square root
	 */
	function sqrt( val:real ):real;


	/**
	 * e Base of natural logarithm (Napier number)
	 */
	const E;
	/**
	 * log (10)
	 */
	const LN10;
	/**
	 * log (2)
	 */
	const LN2;
	/**
	 * Logarithm of e with base 10
	 */
	const LOG10E;
	/**
	 * Logarithm of e with base 2
	 */
	const LOG2E;
	/**
	 * π
	 */
	const PI;
	/**
	 * sqrt (1/2)
	 */
	const SQRT1_2;
	/**
	 * sqrt (2)
	 */
	const SQRT2;
};

