/**
 * @description The `Array` class is a class that handles arrays.
 *
 * You can create objects of this class and treat them like arrays using the subscripts specified by the indirect member selection operator.
 * Subscripts are integers.
 * `0` represents the first element and `1` represents the next element.
 * If you specify a negative integer, it is treated as specified from the end of the array (`-1` represents the last element).
 * The size of the array does not need to be declared.
 * The size is automatically expanded to the size of the specified subscript, and elements with no assigned value are initialized to void.
 * 
 * There is also a count property, which represents the size of the array.
 * You can also change the size of the array by assigning a value to the count property.
 *
 * You can use `[]` to write an object of class Array in an expression on the fly.
 * In `[]`, separate the expressions that are the initial elements, separated by commas.
 * For example
 * `var ar = ["a", "b", "c"];`
 * If you write, ar is assigned a reference to an object of the Array class that contains the elements `"a"`, `"b"`, and `"c"`.
 * You can also use `[]` to generate an Array class.
 * `var ar = [];`
 * When
 * `var ar = new Array();`
 * Is the same.
 */
class Array {

	/**
	 * Represents the size of the array.
	 */
	property count;

	/**
	 * Represents the size of the array. Same as count.
	 */
	property length;

	/**
	 * Read the array from a file.
	 * @description Read an array from a text file.
	 * The text of the file goes line by line into each element, and finally the count property is the same as the number of lines in the file.
	 * @param storage File name to read
	 * @param mode Specifies the mode string when reading the file.
	 * If you specify the offset in decimal after "o", it will be read from that byte position in the file.
	 * @return Returns the object itself of this Array class.
	 */
	function load( storage:string, mode:string=null ):Array;

	/**
	 * Write the array to a file.
	 * @description Write the array to a file.
	 * Each member is output line by line, but references to objects, classes, functions, etc. are blank lines.
	 * @param storage File name to export
	 * @param mode Specifies the mode string when writing the file.
	 *
	 * + Specifying "c" gives the file a simple encryption (you can just load it with the load method).
	 * + You can specify "z" to compress the file and save it (it cannot be used with "c"; it can also be loaded by the load method as it is).
	 * + If you specify the offset in decimal after "o", it will be written from that byte position in the file.
	 * + If "b" is specified, it will be saved in binary format (cannot be used with other mode specifications; this can also be loaded by the load method as it is).
	 *
	 * @return Returns the object itself of this Array class.
	 */
	function save( storage:string, mode: string = null): Array;

	/**
	 * Split the string.
	 * @description Initialize the array and copy the strings separated by patterns or delimiters into this array.
	 * @param pattern Specifies a pattern or delimiter set.
	 * The pattern must be a regular expression object.
	 * For the delimiter set, specify the character that will be the delimiter.
	 * You can specify multiple delimiters by specifying a character string.
	 * @param text Specify the character string to be divided.
	 * @param reserve Reserved for future versions.
	 * @param ignoreSpace Specify true if the element is empty (for example, ,,,,, when the comma is the delimiter) and you do not want to copy the element into the array.
	 * @return Returns the object itself of this Array class.
	 */
	function split( pattern:string, text:string, reserve, ignoreSpace:bool=false ):Array;

	/**
	 * Combine the arrays into a single string.
	 * @description Combines each element of the array with a delimiter and returns the combined string.
	 * @param delimiter delimiter. Delimiter.
	 * @param reserve Reserved for future versions.
	 * @param ignore If true, voids in the element will be ignored.
	 * @return Returns the object itself of this Array class.
	 */
	function join( delimiter:string, reserve, ignore:bool=false ):string;

	/**
	 * Upside down the order of the elements in the array.
	 */
	function reverse();

	/**
	 * Sort the array.
	 * @description Combines each element of the array with a delimiter and returns the combined string.
	 * @param order The sort order is one of the following strings.
	 * The ascending order is sorted from the smallest to the largest, and the descending order is the opposite.
	 * If omitted, it is considered that'+' is specified.
	 *
	 * + "+"  : Ascending order (comparison with the usual <operator)
	 * + "-"  : descending order
	 * + "0"  : Numerical ascending order (10,2,1 is sorted into 1,2,10)
	 * + "9"  : Numerical descending order
	 * + "a"  : Ascending order by string ("a", "c", "b" are sorted into "a", "b", "c")
	 * + "z"  : Descending by string
	 *
	 * You can specify a function instead of the characters in the sort order.
	 * The function has two arguments.
	 * Specify a function that returns true if the first argument should come before the second argument (note that the return value has a different meaning than the function passed to the JavaScript sort method).
	 * @param stable Specifies whether to perform stable sorting.
	 * If omitted, false is assumed and an unstable sort is performed.
	 * In stable sorting, the order of array elements with the same order will be the same after sorting.
	 * In the case of unstable sorting, there is no guarantee that the order of array elements with the same order will be the same after sorting.
	 */
	function sort( order:string, stable:bool=false );

	/**
	 * Outputs structured data to a file.
	 * @description Outputs the state of the element to a file in a recoverable state.
	 * Each element can contain strings, real numbers, octet columns, and integers.
	 * Also, if the element has an object, the contents of that object are also output to a file only if it is an object of the Array class or Dictionary class.
	 * For other elements, void is output.
	 * @param storage File name to export
	 * @param mode Specifies the mode string when writing the file.
	 *
	 * + Specifying "c" gives the file a simple encryption (you can just load it with the load method).
	 * + You can specify "z" to compress the file and save it (it cannot be used with "c"; it can also be loaded by the load method as it is).
	 * + If you specify the offset in decimal after "o", it will be written from that byte position in the file.
	 * + If "b" is specified, it will be saved in binary format (it cannot be used together with other mode specifications; this can also be loaded by the load method as it is).
	 *
	 * @return Returns the object itself of this Array class.
	 */
	function saveStruct( storage:string, mode: string = null): Array;

	/**
	 * Enter structured data from a file
	 * @description Reads structured data from a file as an array.
	 * Only files written in binary format are supported.
	 * @param storage File name to read
	 * @param mode Specifies the mode string when reading the file.
	 *
	 * + If you specify the offset in decimal after "o", it will be written from that byte position in the file.
	 *
	 * @return If the read is successful, it returns the object itself of this Array class.
	 */
	function loadStruct( storage:string, mode: string = null): Array;

	/**
	 * Copy the array.
	 * @description Copies the entire contents of the other array specified by the argument.
	 * If you specify a dictionary array (an object of the Dictionary class) as the copy source array, each member of the dictionary array will appear alternately in the order of name and value.
	 * The order of the members is indefinite.
	 * @param src Source Array | Dictionary instance
	 */
	function assign( src:Array );

	/**
	 * Copy the array along with the structure.
	 * @description Copies the entire contents of the other array specified by the argument.
	 * Unlike the assign method, if a member has an array or dictionary array, it will recursively copy its contents as well (the assign method only copies the reference).
	 * @param src Source Array | Dictionary instance
	 */
	function assignStruct( src:Array );

	/**
	 * Delete all the elements of the array.
	 */
	function clear();

	/**
	 * Deletes the specified subscript element.
	 * @description Deletes the subscript at the specified position. The elements after the subscript are shifted forward one by one and packed. An exception will be thrown if the subscript is out of range.
	 * @param index position
	 */
	function erase(index:int);

	/**
	 * Deletes the element that has the same value as the specified value.
	 * @description It identifies and compares each element with the specified value (=== operator behavior) and removes the matching element.
	 * Delete all, or if is false, delete only the first element found.
	 * Otherwise, delete all found elements.
	 * @param value Value to delete
	 * @param all Whether or not to target all
	 */
	function remove( value, all:bool=true );

	/**
	 * Inserts the specified value at the specified position.
	 * @description Inserts the element indicated by the value at the subscript position indicated by the position.
	 * The elements after the position are shifted backward one by one.
	 * @param index Insertion position
	 * @param value Insert value
	 */
	function insert( index:int, value );

	/**
	 * Adds the specified value to the end of the array.
	 * @description Adds the element indicated by the value at the end of the array.
	 * This method returns the position where the value was added.
	 * @param value Additional value
	 * @return Added position
	 */
	function add( value ):int;

	/**
	 * Returns the subscript where the specified value first appears.
	 * @description The specified value is searched in order from the subscript at the search start position, and the subscript that appears first is returned.
	 * Returns -1 if the specified value is not found.
	 * Distinguished comparison (=== operator behavior) is used for comparison.
	 * @param value Search value
	 * @param offset Starting position
	 * @return The position found. -1 if not found.
	 */
	function find( value, offset:int=0 ):int;

	/**
	 * Adds the specified element to the end of the array.
	 * @description Unlike the add method, this method returns the size of the added array.
	 * Also, if multiple arguments are specified, all the arguments will be added in order.
	 * @param value Additional value
	 * @return Size after addition
	 */
	function push( value, ... ):int;

	/**
	 * Takes one element from the end of the array and returns it.
	 * @description The retrieved element is removed from the array (the size of the array is reduced by one).
	 * @return Returns the retrieved element. Returns void if there are no elements.
	 */
	function pop():variant;

	/**
	 * Add the element to the beginning of the array.
	 * @description If multiple elements are specified, multiple elements can be added at the beginning.
	 * In this case, for example, if passed in the order of a, b, c, the first element of the array will be in the order of a, b, c.
	 * @param value Additional value
	 * @return Size after addition
	 */
	function unshift( value, ... ):int;

	/**
	 * Takes one element from the beginning of the array and returns it.
	 * @description The retrieved element is removed from the array (the size of the array is reduced by one).
	 * @return Returns the retrieved element. Returns void if there are no elements.
	 */
	function shift():variant;

	/**
	 * Returns the array element in octet according to the character string specified by the argument.
	 * @description The specified string is called a template.
	 * A template is a list of typed characters and their lengths.
	 * When * is specified as the length, it represents all the remaining lengths.
	 * If the length is omitted, it is treated as 1.
	 * @param template The following characters can be used in the template string.
	 *
	 * + a : ASCII string (null-terminated)
	 * + A : ASCII string (spaces are completed)
	 * + b : Binary string (from low-order bit to high-order bit)
	 * + B : Binary string (from high-order bit to low-order bit)
	 * + c : Signed 1-byte number (-128 to 127)
	 * + C : Unsigned 1-byte number (0 to 255)
	 * + d : Double precision floating point value
	 * + f : Single precision floating point value
	 * + h : Hexagonal string (low nybble first)
	 * + H : Hexic string (high nybble first)
	 * + i : Signed int number (usually 4 bytes)
	 * + I : Unsigned int number (usually 4 bytes)
	 * + l : Signed long number (usually 4 bytes)
	 * + L : Unsigned long number (usually 4 bytes)
	 * + n : Unsigned short number (network byte order)
	 * + N : Unsigned long number (network byte order)
	 * + s : Signed short number (usually 2 bytes)
	 * + S : Unsigned short number (usually 2 bytes)
	 * + v : Unsigned short value (little endian)
	 * + V : Unsigned long value (little endian)
	 * + x : Null character
	 * + X : 1 byte backward
	 * + @ : Fill null characters to absolute position
	 * + m : Base64 decode
	 */
	function pack(template:string);

	/**
	 * Executes the argument function for each element of the array.
	 * @description Calls the specified function once for each element of the array.
	 * If the context is null, such as an anonymous function, it will be called in the array context.
	 * If the function returns a value, processing is interrupted and that value is used as the return value of this function.
	 * When the function is called as a string, the method of all array elements is called without interruption even if the value is returned.
	 * @param func In the case of a string, that method of the array element is called, and in the case of a function, it is called in the form of function (value, index, args *).
	 * @param args Specify any number of arguments to pass to the function to call. It does not have to be.
	 * @return The value returned by the calling function
	 */
	function forEach( func, args ):variant;

	/**
	 * Determines if it contains the specified value.
	 * @description It looks at the specified value in order from the subscript of the search start position, and returns whether the specified value exists.
	 * Distinguished comparison (=== operator behavior) is used for comparison.
	 * @param value Search value
	 * @param offset Starting position
	 * @return True if found, false if not found.
	 */
	function includes( value, offset:int=0 ):int;
};
