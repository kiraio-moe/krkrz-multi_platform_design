/**
 * ウインドウのサイズ制御はWindowsでのみ可能。Androidでは画面サイズに依存する。
 * Offscreenクラスをレンダリングしたいサイズで生成し、そこに通常の描画を行う。
 * ウインドウ(画面)サイズに応じた拡大等はスクリプトで制御する。
 * UIや文字などを等倍で綺麗に表示することもスクリプトで可能となる。
 */
class Window {

	/**
	 * コンストラクタ
	 */
	function Window();

	/**
	 * クライアントサイズの設定(Windowsのみ)
	 * Androidでは画面サイズ = クライアントサイズとなる。
	 * Androidでこのメソッドを呼んでも何も起こらない。
	 * @param width  描画領域の横幅
	 * @param height 描画領域の縦幅
	 */
	function setInnerSize(width, height)

	/**
	 * フルスクリーン指定
	 * Androidではフルスクリーン固定
	 */
	property fullScreen;

	// ---------------------------------------------------------------
	// イベント処理
	// ---------------------------------------------------------------

	/**
	 * 画面更新コールバックイベント
	 * 画面更新処理時に呼び出される
	 * この呼び出しの間に独自の描画処理を行う
	 * このメソッドを直接呼び出さないこと。
	 */
	function onDraw();

	/**
	 * 明示的に描画を呼び出す。
	 * このメソッドはonDrawを間接的に呼び出す。
	 * 自分で描画したい場合は、このメソッドを呼び出し、onDraw内で描画する。
	 */
	function startDrawing();

	/**
	 * 指定サイクルで描画を行う。
	 * 60や30などを指定する。
	 * 0を指定するとonDrawは呼び出されない。
	 */
	property drawCycle;

	/**
	 * 垂直同期を描画時に待つ。
	 * ティアリング等発生する場合に設定する。
	 * 指定できない環境では、設定しても無意味(常時vsync待ちがある)。
	 */
	property waitVSync;

	/**
	 * 何らかのポインティングデバイスで押下された
	 * @param type タッチもしくはマウスボタンの種類
	 * @param x X位置
	 * @param y Y位置
	 * @param cx 接触幅(ピクセル数)、マウスの時は1
	 * @param cy 接触高さ(ピクセル数)、マウスの時は1
	 * @param shift 修飾キー状態、タッチの時は0
	 * @param id タッチID、マウスの時は常に0
	 */
	function onPointerDown( type, x, y, cx, cy, shift, id );

	/**
	 * 何らかのポインティングデバイスが移動された
	 * @param type タッチもしくはマウス。マウスボタンの種類ではなく、マウスとして通知。
	 * @param x X位置
	 * @param y Y位置
	 * @param cx 接触幅(ピクセル数)、マウスの時は1
	 * @param cy 接触高さ(ピクセル数)、マウスの時は1
	 * @param shift 修飾キー状態(マウス押下状態を含む)、タッチの時は0
	 * @param id タッチID、マウスの時は常に0
	 */
	function onPointerMove( type, x, y, cx, cy, shift, id );

	/**
	 * 何らかのポインティングデバイスが離された
	 * @param type タッチもしくはマウスボタンの種類
	 * @param x X位置
	 * @param y Y位置
	 * @param cx 接触幅(ピクセル数)、マウスの時は1
	 * @param cy 接触高さ(ピクセル数)、マウスの時は1
	 * @param shift 修飾キー状態、タッチの時は0
	 * @param id タッチID、マウスの時は常に0
	 */
	function onPointerUp( type, x, y, cx, cy, shift, id );

	/**
	 * キー操作系要検討
	 */
	function onKeyXXX();

	/**
	 * ウインドウがアクティブになった
	 */
	function onActivate();

	/**
	 * ウインドウが非アクティブになった
	 */
	function onDeactivate();

	/**
	 * 終了確認用、従来と同じ(Windowsのみ)
	 * Androidの場合、タイトル画面での戻るキーで自分で終了する(onKeyXXXを自分でハンドリング)必要がある。
	 * システムに停止させられる時は、止めようがなく、いきなり終了させられることもある。
	 * タスクリストから終了させられるときも問答無用である。
	 * AndroidではonDeactivateが来た時にオートセーブするしか突然終了に対する対策がない。
	 */
	function onCloseQuery(canclose);

	/**
	 * 描画用のCanvasクラスのインスタンスを得る
	 * onDraw 内で
	 */
	property canvas;
}

