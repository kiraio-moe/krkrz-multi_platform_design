/**
 * @description The Debug class is a class that provides functions related to debugging KiriKiri.
 * You cannot create objects from this class.
 * The name of the Kirikiri console log will be krkr.console.log.
 * Also, the file created when a hardware exception occurs is her hwexcept.log.
 * These log files default to the project directory.
 * However, if the project directory is a non-writable directory such as an archive, it will not be output.
 * The output destination of the log file can be changed with the logLocation property (in the case of KAG, it is set as the save destination of bookmark data).
 * On Windows, the console is the command prompt, and on Android, the output is to logCat.
 */
class Debug {
	/**
	 * Output message to console
	 *
	 * @param message Specify the message to be output.
	 * @description Outputs a message to the console.
	 */
	function message( message);

	/**
	 * Output important messages to the console
	 *
	 * @param message Specify the message to be output.
	 * @description Outputs a message to the console.
	 * Unlike Debug.message, the message output here is always written to the log file even if you start writing to his log file in the middle (the message output by Debug.message can only be traced back to some extent. Will not be written).
	 * It is used to output important information that will be useful when collecting log files.
	 */
	function notice( message);

	/**
	 * Start output of console log
	 *
	 * @param clear If you specify true, the log file will be cleared.
	 * If you specify false, it will be added to the existing file.
	 * @description Starts outputting the console log to a file.
	 * @see Debug.logToFileOnError
	 * @see Debug.clearLogFileOnError
	 */
	function startLogToFile( clear=false);

	/**
	 * Start outputting the log to a file as in the case of an error
	 *
	 * @description Regarding the error log file, Kirikiri makes the same operation as when the error occurred.
	 * That is, if Debug.logToFileOnError is true, it will start outputting console logs to a file.
	 * At that time, if Debug.clearLogFileOnError is true, the file is cleared.
	 * In contrast, Debug.startLogToFile unconditionally starts outputting the console log to a file.
	 * @see Debug.startLogToFile
	 * @see Debug.logToFileOnError
	 * @see Debug.clearLogFileOnError
	 */
	function logAsError();

	/**
	 * Add a log handler
	 *
	 * @param handler Specify the log handler.
	 * @description Register a handler that will be called each time an error log is output.
	 * The handler is called with a log message as an argument.
	 * Even if you output the log in the registration method, the recursive call is not made and it is ignored.
	 */
	function addLoggingHandler( handler);

	/**
	 * Delete the log handler
	 *
	 * @param handler Specify the log handler.
	 * @description Delete the registered log handler.
	 */
	function removeLoggingHandler( handler);

	/**
	 * Get unoutput logs
	 *
	 * @description Get the log that is not output.
	 */
	function getLastLog( );

	/**
	 * Log file output destination
	 *
	 * @description Represents the output directory of the log file.
	 * You can also write a value.
	 * By default, it is set to the data storage location (command line option -datapath).
	 * If you change this value, subsequent logs will be output as * .console.log under that directory.
	 */
	 property logLocation {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Whether to output the console log to a file when an error occurs
	 *
	 * @description If true, it will start outputting the console log to a file when an error occurs.
	 * If false, the log will not be output to a file even if an error occurs.
	 * @see Debug.startLogToFile
	 * @see Debug.clearLogFileOnError
	 */
	 property logToFileOnError {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Whether to clear the console log file when an error occurs
	 *
	 * @description If true, it will automatically clear the console log when an error occurs.
	 * If false, it will not be cleared and will be added to the existing log file.
	 * @see Debug.startLogToFile
	 * @see Debug.logToFileOnError
	 */
	 property clearLogFileOnError {
		 getter() { return value; }
		 setter( value ) {}
	}
};
