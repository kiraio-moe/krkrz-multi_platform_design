/**
 * @description The Scripts class manages methods and properties related to TJS2.
 * You cannot create objects from this class.
 */
class Scripts {
	/**
	 * Run scripts on storage
	 *
	 * @param storage Specifies the storage to run.
	 * @param mode Specifies the mode string when reading the file.
	 * If you specify the offset in decimal after "o", it will be read from that byte position in the file.
	 * @param context Specifies the execution context.
	 * @return The result of executing the script is returned.
	 * @description Loads the specified storage and executes its contents as a TJS2 script.
	 * Exceptions that occur during script execution are not caught within this method and can be caught by the caller of this method.
	 * @see Scripts.evalStorage
	 */
	function execStorage( storage, mode='', context=global);

	/**
	 * Evaluation of expressions on storage
	 *
	 * @param storage Specify the storage to evaluate.
	 * @param mode Specifies the mode string when reading the file.
	 * If you specify the offset in decimal after "o", it will be read from that byte position in the file.
	 * @param context Specifies the execution context.
	 * @return The result of evaluating the expression is returned.
	 * @description Reads the specified storage and evaluates its contents as a TJS2 expression.
	 * Exceptions that occur during script execution are not caught within this method and can be caught by the caller of this method.
	 * @see Scripts.execStorage
	 */
	function evalStorage( storage, mode='', context=global);

	/**
	 * Compiling scripts on storage
	 *
	 * @param inputfile Specify the storage to be compiled.
	 * @param outputfile Specifies the output bytecode storage.
	 * @param isresult Specifies whether a return value is required.
	 * @param outputdebug Specifies whether to include debug information.
	 * @param isexpression Specifies whether it is an expression.
	 * @description Reads the specified storage, compiles its contents and outputs it as a bytecode file.
	 * The compiled bytecode file can be executed with execStorage or evalStorage in the same way as a normal script.
	 * @see Scripts.execStorage
	 * @see Scripts.evalStorage
	 */
	function compileStorage( inputfile, outputfile, isresult=false, outputdebug=false, isexpression=false);

	/**
	 * Script execution
	 *
	 * @param script Specify the script to be executed as a character string.
	 * @param name Specifying the file name for the error message
	 * @param linesof Specifying the line number for the error message
	 * @param context Specifies the execution context.
	 * @return The result of executing the script is returned.
	 * @description Executes the string specified in script as a TJS2 script.
	 * Exceptions that occur during script execution are not caught within this method and can be caught by the caller of this method.
	 * @see Scripts.execStorage
	 * @see Scripts.eval
	 */
	function exec( script, name='', linesof=0, context=global);

	/**
	 * Evaluation of the expression
	 *
	 * @param expression Specify the expression to be executed as a character string.
	 * @param name Specifying the file name for the error message
	 * @param linesof Specifying the line number for the error message
	 * @param context Specifies the execution context.
	 * @return The result of evaluating the expression is returned.
	 * @description Executes the string specified by expression as a TJS2 expression.
	 * Exceptions that occur during script execution are not caught within this method and can be caught by the caller of this method.
	 * @see Scripts.execStorage
	 * @see Scripts.exec
	 */
	function eval( expression, name='', linesof=0, context=global);

	/**
	 * Context dump
	 *
	 * @description Outputs the details of the contents of each context in the script block currently loaded by TJS2 to a local file.
	 * The disassembled result of the VM code is mainly output.
	 * The output file will be output to the same folder as the Kirikiri executable file, and its file name will be the Kirikiri executable file with .dump.txt added.
	 */
	function dump( );

	/**
	 * Get call history
	 *
	 * @param limit Specifies the maximum call depth for which history is to be retrieved.
	 * If you omit this argument or specify 0, you get as much history as you can get.
	 * @return A string of call history
	 * @description Gets the method call history as a string.
	 * You can get the history at the time this method was called.
	 * To use this method, the command line option must have -debug (debug mode) enabled.
	 * If debug mode is disabled, this method returns an empty string.
	 * The returned string is, for example
	 *  'messagelayer.tjs (1561) [(function) addButton] <-mainwindow.tjs (4463) [(function expression) (anonymous)] <-conductor.tjs (427) [(function) onTag] <-conductor .tjs (95) [(function) timerCallback]'
	 * It is something like.
	 */
	function getTraceString( limit=0);

	/**
	 * missing method call settings
	 *
	 * @param obj An object that causes the missing method to be called when no member is found.
	 * @description Set the missing method to be called when no member is found.
	 * If no member is found in the object registered by this method, the method will be called in the form of function missing (isset, name, prop).
	 * isset is set if true, get if false.
	 * name is the name of the member that was not found.
	 * prop is the assignment destination of the value to be assigned at the time of setting and the value to be returned at the time of acquisition.
	 * If the name member is not found by the missing method, it returns a non-zero value.
	 * If you return a non-zero, you will get an exception that the member cannot be found.
	 * Even if the function is not found, it will be called with get.
	 * Since the finalize function is also the target, it is better to define the finalize function in the class that sets this.
	 */
	function setCallMissing( obj );

	/**
	 * Get class name
	 *
	 * @param obect An object to get the class name.
	 * @return Array of class names
	 * @description Get the class name from the object.
	 */
	function getClassNames( obect);

	/**
	 * Specify the text encoding to use when loading the script
	 *
	 * @description Specifies the text encoding to use when loading the script.
	 * Currently, you can specify either "UTF-8" or "Shift_JIS".
	 */
	 property textEncoding {
		 getter() { return value; }
		 setter( value ) {}
	}
};
