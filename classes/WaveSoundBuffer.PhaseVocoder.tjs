class WaveSoundBuffer
/**
 * @description The WaveSoundBuffer.PhaseVocoder class is a filter for registering and using this instance in WaveSoundBuffer.filters and provides Phase Vocoder functionality.
 * With Phase Vocoder, you can change the pitch while maintaining the playback speed (pitch shifter), and change the playback speed while maintaining the pitch (time shifter).
 */
	class PhaseVocoder {
	/**
	 * Building a PhaseVocoder object
	 *
	 * @description Build an object of the WaveSoundBuffer.PhaseVocoder class.
	 * Register the created instance with the instance of WaveSoundBuffer with WaveSoundBuffer.filters.
	 */
	function PhaseVocoder( );

	/**
	 * Get interface object
	 *
	 * @description Used internally. Do not use it from a script.
	 */
	 property interface {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Scale in the time axis direction
	 *
	 * @description Represents a scale along the time axis. You can also set the value.
	 * Possible numbers are real numbers greater than 0.
	 * However, if the value is too small, the CPU load will be high, and in the worst case, playback may not be possible.
	 * In addition, the sound quality deteriorates from around 1.95, and the sound quality may not be improved even if the overlap is increased (due to the characteristics of the internal algorithm).
	 * If you specify 1.0, the scale along the time axis does not change (the playback speed does not change).
	 * For example, if you specify 1.5, the scale along the time axis will be 1.5 times faster and the playback will be slower (playback will take 1.5 times longer).
	 * For example, if you specify 0.5, the scale along the time axis will be 0.5 times faster and will play faster (play at double speed).
	 * The Phase Vocoder filter works even if both the time and pitch properties are 1, the sound quality is slightly degraded, and it also uses CPU time.
	 * If you want to keep both at 1, it's a good idea to remove this filter from the filter array.
	 * Changes to this property will be reflected in real time, but due to buffering, it will take about 2 seconds to actually play.
	 * In addition, noise may occur when switching.
	 */
	 property time {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Frequency axis scale
	 *
	 * @description Represents the scale in the frequency axis direction.
	 * You can also set the value.
	 * The number that can be specified is greater than 0.0.
	 * If you specify 1.0, the scale along the frequency axis does not change (the pitch does not change).
	 * For example, if you specify 1.0594630943593, the pitch will be increased by a semitone.
	 * For example, if you specify 0.9438743126817, the pitch will be lowered by a semitone.
	 * The Phase Vocoder filter works even if both the time and pitch properties are 1, the sound quality is slightly degraded, and it also uses CPU time.
	 * If you want to keep both at 1, it's a good idea to remove this filter from the filter array.
	 * Changes to this property will be reflected in real time, but due to buffering, it will take about 2 seconds to actually play.
	 */
	 property pitch {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Window size
	 *
	 * @description Represents the FFT (Fast Fourier Transform) window size (frame size) used inside the Phase Vocoder.
	 * Specify a power of 2 between 64 and 32768.
	 * The default is 4096.
	 * Increasing this number will increase the resolution in the frequency axis direction (less pitch deviation), but decrease the resolution in the time axis direction (sound attack will be dull).
	 * Increasing the value will use more CPU.
	 * Find the lowest value that does not compromise the sound quality.
	 * For 44.1KHz audio, window size = 256 is recommended.
	 * For music, window size = 4096 is recommended.
	 * Changes to this property will take effect when the WaveSoundBuffer.open method is executed.
	 */
	 property window {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Overlap count
	 *
	 * @description Represents the overlap count (oversampling factor).
	 * Specify a number that is 0 or a power of 2 between 2 and 32.
	 * The default is 0.
	 * If you specify 0, the appropriate value is set according to the value of the current time property.
	 * Increasing this number will increase the resolution along the time axis.
	 * Especially when slowing down the playback speed, it is better to set a large number.
	 * Increasing the value will use more CPU.
	 * Changes to this property will be reflected in real time, but due to buffering, it will take about 2 seconds to actually play.
	 * In addition, noise may occur when switching.
	 */
	 property overlap {
		 getter() { return value; }
		 setter( value ) {}
	}
	}
};
