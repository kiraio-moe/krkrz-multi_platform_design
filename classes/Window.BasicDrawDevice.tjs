class Window {
/**
 * @description The Window.BasicDrawDevice class is a DrawDevice for registering and using this instance in Window.drawDevice and provides standard drawing functionality.
 * Only available on Windows.
 * Deprecated in the multi-platform version.
 * By default, Canvas is used for drawing, and DrawDevice cannot be used unless -graphicsystem=drawdevice is specified as an option.
 * In that case, you will not be able to draw with Canvas.
 */
	class BasicDrawDevice {
	/**
	 * [Windows +] Building a BasicDrawDevice object
	 *
	 * @description Build an object of the Window.BasicDrawDevice class.
	 * By default, an instance of this class is registered in Window.drawDevice, so there is no need to register a new one.
	 */
	function BasicDrawDevice();

	/**
	 * [Windows +] Internal device regeneration
	 *
	 * @description Regenerates the internal device.
	 * It is not normally used.
	 */
	function recreate( );

	/**
	 * [Windows +] When the screen is rotated
	 *
	 * @param orientation The orientation of the screen.
	 * It can be one of the following values:
	 *
	 * + oriUnknown (Acquisition failure / unknown)
	 * + oriPortrait(Vertical)
	 * + oriLandscape(Landscape)
	 *
	 * @param angle The angle.
	 * The angle is 0, 90, 180, 270, or -1, and if it cannot be obtained, it will be -1.
	 * The angle is the rotation angle from the device default, so it will be 0 in portrait orientation for portrait devices.
	 * On a normal device, it seems that there are many 0s in landscape orientation.
	 * The portrait orientation is 0 for recent 8-inch tablets, etc., and the portrait orientation is the standard orientation.
	 * @param bpp   bits per pixel.
	 * @param width The width of the screen.
	 * @param height The height of the screen.
	 * @description Represents an event function that is called when the screen is rotated.
	 * @see Window.onDisplayRotate
	 * @see Window.displayOrientation
	 * @see Window.displayRotate
	 */
	event onDisplayRotate( orientation, angle, bpp, width, height);

	/**
	 * [Windows +] Get interface object
	 *
	 * @description It is there to use the DrawDevice object in plugins.
	 */
	 property interface {
		 getter() { return value; }
	}
	}
};
