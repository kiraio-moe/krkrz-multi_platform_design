/**
 * @description In TJS2, a string is supposed to be an object of the String class in a pseudo manner, but the String class doesn't exist and it's not really an object of the String class (although the typeof operation on the string). If you use a child, it returns "String").
 * However, some methods and properties are available, as if the string were an object.
 */
class String {
	/**
	 * Returns the length of the string
	 * @description Note that it is a property, not a method.
	 * However, you cannot assign a value to this property.
	 * Since all characters are handled internally by UNICODE, double-byte characters can be counted as one character and half-width characters can be counted as one character.
	 */
	property length;

	/**
	 * 'Numeric' property
	 * @description If you indirectly specify a number as a property, you can access the character at that character position.
	 * For example, if str is a string or an expression that represents a string, then str [0] is the string that represents the first character.
	 * An exception is raised if the number is longer than the string or if it is negative (although the last character in the string returns an empty string).
	 *
	 * Substitution expressions cannot be generated.
	 */
	property ［］;

	/**
	 * Returns the character at the specified position in the string
	 * @description Returns the character at the specified position in the string.
	 * It behaves like a'numeric'property, but always returns an empty string if it is out of range (no exception).
	 * @param index position
	 * @return letter
	 */
	function charAt( index:int ):int;

	/**
	 * Returns the position of the substring
	 * @description Searches for text from offset in a string and returns the first found position.
	 * If offset is omitted, the search starts from the beginning of the character string.
	 * @param text Substring
	 * @param offset Search start position
	 * @return If 0 is returned it is the beginning of the string, if -1 is returned it is not found.
	 */
	function indexOf( text:string, offset:int=void ):int;

	/**
	 * Returns a string with the alphabet in lowercase.
	 * @description Returns a string with the alphabet in lowercase.
	 * Double-byte characters are not converted.
	 * These methods have no effect on the original string.
	 * The current version only converts characters with a character code less than 0x80.
	 * @return Converted string
	 */
	 
	function toLowerCase():string;

	/**
	 * Returns a string with a lowercase alphabet capitalized
	 * @description Returns a string with the lowercase alphabet capitalized.
	 * Double-byte characters are not converted.
	 * These methods have no effect on the original string.
	 * The current version only converts characters with a character code less than 0x80.
	 * @return Converted string
	 */
	function toUpperCase():string;

	/**
	 * Returns a substring of a string
	 * @description Returns a substring from offset to count of the string.
	 * It does not affect the original string.
	 * If count is omitted, all strings after offset are returned.
	 * Please note that the meaning of the argument is different from the same method of JavaScript.
	 * @param offset Start character position
	 * @param count Number of characters, optional.
	 * @return Substring
	 */
	function substring( offset:int, count:int=void ):string;

	/**
	 * Returns a substring of a string
	 * @description Returns a substring from offset to count of the string.
	 * It does not affect the original string.
	 * If count is omitted, all strings after offset are returned.
	 * Please note that the meaning of the argument is different from the same method of JavaScript.
	 * @param offset Start character position
	 * @param count Number of characters, optional.
	 * @return Substring
	 */
	function substr( offset:int, count:int=void ):string;

	/**
	 * Format the string
	 * @description Considers a string as a format string and returns a string with text formatting similar to sprintf in C.
	 * It does not affect the original string.
	 * @param arg Replacement variable
	 * @return Formatted string
	 */
	function sprintf( arg, ... ):string;

	/**
	 * Replaces a string
	 * @description Replaces the string according to the regular expression pattern and returns the replaced string.
	 * It does not affect the original string.
	 * @param pattern Regular expression
	 * @param replaced String after replacement
	 * @return Replaced string
	 * @see RegExp.replace
	 */
	function replace( pattern:string, replaced:string ):string;

	/**
	 * Split the string
	 * @description Split the string
	 * @param pattern Delimiter or regular expression
	 * @param reserve Reservation
	 * @param ignore Whether to ignore empty elements
	 * @return Returns an array object that contains the result of splitting the string.
	 * @see Array.split
	 */
	function split( pattern:string, reserve, ignore=false ):Array;

	/**
	 * Converts a string to a format that can be represented within the TJS string immediate value
	 * @description All symbols such as \ and "are deinterpreted (escaped) for special purposes using the \ symbol.
	 * @return Returns the escaped string.
	 */
	function escape():string;

	/**
	 * Returns a string with leading and trailing whitespace removed
	 * @description It does not affect the original string.
	 * The leading and trailing spaces refer to the characters whose character code is U + 0001 to +0020.
	 * In other words, it includes ASCII control characters, but does not include so-called double-byte spaces.
	 * Any consecutive leading or trailing whitespace will be removed.
	 * @return Returns a string with leading and trailing whitespace removed.
	 */
	function trim():string;

	/**
	 * Returns a string with the sequence of characters reversed
	 * @description It does not affect the original string.
	 * The current version does not guarantee the operation of strings containing surrogate pairs in UTF-16.
	 * @return Returns a string with the sequence of characters reversed.
	 */
	function reverse():string;

	/**
	 * Returns a string that repeats the string the specified number of times
	 * @description It does not affect the original string.
	 * @param count Number of repetitions
	 * @return Returns a string that repeats this string count counts.
	 */
	function repeat(count):string;

	/**
	 * Returns whether the string starts with the specified substring
	 * @description The substring specified by text is compared with the character string from the beginning to determine whether they match within the length range of the substring.
	 * @param text Substring
	 * @return Whether it starts with the specified string
	 */
	function startsWith( text:string ):int;

	/**
	 * Returns whether the string ends with the specified substring
	 * @description Compares the substring specified by text with the string from the end to determine if they match within the length range of the substring.
	 * @param text Substring
	 * @return Whether it starts with the specified string
	 */
	function endsWith( text:string ):int;
};
