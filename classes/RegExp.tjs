/**
 * @description RegExp クラスは正規表現パターンを扱うクラスです。
 * 正規表現パターンには perl 互換のパターンを指定することができます。
 * JavaScript の RegExp クラスににていますが、互換性は低いです。
 *
 * # Copyright notice
 * 正規表現機能の実装には K.Kosako 氏の鬼車を用いています。
 * 有用なライブラリを公開なさっている氏に感謝します。
 *
 * # 正規表現パターン
 * / と / で囲まれた部分に正規表現パターンを指定することができます。
 * トークン を参照してください。
 */
class RegExp {
	/**
	 * コンストラクタ
	 * @param pattern パターン文字列
	 * @param flag フラグ文字列
	 * @descriptionパターン文字列は正規表現パターンです。
	 * パターン中に指定する \ は、文字列即値中で書くときは \\ と書くことに注意してください。
	 * フラグ文字列は g i の文字の組み合わせです。
	 * g はグローバルサーチフラグです。
	 * このフラグをつけると、match、exec、replace の各メソッドで、パターンにマッチした文字列の部分すべてに対して処理が行われます。
	 * i フラグは英字の大文字/小文字の区別を行いません。
	 */
	function RegExp( pattern:string, flag:string=null );

	/**
	 * 正規表現オブジェクトに新しい正規表現パターンを設定します
	 * @param pattern パターン文字列
	 * @param flag フラグ文字列
	 */
	function compile( pattern:string, flag:string=null );

	/**
	 * 引数に指定した文字列がパターンにマッチするかどうかを返します
	 * @param text 判定文字列
	 * @return パターンにマッチすれば真、マッチしなければ偽が返ります。
	 * @description このメソッドはこのオブジェクトの各プロパティの値を更新します。
	 */
	function test( text:string ):bool;

	/**
	 * 引数に指定した文字列に正規表現パターンマッチングを行い、マッチした結果を含む配列を返します
	 * @param text 文字列
	 * @return パターンにマッチしない場合、配列の要素数は 0 になります。
	 * マッチした場合、要素 0 (最初の要素) はマッチした部分全体、それ以降の要素は各マッチ部分 ( 正規表現パターン中の ( ) で指定した部分 ) が入っています。
	 * @description このメソッドはこのオブジェクトの各プロパティの値を更新します。
	 */
	function exec( text:string ):Array;

	/**
	 * 引数に指定した文字列に正規表現パターンマッチングを行い、マッチした結果を含む配列を返します
	 * @description このオブジェクトのプロパティの値を更新しない以外は、exec メソッドと同一です。
	 * @param text 文字列
	 * @return パターンにマッチしない場合、配列の要素数は 0 になります。
	 * マッチした場合、要素 0 (最初の要素) はマッチした部分全体、それ以降の要素は各マッチ部分 ( 正規表現パターン中の ( ) で指定した部分 ) が入っています。
	 * @see RegExt.exec
	 */
	function match( text:string ):Array;

	/**
	 * 文字列の置き換えを行い、置き換えが行われた後の文字列を返します
	 * @param text 	対象文字列
	 * @param replace 置き換え文字列
	 * @return  対象文字列に対してマッチングを行い、マッチした部分を置き換え文字列で置き換え、置き換えが行われた後の文字列を返します。
	 * @description 置き換え文字列として、文字列ではなく関数を渡すと、置き換え動作のためにその関数が呼ばれるようになります。
	 * 関数は引数をひとつとり、対象文字列の中のマッチした部分をあらわす配列オブジェクトが渡されます ( この配列については exec メソッドを参照してください )。
	 * 対象文字列中のマッチした部分は、関数の戻した文字列に置き換わります。
	 * このメソッドは start プロパティを無視します。
	 */
	function replace( text:string, replace:string ):string;

	/**
	 * 文字列を分割します
	 * @param text 対象文字列
	 * @param reserved 予約
	 * @param ignore 空の要素を無視するか
	 * @rturn 文字列を分割した結果が格納された配列オブジェクトを返します。
	 * @see Array.split
	 */
	function split( text:string, reserved, igonre:bool=false ):Array;

	/**
 	 * マッチした各部分を含む配列を表す読み出し専用のプロパティです
 	 * @description パターンにマッチしない場合、配列の要素数は 0 になります。
 	 * マッチした場合、要素 0 (最初の要素) はマッチした部分全体、それ以降の要素は各マッチ部分 ( 正規表現パターン中の ( ) で指定した部分 ) が入っています。
 	 */
	property matches;

	/**
	 * 文字列の検索開始位置を表すプロパティです
	 * @description 値を設定することもできます。
	 */
	property start;

	/**
	 * マッチした部分の先頭文字の位置を表す、読み出し専用のプロパティです
	 * @description 0 が先頭を表すので、それがマッチング対象文字列の先頭の文字ならば 0 になります。
	 */
	property index;

	/**
	 * マッチした部分の最終文字の次の文字の位置を表す、読み出し専用のプロパティです
	 * @description 0 が先頭を表します
	 */
	property lastIndex;

	/**
	 * マッチング対象の文字列をあらわす、読み出し専用のプロパティです
	 */
	property input;

	/**
	 * マッチング対象文字列のうち、マッチした部分よりも左側の文字列をあらわす、読み出し専用のプロパティです
	 */
	property leftContext;

	/**
	 * マッチング対象文字列のうち、マッチした部分よりも右側の文字列をあらわす、読み出し専用のプロパティです
	 */
	property rightContext;

	/**
	 * マッチング対象文字列を表します
	 * @description matches[0] と同じです。
	 */
	property lastMatch;

	/**
	 * マッチした各部分のうち、最後の部分を返します
	 * @description matches[matches.count-1] と同じです。
	 */
	property lastParen;

	/**
	 * 最後に test あるいは exec メソッドが実行された RegExp クラスのインスタンスです
	 * @description 例 : 
	 * ```
	 * if(/pat(\d+)/.test(target)) { return RegExp.last.matches[1]; }
	 * ```
	 *
	 */
	property last;
};

