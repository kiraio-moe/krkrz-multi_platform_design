/**
 * @description Font クラスは、フォントを管理するためのクラスです。
 */
class Font {
	/**
	 * コンストラクタ
	 * @description Layerメンバのfontは、引数にLayerを渡す特殊版。
	 * 単体使用する場合は引数なしで生成する。
	 */
	function Font();

	/**
	 * 文字列の横幅を得る
	 *
	 * @param text 横幅を得たい文字列を指定します。
	 * @return 指定された文字列の横幅がピクセル単位で戻ります
	 * @description このメソッドでは、現在のフォントの設定で指定の文字列を描画したときに必要な横幅を得ることができます。
	 * @see Font.getTextHeight
	 */
	function getTextWidth( text);

	/**
	 * 文字列の縦幅を得る
	 *
	 * @param text 縦幅を得たい文字列を指定します。
	 * @return 指定された文字列の縦幅がピクセル単位で戻ります
	 * @description このメソッドでは、このフォントで指定の文字列を描画したときに必要な縦幅を得ることができます。
	 * @see Font.getTextWidth
	 */
	function getTextHeight( text);

	/**
	 * 文字の横方向への X 座標の移動量
	 *
	 * @param text 文字の横方向への X 座標の移動量を得たい文字列を指定します。
	 * @return 文字の横方向への X 座標の移動量がピクセル単位で戻ります
	 * @description 現在のフォントの設定で指定された文字を描画したときに必要な文字描画位置の移動量を得ることができます。
	 * このメソッドでは、文字の描画方向に対して横 ( 左 ) に進んだときの X 座標上での移動量を得ることができます。
	 * @see Font.getEscWidthY
	 * @see Font.getEscHeightX
	 * @see Font.getEscHeightY
	 */
	function getEscWidthX( text);

	/**
	 * 文字の横方向への Y 座標の移動量
	 *
	 * @param text 文字の横方向への Y 座標の移動量を得たい文字列を指定します。
	 * @return 文字の横方向への Y 座標の移動量がピクセル単位で戻ります
	 * @description 現在のフォントの設定で指定された文字を描画したときに必要な文字描画位置の移動量を得ることができます。
	 * このメソッドでは、文字の描画方向に対して横 ( 左 ) に進んだときの Y 座標上での移動量を得ることができます。
	 * @see Font.getEscWidthX
	 * @see Font.getEscHeightX
	 * @see Font.getEscHeightY
	 */
	function getEscWidthY( text);

	/**
	 * 文字の縦方向への X 座標の移動量
	 *
	 * @param text 文字の縦方向への X 座標の移動量を得たい文字列を指定します。
	 * @return 文字の縦方向への X 座標の移動量がピクセル単位で戻ります
	 * @description 現在のフォントの設定で指定された文字を描画したときに必要な文字描画位置の移動量を得ることができます。
	 * このメソッドでは、文字の描画方向に対して縦 ( 下 ) に進んだときの X 座標上での移動量を得ることができます。
	 * @see Font.getEscWidthX
	 * @see Font.getEscWidthY
	 * @see Font.getEscHeightY
	 */
	function getEscHeightX( text);

	/**
	 * 文字の縦方向への Y 座標の移動量
	 *
	 * @param text 文字の縦方向への Y 座標の移動量を得たい文字列を指定します。
	 * @return 文字の縦方向への Y 座標の移動量がピクセル単位で戻ります
	 * @description 現在のフォントの設定で指定された文字を描画したときに必要な文字描画位置の移動量を得ることができます。
	 * このメソッドでは、文字の描画方向に対して縦 ( 下 ) に進んだときの Y 座標上での移動量を得ることができます。
	 * @see Font.getEscWidthX
	 * @see Font.getEscWidthY
	 * @see Font.getEscHeightX
	 */
	function getEscHeightY( text);

	/**
	 * 文字列の実描画範囲
	 *
	 * @param text 範囲を得たい文字列を指定します。
	 * @return 文字列の実描画範囲
	 * @description 現在のフォントの設定で指定された文字を描画したときに、グリフ画像が描かれる範囲を得ることができます。
	 * 得られる範囲は 0,0 座標を基準にした Rect クラスのオブジェクトです。
	 * 横向きのみ対応しています。
	 * @see Rect
	 */
	function getGlyphDrawRect( text);

	/**
	 * フォント名の列挙
	 *
	 * @param flags フォントをどのように列挙するかを指定します。
	 * 次の値のビット論理和による組み合わせ指定します。
	 *
	 * + fsfFixedPitch     : 固定ピッチフォントのみ列挙します
	 * + fsfSameCharSet    : 同じキャラクタセットのフォントのみ列挙します
	 * + fsfNoVertical     : 縦書き用フォントを列挙しません
	 * + fsfTrueTypeOnly   : TrueType フォントのみ列挙します
	 * + fsfIgnoreSymbol   : シンボルキャラセットを除外します
	 * + fsfSameCharSet を指定した場合は、現在選択されているフォントと同じキャラクタセットのフォントが列挙されます。
	 *
	 * @return フォント名(文字列)が各要素として格納されている配列
	 * @description フォント名を列挙し、配列として返します。
	 * 	
	 */
	function getList( flags);

	/**
	 * レンダリング済みフォントの割り当て
	 *
	 * @param fontstorage レンダリング済みフォントストレージを指定します。
	 * @description 現在選択されているフォント名に対してレンダリング済みフォントの割り当てを行います。
	 * 以降、同じ設定のフォントに対しては指定されたレンダリング済みフォントが代わりに使われます。
	 * すべてのレイヤに対して設定が有効になります。
	 * @see Font.unmapPrerenderedFont
	 */
	function mapPrerenderedFont( fontstorage);

	/**
	 * レンダリング済みフォントの割り当て解除
	 *
	 * @description 現在選択されているフォント名に対するレンダリング済みフォントの割り当てを解除します。
	 * @see Font.mapPrerenderedFont
	 */
	function unmapPrerenderedFont( );

	/**
	 * フォントシステムにフォントを追加する。
	 * @param storage フォントファイル名
	 * @return ファイルに入っているフェイス名を配列で返す。
	 */
	function addFont( storage ) : Array;

	/**
	 * フォント名
	 *
	 * @description フォント名を表します。
	 * 値を設定することもできます。
	 * カンマで区切って複数の候補を指定することができます。
	 * この場合は、実際に存在するフォントが使用され、先頭に書いたものほど優先されます。
	 * 実際に存在するフォントかどうかは OS のフォントのリストを参照することにより行われます。
	 * どの候補にも合致しなかった場合は、デフォルトのフォントが使用されます (現バージョンではシステム標準フォント)。
	 * FreeTypeラスタライザでは、複数候補を指定した場合、フォールバックフォントとして扱われ、前から順にグリフを検索し、見付かったグリフをレンダリングするようになります。
	 * 言語ごとや絵文字など別ファイルとしてフォントファイルが存在する場合は、このフォールバックフォントの仕組みを利用します。
	 * 先頭をカンマにし、直後にフォント名を書くと、実際にそのフォントをOSが列挙しなくても、OSにそのフォントを指定しようとします (たとえば ",My Original Font" )。
	 * これにより AddFontResource Win32 API 等で登録した列挙不可能なフォントを使用することができます。
	 */
	 property face {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * フォント高さ
	 *
	 * @description 描画される文字の高さをピクセル単位で表します。
	 * 値を設定することもできます。
	 */
	 property height {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * ボールド
	 *
	 * @description ボールド ( 太字 ) であるかどうかを表します。
	 * 値を設定することもできます。
	 * 真を指定するとボールドになります。
	 */
	 property bold {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * イタリック
	 *
	 * @description イタリック ( 斜体 ) であるかどうかを表します。
	 * 値を設定することもできます。
	 * 真を指定するとイタリックになります。
	 */
	 property italic {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 取消線
	 *
	 * @description 取消線を描画するかどうか表します。
	 * 値を設定することもできます。
	 * 真を指定すると文字の上に取消線を描画します。
	 */
	 property strikeout {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * アンダーライン
	 *
	 * @description アンダーライン ( 下線または傍線 ) を描画するかどうか表します。
	 * 値を設定することもできます。
	 * 真を指定するとアンダーラインを描画します。
	 */
	 property underline {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 文字描画角度
	 *
	 * @description 文字描画角度を表します。
	 * 値を設定することもできます。
	 * 単位は角度 ( degree ) の 10 倍の値です。0 ～ 3600 の値をとります。
	 * 縦書きを行う場合はフォント名に縦書き用のフォント名を指定した上で、このプロパティに 2700 を指定します。
	 */
	 property angle {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 文字列描画方式
	 *
	 * @description 文字列描画方式を表します。
	 * 値を設定することもできます。
	 * 値は以下のどちらかを指定します(Windows以外では常にFreeTypeです)。
	 *
	 * + frGDI       : GDI を使って文字を描画します(Windows版のみ)
	 * + frFreeType  : FreeType を使って文字を描画します
	 *
	 * FreeType を指定した場合、横書きにのみ対応しています。
	 * その他は未対応です。
	 * このプロパティはスタティックです。
	 * Font.rasterizer を用いて値を設定してください。
	 */
	 property rasterizer {
		 getter() { return value; }
		 setter( value ) {}
	}
};
