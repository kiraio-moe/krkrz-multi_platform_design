/**
 * @description It is a 4x4 matrix.
 * Note that it is a column-major matrix because of OpenGL (column-major is computationally advantageous).
 * Seen from DirectX etc., it feels like it is transposed (in shader HLSL it is the same with column priority).
 */
class Matrix44 {

	/**
	 * Generated by identity matrix
	 */
	functiont Matrix44();

	/**
	 * constructor
	 * @param m11 [1] [1] Position value.
	 * @param m12 [1] [2] Position value.
	 * @param m13 [1] [3] Position value.
	 * @param m14 [1] [4] Position value.
	 * @param m21 [2] [1] Position value.
	 * @param m22 [2] [2] Position value.
	 * @param m23 [2] [3] Position value.
	 * @param m24 [2] [4] Position value.
	 * @param m31 [3] [1] Position value.
	 * @param m32 [3] [2] Position value.
	 * @param m33 [3] [3] Position value.
	 * @param m34 [3] [4] Position value.
	 * @param m41 [4] [1] Position value.
	 * @param m42 [4] [2] Position value.
	 * @param m43 [4] [3] Position value.
	 * @param m44 [4] [4] Position value.
	 */
	functiont Matrix44(m11:real, m12:real, m13:real, m14:real, m21:real, m22:real, m23:real, m24:real, m31:real, m32:real, m33:real, m34:real, m41:real, m42:real, m43:real, m44:real);

	/**
	 * Matrix settings
	 * @param m11 [1] [1] Position value.
	 * @param m12 [1] [2] Position value.
	 * @param m13 [1] [3] Position value.
	 * @param m14 [1] [4] Position value.
	 * @param m21 [2] [1] Position value.
	 * @param m22 [2] [2] Position value.
	 * @param m23 [2] [3] Position value.
	 * @param m24 [2] [4] Position value.
	 * @param m31 [3] [1] Position value.
	 * @param m32 [3] [2] Position value.
	 * @param m33 [3] [3] Position value.
	 * @param m34 [3] [4] Position value.
	 * @param m41 [4] [1] Position value.
	 * @param m42 [4] [2] Position value.
	 * @param m43 [4] [3] Position value.
	 * @param m44 [4] [4] Position value.
	 */
	function set(m11:real, m12:real, m13:real, m14:real, m21:real, m22:real, m23:real, m24:real, m31:real, m32:real, m33:real, m34:real, m41:real, m42:real, m43:real, m44:real );

	/**
	 * Matrix settings
	 * @description Copy from one-dimensional array
	 * @param array Specifies an array of 16 elements.
	 */

	function set(array:Array);

	/**
	 * Matrix settings
	 * @description Copy from matrix
	 */
	function set(matrix:Matrix44);

	/**
	 * Identity matrix
	 */
	function reset();

	/**
	 * Movement amount setting
	 * @description Set a value for the XYZ movement position of the matrix.
	 * It is only a setting and does not perform operations with the current matrix.
	 * @param x X coordinate value to set
	 * @param y Y coordinate value to set
	 * @param z Z coordinate value to set
	 */
	function setTranslate( x:real, y:real, z:real=0.0 );

	/**
	 * Magnification rate setting
	 * @description Set a value for the XYZ expansion position of the matrix.
	 * It is only a setting and does not perform operations with the current matrix.
	 * @param x X-axis magnification to set
	 * @param y Y-axis magnification to set
	 * @param z Z-axis magnification to set
	 */
	function setScale( x:real, y:real, z:real=1.0 );

	/**
	 * Rotation amount setting
	 * @description Sets the Z-axis rotation.
	 * It is only a setting and does not perform operations with the current matrix.
	 * @param degree rotation angle
	 */
	function setRotateZ( degree:real );

	/**
	 * Rotation amount setting
	 * @description It is only a setting and does not perform operations with the current matrix.
	 * Normalization recommended for rotating shaft
	 * @param degree rotation angle
	 * @param x Rotation axis X
	 * @param y Rotation axis Y
	 * @param z Rotation axis Z
	 */
	function setRotate( degree:real, x:real, y:real, z:real );

	/**
	 * Add the matrix to itself
	 * @param matrix Matrix to add
	 */
	function add( matrix:Matrix44 );

	/**
	 * Subtract the matrix from itself
	 * @param matrix Matrix to subtract
	 */
	function sub( matrix:Matrix44 );

	/**
	 * Multiply itself by the matrix
	 * @param matrix Matrix to multiply
	 */
	function mul( matrix:Matrix44 );

	/**
	 * Divide the matrix from itself
	 * @param matrix Matrix to divide
	 */
	function div( matrix:Matrix44 );

	/**
	 * Move the matrix
	 * @param x X coordinate value to move
	 * @param y Y coordinate value to move
	 * @param z Z coordinate value to move
	 */
	function translate( x:real, y:real, z:real=0.0 );

	/**
	 * Rotate the matrix
	 * @param degree rotation angle
	 * @param x Rotation axis X
	 * @param y Rotation axis Y
	 * @param z Rotation axis Z
	 */
	function rotate( degree:real, x:real, y:real, z:real );

	/**
	 * Scale the matrix
	 * @param x X-axis magnification
	 * @param y Y-axis magnification
	 * @param z Z-axis magnification
	 */
	function scale( x:real, y:real, z:real=1.0 );

	/**
	 * Set parallel projection transformation matrix
	 * @param left Left end
	 * @param right Right end
	 * @param bottom lower end
	 * @param top Top edge
	 * @param znear Full surface
	 * @param zfar back
	 */
	function ortho( left:real, right:real, bottom:real, top:real, znear:real, zfar:real );

	/**
	 * Set parallel projection transformation matrix
	 * @param left Left end
	 * @param right Right end
	 * @param bottom lower end
	 * @param top Top edge
	 */
	function ortho( left:real, right:real, bottom:real, top:real );

	/**
	 * Set perspective projection transformation matrix
	 * @param left Left end
	 * @param right Right end
	 * @param bottom lower end
	 * @param top Top edge
	 * @param znear Full surface
	 * @param zfar back
	 */
	function frustum( left:real, right:real, bottom:real, top:real, znear:real, zfar:real );

	/**
	 * Set projective transformation matrix
	 * @param fovy Viewing angle
	 * @param aspect aspect ratio
	 * @param znear Full surface
	 * @param zfar back
	 */
	function perspective( fovy:real, aspect:real, znear:real, zfar:real );

	/**
	 * Set projective transformation matrix
	 * @param fovy Viewing angle
	 * @param width width
	 * @param height height
	 * @param znear Full surface
	 * @param zfar back
	 */
	function perspectiveFov( fovy:real, width:real, height:real, znear:real, zfar:real );

	/**
	 * Coordinate transformation using various matrices
	 * @description Class method.
	 * @param model Model matrix
	 * @param proj Projection matrix
	 * @param viewport Viewport
	 * @param x X coordinate value (in / out)
	 * @param y Y coordinate value (in / out)
	 * @param z Z coordinate value (in / out)
	 */
	function project( model:Matrix44, proj:Matrix44, viewport:Rect, x:real, y:real, z:real );

	/**
	 * Receive as a one-dimensional array [r]
	 */
	property array;
	/**
	 * m11 [1] [1] Position value
	 */
	property m11;
	/**
	 * m12 [1] [2] Position value
	 */
	property m12;
	/**
	 * m13 [1] [3] Position value
	 */
	property m13;
	/**
	 * m14 [1] [4] Position value
	 */
	property m14;
	/**
	 * m21 [2] [1] Position value
	 */
	property m21;
	/**
	 * m22 [2] [2] Position value
	 */
	property m22;
	/**
	 * m23 [2] [3] Position value
	 */
	property m23;
	/**
	 * m24 [2] [4] Position value
	 */
	property m24;
	/**
	 * m31 [3] [1] Position value
	 */
	property m31;
	/**
	 * m32 [3] [2] Position value
	 */
	property m32;
	/**
	 * m33 [3] [3] Position value
	 */
	property m33;
	/**
	 * m34 [3] [4] Position value
	 */
	property m34;
	/**
	 * m41 [4] [1] Position value
	 */
	property m41;
	/**
	 * m42 [4] [2] Position value
	 */
	property m42;
	/**
	 * m43 [4] [3] Position value
	 */
	property m43;
	/**
	 * m44 [4] [4] Position value
	 */
	property m44;
};
