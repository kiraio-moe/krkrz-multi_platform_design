/**
 * @description VertexBuffer is a class that holds vertex information.
 *
 * It is used when you want to specify the position, UV coordinates, vertex color, etc. in detail.
 * It is also used when you want to perform mesh deformation instead of a simple rectangle, or when you want to use point sprites.
 *
 * Pointer access is also possible so that the plugin can change the array of vertices directly (but since OpenGL ES 3.0).
 * You can ensure the conventional layer extensibility by manipulating vertices with shader + TJS2 script + plug-in.
 * It's a bit more complicated than what was almost complete within a traditional plugin.
 */
class VertexBuffer {

	/**
	 * Create an uninitialized vertex buffer
	 * @param size Number of bytes in the buffer
	 * @param dataType Data type. dtByte / dtUByte / dtShort / dtUShort / dtInt / dtFloat
	 * @param updateType Data update frequency. utStream / utStatic / utDynamic
	 * @param isIndex Whether it is an index buffer. False for vertex buffer
	 */
	function VertexBuffer( size:int, dataType:int, updateType:int, isIndex:bool = false );

	/**
	 * Create a vertex buffer by specifying a vertex array
	 * @param data Vertex array. The buffer size is the number of elements in this array x data type size.
	 * @param dataType Data type. dtByte / dtUByte / dtShort / dtUShort / dtInt / dtFloat
	 * @param updateType Data update frequency. utStream / utStatic / utDynamic
	 * @param isIndex Whether it is an index buffer. False for vertex buffer
	 */
	function VertexBuffer( data:Array, dataType:int, updateType:int, isIndex:bool = false );

	/**
	 * Set / update vertex data
	 * @description If it is Static, it will fail (exception).
	 * @param array Vertex array
	 * @param offset Array offset index (non-byte size) to initiate the change
	 */
	function setVertex( array:Array, offset:int = 0 );

	/**
	 * Locks vertex data and returns a pointer to the data (read / write specified)
	 * @description For plugins (can only be used with OpenGL ES 3.0 or later)
	 * @return Pointer to vertex data, null when locking fails
	 */
	function lock();

	/**
	 * Unlock vertex data
	 * @description For plugins (only available with OpenGL ES 3.0 or later).
	 * When the data has been passed, call it before the buffer is used.
	 * It is preferable not to keep the lock, but to unlock it immediately after updating.
	 */
	function unlock();

	/**
	 * Buffer size (readonly)
	 */
	property size;

	/**
	 * Vertex data type (readonly)
	 */
	property dataType;

	/**
	 * Data update frequency (readonly)
	 */
	property updateType;

	/**
	 * Whether it is an index buffer (read only)
	 */
	property isIndex;

	/**
	 * Native handle
	 */
	property nativeHandle;

	/**
	 * Data type constant (byte)
	 */
	const dtByte;
	/**
	 * Data type constant (unsigned byte)
	 */
	const dtUByte;
	/**
	 * Data type constant (short)
	 */
	const dtShort;
	/**
	 * Data type constant (unsigned short)
	 */
	const dtUShort;
	/**
	 * Data type constant (int) ES3.0 or later required
	 */
	const dtInt;
	/**
	 * Data type constant (unsinged int) ES3.0 or later required
	 */
	const dtUInt;
	/**
	 * Data type constant (fixed)
	 */
	const dtFixed;
	/**
	 * Data type constant (float)
	 */
	const dtFloat;

	/**
	 * Update frequency constant: Update every frame
	 */
	const utStream;
	/**
	 * Update frequency constant: unchanged
	 */
	const utStatic;
	/**
	 * Update frequency constant: Updated frequently
	 */
	const utDynamic;

	/**
	 * Primitive type constant (point list)
	 */
	const ptPoints;
	/**
	 * Primitive type constant (line strip)
	 */
	const ptLineStrip;
	/**
	 * Primitive type constant (line loop)
	 */
	const ptLineLoop;
	/**
	 * Primitive type constant (line list)
	 */
	const ptLines;
	/**
	 * Primitive type constant (triangle strap)
	 */
	const ptTriangleStrip;
	/**
	 * Primitive type constant (triangle fan)
	 */
	const ptTriangleFan;
	/**
	 * Primitive type constant (triangle list)
	 */
	const ptTriangles;
};
