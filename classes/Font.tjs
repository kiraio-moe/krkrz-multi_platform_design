/**
 * @description The Font class is a class for managing fonts.
 */
class Font {
	/**
	 * constructor
	 * @description Layer member font is a special version that passes Layer as an argument.
	 * When using alone, generate without arguments.
	 */
	function Font();

	/**
	 * Get the width of the string
	 *
	 * @param text Specify the character string for which you want to obtain the width.
	 * @return Returns the width of the specified string in pixels
	 * @description This method allows you to get the width you need when drawing the specified string with the current font settings.
	 * @see Font.getTextHeight
	 */
	function getTextWidth( text);

	/**
	 * Get the height of the string
	 *
	 * @param text Specify the character string for which you want to obtain the vertical width.
	 * @return Returns the vertical width of the specified string in pixels
	 * @description With this method, you can get the required height when drawing the specified string with this font.
	 * @see Font.getTextWidth
	 */
	function getTextHeight( text);

	/**
	 * Amount of movement of the X coordinate in the horizontal direction of the character
	 *
	 * @param text Specify the character string for which you want to obtain the amount of movement of the X coordinate in the horizontal direction of the character.
	 * @return Returns the amount of horizontal movement of the X coordinate of the character in pixels
	 * @description You can get the amount of movement of the character drawing position required when drawing the character specified by the current font setting.
	 * With this method, you can get the amount of movement on the X coordinate when moving horizontally (left) with respect to the drawing direction of the character.
	 * @see Font.getEscWidthY
	 * @see Font.getEscHeightX
	 * @see Font.getEscHeightY
	 */
	function getEscWidthX( text);

	/**
	 * Amount of movement of the Y coordinate in the horizontal direction of the character
	 *
	 * @param text Specify the character string for which you want to obtain the amount of movement of the Y coordinate in the horizontal direction of the character.
	 * @return Returns the amount of movement of the Y coordinate in the horizontal direction of the character in pixels.
	 * @description You can get the amount of movement of the character drawing position required when drawing the character specified by the current font setting.
	 * With this method, you can get the amount of movement on the Y coordinate when moving horizontally (left) with respect to the drawing direction of the character.
	 * @see Font.getEscWidthX
	 * @see Font.getEscHeightX
	 * @see Font.getEscHeightY
	 */
	function getEscWidthY( text);

	/**
	 * Amount of movement of the X coordinate in the vertical direction of the character
	 *
	 * @param text Specify the character string for which you want to obtain the amount of movement of the X coordinate in the vertical direction of the character.
	 * @return Returns the amount of vertical X-coordinate movement of a character in pixels
	 * @description You can get the amount of movement of the character drawing position required when drawing the character specified by the current font setting.
	 * With this method, you can get the amount of movement on the X coordinate when moving vertically (down) with respect to the drawing direction of the character.
	 * @see Font.getEscWidthX
	 * @see Font.getEscWidthY
	 * @see Font.getEscHeightY
	 */
	function getEscHeightX( text);

	/**
	 * Amount of movement of the Y coordinate in the vertical direction of the character
	 *
	 * @param text Specify the character string for which you want to obtain the amount of movement of the Y coordinate in the vertical direction of the character.
	 * @return Returns the amount of vertical Y-coordinate movement of a character in pixels
	 * @description You can get the amount of movement of the character drawing position required when drawing the character specified by the current font setting.
	 * With this method, you can get the amount of movement on the Y coordinate when moving vertically (down) with respect to the drawing direction of the character.
	 * @see Font.getEscWidthX
	 * @see Font.getEscWidthY
	 * @see Font.getEscHeightX
	 */
	function getEscHeightY( text);

	/**
	 * Actual drawing range of the character string
	 *
	 * @param text Specify the character string for which you want to get the range.
	 * @return Actual drawing range of the character string
	 * @description You can get the range where the glyph image is drawn when you draw the characters specified by the current font settings.
	 * The resulting range is an object of the Rect class relative to the 0,0 coordinates.
	 * Only landscape orientation is supported.
	 * @see Rect
	 */
	function getGlyphDrawRect( text);

	/**
	 * Font name enumeration
	 *
	 * @param flags Specifies how to enumerate the fonts.
	 * Specify the combination of the following values by bitwise OR.
	 *
	 * + fsfFixedPitch     :  List only fixed pitch fonts
	 * + fsfSameCharSet    :  List only fonts of the same character set
	 * + fsfNoVertical     :  Do not enumerate fonts for vertical writing
	 * + fsfTrueTypeOnly   :  Enumerate only TrueType fonts
	 * + fsfIgnoreSymbol   :  Exclude symbol character sets
	 * + If fsfSameCharSet is specified, fonts with the same character set as the currently selected font will be listed.
	 *
	 * @return An array in which the font name (character string) is stored as each element
	 * @description Enumerates font names and returns them as an array.
	 * .
	 */
	function getList( flags);

	/**
	 * Rendered font assignment
	 *
	 * @param fontstorage Specifies rendered font storage.
	 * @description Assigns a rendered font to the currently selected font name.
	 * From now on, the specified rendered font will be used instead for fonts with the same settings.
	 * The setting is valid for all layers.
	 * @see Font.unmapPrerenderedFont
	 */
	function mapPrerenderedFont( fontstorage);

	/**
	 * Unassign rendered fonts
	 *
	 * @description Deassigns the rendered font to the currently selected font name.
	 * @see Font.mapPrerenderedFont
	 */
	function unmapPrerenderedFont( );

	/**
	 * Add fonts to the font system.
	 * @param storage Font file name
	 * @return Returns an array of face names contained in the file.
	 */
	function addFont( storage ) : Array;

	/**
	 * Font name
	 *
	 * @description Represents a font name.
	 * You can also set the value.
	 * You can specify multiple candidates separated by commas.
	 * In this case, the font that actually exists is used, and the one written at the beginning has priority.
	 * Whether or not the font actually exists is determined by referring to the list of fonts in the OS.
	 * If none of the candidates match, the default font will be used (the system standard font in the current version).
	 * In FreeType rasterizer, if multiple candidates are specified, it will be treated as a fallback font, glyphs will be searched in order from the front, and the found glyph will be rendered.
	 * If the font file exists as a separate file such as for each language or pictogram, use this fallback font mechanism.
	 * If you start with a comma and write the font name immediately after it, the OS will try to specify the font without actually enumerating it (for example, ", My Original Font").
	 * This makes it possible to use non-enumable fonts registered with the AddFontResource Win32 API.
	 */
	 property face {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Font height
	 *
	 * @description Represents the height of the drawn characters in pixels.
	 * You can also set the value.
	 */
	 property height {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * bold
	 *
	 * @description Indicates whether it is bold.
	 * You can also set the value.
	 * If you specify true, it will be bold.
	 */
	 property bold {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * italic
	 *
	 * @description Indicates whether it is italic.
	 * You can also set the value.
	 * Specifying true makes it italic.
	 */
	 property italic {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Cancellation line
	 *
	 * @description Indicates whether to draw a strikethrough.
	 * You can also set the value.
	 * If true is specified, a strikethrough will be drawn above the character.
	 */
	 property strikeout {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Underline
	 *
	 * @description Indicates whether to draw an underline (underline or sideline).
	 * You can also set the value.
	 * If true is specified, the underline will be drawn.
	 */
	 property underline {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Character drawing angle
	 *
	 * @description Indicates the character drawing angle.
	 * You can also set the value.
	 * The unit is 10 times the angle (degree). It takes a value between 0 and 3600.
	 * For vertical writing, specify the font name for vertical writing in the font name, and then specify 2700 for this property.
	 */
	 property angle {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Character string drawing method
	 *
	 * @description Indicates the character string drawing method.
	 * You can also set the value.
	 * Specify one of the following values (always FreeType except on Windows).
	 *
	 * + frGDI       :  Draw characters using GDI (Windows version only)
	 * + frFreeType  :  Draw characters using FreeType
	 *
	 * If FreeType is specified, only horizontal writing is supported.
	 * Others are not supported.
	 * This property is static.
	 * Use Font.rasterizer to set the value.
	 * From the multi-platform version, the default is FreeType.
	 */
	 property rasterizer {
		 getter() { return value; }
		 setter( value ) {}
	}
};
