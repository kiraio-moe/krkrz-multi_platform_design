/**
 * @description The Window class is a class for managing windows.
 * Window size control is only possible on Windows.
 * On Android it depends on the screen size.
 * Generate the Offscreen class in the size you want to render and do the normal drawing there.
 * Enlargement according to the window (screen) size is controlled by a script.
 * It is also possible to display the UI and characters neatly at the same size with a script.
 *
 * Events that Android does not support will not occur on Android.
 */
class Window {
	/**
	 * Building a Window object
	 *
	 * @param parent Specifies the parent window.
	 * If you specify a parent window, it will be spawned as its child window.
	 * If not specified, omit it.
	 * This parameter cannot be used because Android can only generate one window.
	 * @description Build an object of the Window class.
	 * The window is created in a hidden state, and its position and size are undefined (appropriate size for some position).
	 * Only one can be generated on Android, it will be full screen operation, and even if you set the position and size, it will be ignored.
	 */
	function Window( parent);

	/**
	 * [Windows *] Mouse came in
	 *
	 * @description Occurs when the mouse enters the window's client area.
	 * @see Window.onMouseLeave
	 */
	event onMouseEnter();

	/**
	 * [Windows *] The mouse came out
	 *
	 * @description Occurs when the mouse exits the window's client area.
	 * @see Window.onMouseEnter
	 */
	event onMouseLeave();

	/**
	 * [Windows *] The window was clicked
	 *
	 * @param x The x-coordinate (in client coordinates) value of where the window was clicked.
	 * @param y The y-coordinate (in client coordinates) value of where the window was clicked.
	 * @description Occurs when the window is clicked.
	 * @see Window.onMouseDown
	 * @see Window.onDoubleClick
	 */
	event onClick( x, y );

	/**
	 * [Windows *] The window was double-clicked
	 *
	 * @param x The x-coordinate (in client coordinates) value of where the window was double-clicked.
	 * @param y The y-coordinate (in client coordinates) value of where the window was double-clicked.
	 * @description Occurs when the window is double-clicked.
	 * @see Window.onClick
	 */
	event onDoubleClick( x, y );

	/**
	 * [Windows *] Mouse button pressed
	 *
	 * @param x The x-coordinate (in client coordinates) value of where the mouse button was pressed.
	 * @param y The y-coordinate (in client coordinates) value of where the mouse button was pressed.
	 * @param button The pressed mouse button.
	 * It can be one of the following values:
	 *
	 * + mbLeft    : The left mouse button was pressed
	 * + mbMiddle  : The middle mouse button was pressed
	 * + mbRight   : Right mouse button pressed
	 * + mbX1      : Mouse side key 1st button pressed
	 * + mbX2      : Mouse side key 2nd button pressed
	 *
	 * @param shift This is the state of the shift key that was pressed at the same time when the mouse button was pressed.
	 * It is a combination of the following values by bit OR.
	 *
	 * + ssAlt     : The ALT key was pressed
	 * + ssShift   : The SHIFT key was pressed
	 * + ssCtrl    : CTRL key was pressed
	 *
	 * @description Occurs when the mouse button is pressed.
	 * @see Window.onClick
	 */
	event onMouseDown( x, y, button, shift );

	/**
	 * [Windows *] Mouse button released
	 *
	 * @param x The x-coordinate (in client coordinates) value of where the mouse button was released.
	 * @param y The y-coordinate (in client coordinates) value of where the mouse button was released.
	 * @param button The released mouse button.
	 * It can be one of the following values:
	 *
	 * + mbLeft    : Left mouse button released
	 * + mbMiddle  : The middle mouse button was released
	 * + mbRight   : The right mouse button was released
	 * + mbX1      : Mouse side key 1st button released
	 * + mbX2      : Mouse side key 2nd button released
	 *
	 * @param shift This is the state of the shift key that was pressed at the same time when the mouse button was released.
	 * It is a combination of the following values by bit OR.
	 *
	 * + ssAlt     : The ALT key was pressed
	 * + ssShift   : The SHIFT key was pressed
	 * + ssCtrl    : CTRL key was pressed
	 *
	 * @description Occurs when the mouse button is released.
	 */
	event onMouseUp( x, y, button, shift );

	/**
	 * [Windows *] Mouse moved
	 *
	 * @param x The x-coordinate (in client coordinates) value of where the mouse was moved.
	 * @param y The y-coordinate (in client coordinates) value of where the mouse was moved.
	 * @param shift This is the state of shift keys and mouse buttons that were pressed at the same time when the mouse was moving.
	 * It is a combination of the following values by bit OR.
	 *
	 * + ssAlt     : The ALT key was pressed
	 * + ssShift   : The SHIFT key was pressed
	 * + ssCtrl    : CTRL key was pressed
	 * + ssLeft    : The left mouse button was pressed
	 * + ssMiddle  : The middle mouse button was pressed
	 * + ssRight   : The right mouse button was pressed
	 *
	 * @description Occurs when the mouse moves.
	 */
	event onMouseMove( x, y, shift);

	/**
	 * [Windows *] Mouse wheel rotated
	 *
	 * @param shift This is the state of shift keys and mouse buttons that were pressed at the same time when the mouse was moving.
	 * It is a combination of the following values by bit OR.
	 *
	 * + ssAlt     : The ALT key was pressed
	 * + ssShift   : The SHIFT key was pressed
	 * + ssCtrl    : CTRL key was pressed
	 * + ssLeft    : The left mouse button was pressed
	 * + ssMiddle  : The middle mouse button was pressed
	 * + ssRight   : The right mouse button was pressed
	 *
	 * @param delta The angle of rotation of the wheel.
	 * If it is turned upward (the direction opposite to the user), it will be a positive value, and if it is turned downward (the direction toward the user), it will be a negative value.
	 * The minimum amount is typically 120.
	 * @param x The x-coordinate (in client coordinates) value of where the wheel was rotated.
	 * @param y The y-coordinate (in client coordinates) value of where the wheel was rotated.
	 * @description Occurs when the mouse wheel rotates.
	 */
	event onMouseWheel( shift, delta, x, y);

	/**
	 * The screen was touched
	 *
	 * @param x The x-coordinate (in client coordinates) value of the touched position.
	 * @param y The y-coordinate (in client coordinates) value of the touched position.
	 * @param cx The number of horizontal pixels that the finger is in contact with.
	 * Always 1 if the device does not support it.
	 * @param cy The number of vertical pixels that the finger is in contact with.
	 * Always 1 if the device does not support it.
	 * @param id Touch ID.
	 * At the time of multi-touch, a unique value is set for each position, and the position can be identified by this ID.
	 * @description Occurs when the touch panel is touched.
	 */
	event onTouchDown( x, y, cx, cy, id);

	/**
	 * Your finger was released from the screen
	 *
	 * @param x The x-coordinate (in client coordinates) value of the separated position.
	 * @param y The y-coordinate (in client coordinates) value of the separated position.
	 * @param cx The number of horizontal pixels that the finger is in contact with.
	 * Always 1 if the device does not support it.
	 * @param cy The number of vertical pixels that the finger is in contact with.
	 * Always 1 if the device does not support it.
	 * @param id Touch ID.
	 * At the time of multi-touch, a unique value is set for each position, and the position can be identified by this ID.
	 * @description Occurs when the finger is released from the touch panel.
	 */
	event onTouchUp( x, y, cx, cy, id);

	/**
	 * The finger has moved
	 *
	 * @param x The x-coordinate (in client coordinates) value of the touch position.
	 * @param y The y-coordinate (in client coordinates) value of the touch position.
	 * @param cx The number of horizontal pixels that the finger is in contact with.
	 * Always 1 if the device does not support it.
	 * @param cy The number of vertical pixels that the finger is in contact with.
	 * Always 1 if the device does not support it.
	 * @param id Touch ID.
	 * At the time of multi-touch, a unique value is set for each position, and the position can be identified by this ID.
	 * @description It occurs when the finger touching on the touch panel moves.
	 */
	event onTouchMove( x, y, cx, cy, id);

	/**
	 * Enlarged operation
	 *
	 * @param startdistance The pixel distance when multi-touch is started.
	 * @param currentdistance The pixel distance of the touch when the event occurs.
	 * @param cx The x-coordinate (in client coordinates) value of the center position.
	 * @param cy The y-coordinate (in client coordinates) value of the center position.
	 * @param flag Multi-touch status flag.
	 * 0x01: Set to the first event when multitouch is started.
	 * @description It occurs when the enlargement operation is performed by multi-touch on the touch panel.
	 */
	event onTouchScaling( startdistance, currentdistance, cx, cy, flag);

	/**
	 * Rotated
	 *
	 * @param startangle The radian angle when multi-touch is started.
	 * @param currentangle The radian angle of the touch when an event occurs.
	 * @param distance The pixel distance of the touch when the event occurs.
	 * @param cx The x-coordinate (in client coordinates) value of the center position.
	 * @param cy The y-coordinate (in client coordinates) value of the center position.
	 * @param flag Multi-touch status flag.
	 * 0x01: Set to the first event when multitouch is started.
	 * @description Occurs when rotating on the touch panel by multi-touch.
	 */
	event onTouchRotate( startangle, currentangle, distance, cx, cy, flag);

	/**
	 * Multi-touch state changed
	 *
	 * @description Occurs when the multi-touch state starts, moves, or moves away.
	 * Coordinate information can be obtained with the Window.touchPointCount property and the Window.getTouchPoint method.
	 * @see Window.getTouchPoint
	 * @see Window.touchPointCount
	 */
	event onMultiTouch();

	/**
	 * Pressed by some pointing device
	 *
	 * @param type Touch or mouse button type
	 * @param x X position
	 * @param y Y position
	 * @param cx Contact width (number of pixels), 1 for mouse
	 * @param cy Contact height (number of pixels), 1 for mouse
	 * @param shift Modifier key state, 0 when touched
	 * @param id Touch ID, always 0 when using mouse
	 */
	event onPointerDown( type, x, y, cx, cy, shift, id );

	/**
	 * Some pointing device has been moved
	 *
	 * @param type Touch or mouse. Notify as a mouse, not as a mouse button type.
	 * @param x X position
	 * @param y Y position
	 * @param cx Contact width (number of pixels), 1 for mouse
	 * @param cy Contact height (number of pixels), 1 for mouse
	 * @param shift Modifier key state (including mouse press state), 0 when touching
	 * @param id Touch ID, always 0 when using mouse
	 */
	event onPointerMove( type, x, y, cx, cy, shift, id );

	/**
	 * Some pointing device has been released
	 *
	 * @param type Touch or mouse button type
	 * @param x X position
	 * @param y Y position
	 * @param cx Contact width (number of pixels), 1 for mouse
	 * @param cy Contact height (number of pixels), 1 for mouse
	 * @param shift Modifier key state, 0 when touched
	 * @param id Touch ID, always 0 when using mouse
	 */
	event onPointerUp( type, x, y, cx, cy, shift, id );


	/**
	 * The key was pressed
	 *
	 * @param key The value of the virtual key code of the pressed key.
	 * @param shift This is the state of shift-type keys and mouse buttons that were pressed at the same time when the keys were pressed.
	 * It is a combination of the following values by bit OR.
	 *
	 * + ssAlt     : The ALT key was pressed
	 * + ssShift   : The SHIFT key was pressed
	 * + ssCtrl    : CTRL key was pressed
	 * + ssLeft    : The left mouse button was pressed
	 * + ssMiddle  : The middle mouse button was pressed
	 * + ssRight   : The right mouse button was pressed
	 *
	 * Also, if the keyboard is pressed for a long time and key repeat occurs, the following values are also combined.
	 *
	 * + ssRepeat  : Key repeat occurred
	 *
	 * @description Occurs when a key is pressed.
	 */
	event onKeyDown( key, shift);

	/**
	 * The key was released
	 *
	 * @param key The value of the virtual key code for the released key.
	 * @param shift This is the state of shift keys and mouse buttons that were pressed at the same time when the keys were released.
	 * It is a combination of the following values by bit OR.
	 *
	 * + ssAlt     : The ALT key was pressed
	 * + ssShift   : The SHIFT key was pressed
	 * + ssCtrl    : CTRL key was pressed
	 * + ssLeft    : The left mouse button was pressed
	 * + ssMiddle  : The middle mouse button was pressed
	 * + ssRight   : The right mouse button was pressed
	 *
	 * @description Occurs when the key is released.
	 */
	event onKeyUp( key, shift);

	/**
	 * [Windows *] characters have been entered
	 *
	 * @param key The entered character.
	 * @description Occurs when characters are entered.
	 * Unlike Window.onKeyDown, onKeyDown handles virtual keycodes, whereas this event handles the characters themselves.
	 * This event does not occur if the key pressed is a key that has nothing to do with the character (such as a function key).
	 * If pressed at the same time as the Ctrl key, the control code shown below will be sent.
	 *
	 * + 0x00 : Ctrl + @
	 * + 0x01 : Ctrl + A
	 * + 0x02 : Ctrl + B
	 * + 0x03 : Ctrl + C
	 * + 0x04 : Ctrl + D
	 * + 0x05 : Ctrl + E
	 * + 0x06 : Ctrl + F
	 * + 0x07 : Ctrl + G
	 * + 0x08 : Ctrl + H
	 * + 0x09 : Ctrl + I
	 * + 0x0A : Ctrl + J
	 * + 0x0B : Ctrl + K
	 * + 0x0C : Ctrl + L
	 * + 0x0D : Ctrl + M
	 * + 0x0E : Ctrl + N
	 * + 0x0F : Ctrl + O
	 * + 0x10 : Ctrl + P
	 * + 0x11 : Ctrl + Q
	 * + 0x12 : Ctrl + R
	 * + 0x13 : Ctrl + S
	 * + 0x14 : Ctrl + T
	 * + 0x15 : Ctrl + U
	 * + 0x16 : Ctrl + V
	 * + 0x17 : Ctrl + W
	 * + 0x18 : Ctrl + X
	 * + 0x19 : Ctrl + Y
	 * + 0x1A : Ctrl + Z
	 * + 0x1B : Ctrl + [
	 * + 0x1C : Ctrl + \
	 * + 0x1D : Ctrl +]
	 * + 0x1E : Ctrl + ^
	 * + 0x1F : Ctrl + _
	 */
	event onKeyPress( key );

	/**
	 * [Windows *] The size of the window has changed
	 *
	 * @description Occurs when the size of the window changes.
	 * Get the actual size with the Window.width property, Window.height property, etc.
	 */
	event onResize( );

	/**
	 * [Windows *] file dropped
	 *
	 * @param files An Array object that contains the dropped file names.
	 * @description Occurs when a file is dropped into a window from Explorer etc.
	 * An array object is passed as an argument even if a single file is dropped (the first element will be that file).
	 */
	event onFileDrop( files);

	/**
	 * [Windows *] Confirmation to close the window
	 *
	 * @param canclose You will be passed if you can close the window.
	 * In the course where the event handler of the upper class is called from the lower class, "Can the window be closed?" Determined by the lower class is passed.
	 * @description This is an event to check if the window can be closed.
	 * If you cannot close the window, pass false as an argument to the same method in the upper class.
	 * For Android, you need to quit yourself with the back key on the title screen (handle onKeyXXX yourself).
	 * When the system stops it, it can't be stopped and it may be stopped suddenly.
	 * No questions asked when you are finished from the task list.
	 * On Android, the only countermeasure against sudden termination is to auto-save when onDeactivate comes.
	 */
	event onCloseQuery( canclose);

	/**
	 * [Windows *] Close the pop-up window
	 *
	 * @description An event that occurs when a popup window should be closed.
	 * This event is fired when "another window is clicked" or "another application is activated" if the Window.stayOnTop property is true and the Window.focusable property is false.
	 * Normally, you should close or hide the window here.
	 * @see Window.focusable
	 * @see Window.stayOnTop
	 */
	event onPopupHide( );

	/**
	 * When the window becomes active
	 *
	 * @description Represents an event function that is called when the window is activated.
	 * Note that this event can also occur if the window is already active (there is no guarantee that it will occur completely onActivate → onDeactivate → onActivate → ……).
	 * @see Window.onDeactivate
	 * @see System.onActivate
	 * @see System.onDeactivate
	 */
	event onActivate( );

	/**
	 * When the window becomes inactive
	 *
	 * @description Represents an event function that is called when the window becomes inactive.
	 * Note that this event can also occur if the window is already inactive (there is no guarantee that it will occur completely onActivate → onDeactivate → onActivate → ……).
	 * Please note that on Android, after being inactive, the process may be terminated without returning.
	 * @see Window.onActivate
	 * @see System.onActivate
	 * @see System.onDeactivate
	 */
	event onDeactivate( );

	/**
	 * [Windows *] When the state of the hint changes
	 *
	 * @param text The string to be displayed in the hint is passed.
	 * @param x Tip Display X-axis coordinate values are passed.
	 * @param y Tip Display Y-axis coordinate values are passed.
	 * @param isshow You will be passed whether to show or hide the hint.
	 * @description Represents an event function that is called when the state of the hint changes.
	 * The hint is displayed according to the display / non-display.
	 * If you want the hint to appear on a layer, set Layer.hitThreshold to 256 so that mouse messages for that layer are ignored.
	 * Layer.ignoreHintSensing also specifies true.
	 * @see Window.hintDelay
	 * @see Layer.ignoreHintSensing
	 * @see Layer.hitThreshold
	 */
	event onHintChanged( text, x, y, isshow);

	/**
	 * When the screen is rotated
	 *
	 * @param orientation The orientation of the screen. It can be one of the following values: oriUnknown (acquisition failure / unknown), oriPortrait (portrait), oriLandscape (landscape)
	 * @param angle The angle. The angle is 0, 90, 180, 270, or -1, and if it cannot be obtained, it will be -1.
	 * The angle is the rotation angle from the device default, so it will be 0 in portrait orientation for portrait devices.
	 * On a normal device, it seems that there are many 0s in landscape orientation.
	 * The portrait orientation is 0 for recent 8-inch tablets, etc., and the portrait orientation is the standard orientation.
	 * Android always returns -1.
	 * If necessary, get it separately with Windows.displayRotate.
	 * @param bpp  bits per pixel. On Android, the dpi value is returned.
	 * @param width The width of the screen.
	 * Android always returns 0.
	 * Obtain it separately if necessary.
	 * @param height The height of the screen.
	 * Android always returns 0.
	 * Obtain it separately if necessary.
	 * @description Represents an event function that is called when the screen is rotated.
	 * @see Window.displayOrientation
	 * @see Window.displayRotate
	 */
	event onDisplayRotate( orientation, angle, bpp, width, height);

	/**
	 * Screen update callback event
	 *
	 * @description Called during screen update processing
	 * Performs its own drawing process during this call
	 * Do not call this method directly.
	 */
	event onDraw();

	/**
	 * close the window
	 *
	 * @description Closes the window displayed by the Window.showModal method.
	 * You can check if the window can be closed by raising the Window.onCloseQuery event before closing the window.
	 * On Android, the Window.onCloseQuery event does not fire and Activity.finish () is called to exit.
	 * @see Window.showModal
	 * @see Window.onCloseQuery
	 */
	function close();

	/**
	 * [Windows *] Bring the window to the front
	 *
	 * @description Brings the window to the front.
	 * If the application is inactive, it also activates the application itself.
	 */
	function bringToFront( );

	/**
	 * [Windows *] Forced drawing of window contents
	 *
	 * @param type Specifies the type of window drawing.
	 *
	 * + When tutNormal is specified, normal drawing (difference drawing),
	 * + If tutEntire is specified, the entire window contents will be drawn.
	 *
	 * @description The argument is ignored in the current version.
	 * tutNormal and tutEntire are not implemented.
	 */
	function update( type=tutNormal);

	/**
	 * [Windows +] Modal window display
	 *
	 * @description Display the window modally (with mode).
	 * This method keeps windows visible and temporarily disables other windows.
	 * Therefore, the user can only access this window (this is called the moded state).
	 * When the window is closed, the moded state is canceled.
	 * The window must be hidden when you call this method.
	 */
	function showModal( );

	/**
	 * Set Windows + window region according to mask
	 *
	 * @param threshold Specifies the mask threshold (threshold value).
	 * The window is cropped and displayed in the shape of the mask of the primary layer (layer opacity information) that is larger than this value.
	 * @description Set the window region according to the mask of the primary layer (layer opacity information).
	 * You can make the window irregular.
	 * To prevent the window size and position from shifting from the displayed primary layer, you need to do the following.
	 * Set Window.borderStyle to bsNone.
	 * Set Layer.imageLeft and Layer.imageTop to 0.
	 * @see Window.removeMaskRegion
	 */
	function setMaskRegion( threshold=1);

	/**
	 * [Windows +] Unlock window region
	 *
	 * @description Cancels the window region set by Window.setMaskRegion and returns the window to a rectangle.
	 * @see Window.setMaskRegion
	 */
	function removeMaskRegion( );

	/**
	 * Add managed object
	 *
	 * @param object Specifies the objects to be managed.
	 * @description Add a managed object.
	 * The object specified here will be automatically disabled when the window is disabled.
	 * @see Window.remove
	 */
	function add( object);

	/**
	 * Delete managed object
	 *
	 * @param object Specifies the object to remove from the list of managed objects.
	 * @description Removes the specified object from the list of managed objects.
	 * @see Window.add
	 */
	function remove( object);

	/**
	 * [Windows *] Window size setting
	 *
	 * @param width Specifies the width of the window.
	 * @param height Specifies the vertical width of the window.
	 * @description Specifies the size of the window.
	 * When specifying the size of a window, it is more efficient to specify it all at once with this method rather than setting the Window.width and Window.height properties individually.
	 * @see Window.width
	 * @see Window.height
	 * @see Window.setPos
	 * @see Window.setInnerSize
	 * @see Window.setMinSize
	 * @see Window.setMaxSize
	 */
	function setSize( width, height);

	/**
	 * [Windows *] Setting the minimum size of the window
	 *
	 * @param width Specifies the minimum width of the window.
	 * If you specify 0, there is no limit.
	 * @param height Specifies the minimum vertical width of the window.
	 * If you specify 0, there is no limit.
	 * @description Specifies the minimum window size.
	 * The window cannot be smaller than the size specified by this method.
	 * .
	 * @see Window.setMaxSize
	 * @see Window.setSize
	 * @see Window.minWidth
	 * @see Window.minHeight
	 */
	function setMinSize( width, height);

	/**
	 * [Windows *] Setting the maximum size of the window
	 *
	 * @param width Specifies the maximum width of the window.
	 * If you specify 0, there is no limit.
	 * @param height Specifies the maximum height of the window.
	 * If you specify 0, there is no limit.
	 * @description Specifies the maximum window size.
	 * The window cannot be larger than the size specified by this method.
	 * 	
	 * @see Window.setMixSize
	 * @see Window.setSize
	 * @see Window.maxWidth
	 * @see Window.maxHeight
	 */
	function setMaxSize( width, height);

	/**
	 * [Windows *] Window position setting
	 *
	 * @param left Specifies the position of the left edge of the window.
	 * @param top Specifies the top position of the window.
	 * @description Specifies the position of the window.
	 * When specifying the position of a window, it is more efficient to specify it all at once with this method rather than setting the Window.left and Window.top properties individually.
	 * @see Window.left
	 * @see Window.top
	 * @see Window.setSize
	 */
	function setPos( left, top);

	/**
	 * [Windows *] Client size setting
	 *
	 * @param width Specifies the width of the client.
	 * @param height Specifies the vertical width of the client.
	 * @description Specifies the client size of the window.
	 * The client is the area in the window where the layer can be displayed.
	 * Setting this size will change the size of the window accordingly.
	 * When specifying the size of the client, it is more efficient to specify it all at once with this method rather than setting the Window.innerWidth and Window.innerHeight properties individually.
	 * @see Window.innerWidth
	 * @see Window.innerHeight
	 */
	function setInnerSize( width, height);

	/**
	 * [Windows *] Layer magnification setting
	 *
	 * @param numer Specify the numerator of magnification as an integer.
	 * @param denom Specify the denominator of the magnification as an integer.
	 * @description Specifies the magnification of the layer.
	 * The image is enlarged or reduced to the size specified by the numerator / denominator.
	 * If the numerator / denominator has a common divisor, it is automatically reduced, so the value read by the Window.zoomNumer property or Window.zoomDenom property may differ from the value specified by this method.
	 * In the current version of Kirikiri, whether or not interpolation is applied when enlarging / reducing depends on the hardware and driver of the graphic card.
	 * If the hardware or driver does not require interpolation, the image quality will be poor.
	 * Depending on the option, KiriKiri investigates the hardware that can be used for enlargement / reduction every time the magnification is changed, so this method is suitable for applications where the enlargement ratio is continuously changed for production. Is not ...
	 * Has no meaning when drawing the Canvas
	 * @see Window.zoomNumer
	 * @see Window.zoomDenom
	 */
	function setZoom( numer, denom);

	/**
	 * Generate input event
	 *
	 * @param eventname Specify the event name.
	 * Specify with the following character string.
	 * 
	 * + "onKeyDown" will generate a Window.onKeyDown event.
	 * + "onKeyPress" will generate a Window.onKeyPress event.
	 * + "onKeyUp" will generate a Window.onKeyUp event.
	 *
	 * Since onKeyDown and onKeyUp are paired, it is recommended to generate the corresponding onKeyUp when onKeyDown is generated.
	 * @param params Specifies a dictionary array that contains event parameters.
	 * In the "onKeyDown" and "onKeyUp" events, the virtual key code is stored in "key" and the shift state is stored in "shift".
	 * If "shift" is omitted, it is considered to be 0.
	 * In the "onKeyPress" event, specify a character for "key".
	 * @description Generates an input event.
	 * The current version can generate three keystroke events.
	 * This method generates the event as an asynchronous event.
	 * That is, this method returns without waiting for the corresponding event handler to finish.
	 * The event handler is actually called and processed only after control is returned to Kirikiri.
	 * In addition to the Window class, the input event also occurs as the corresponding event of the Layer class, just like a normal input event.
	 * Example:
	 *
	 * ```
	 * postInputEvent ('onKeyDown',% [key: VK_UP, shift: ssShift]);
	 * postInputEvent ('onKeyUp',% [key: VK_UP, shift: ssShift]);
	 * // Press the left cursor key
	 * ```
	 *
	 */
	function postInputEvent( eventname, params=null);

	/**
	 * [Windows *] Temporarily hide the mouse cursor
	 *
	 * @description Temporarily hides the mouse cursor.
	 * If you move the mouse even a little, the mouse cursor will reappear.
	 * This method has the same effect as setting Window.mouseCursorState to mcsTempHidden.
	 */
	function hideMouseCursor( );

	/**
	 * [Windows +] Register / delete message reception function
	 *
	 * @param mode Specify whether to register or unregister.
	 * If you specify wrmRegister, it will be registered.
	 * If wrmUnregister is specified, the registration will be deleted.
	 * Constants starting with wrm are defined in tp_stub.h.
	 * @param func Specifies the message receiving function.
	 * The message receiving function must be in the form bool __stdcall func (void * userdata, tTVPWindowMessage * Message), and the function pointer must be cast to an integer when passed to this method.
	 * The structure tTVPWindowMessage is defined in tp_stub.h.
	 * If this function returns true, Kirikiri itself will not be aware of the window message.
	 * @param userdata Specifies the data pointer to pass to the userdata argument of the receiving function specified by the func argument.
	 * When passing to this method, the pointer must be cast to an integer type.
	 * This argument is ignored if the mode argument is not his wrmRegister.
	 * @description This method is supposed to be used by plugins written in C ++ etc.
	 * It cannot be used normally from TJS2.
	 * This method allows you to register a message receiving function to trap messages that pass through this window.
	 * In addition to normal window messages, the message receiving function can also trap two important messages, TVP_WM_DETACH and TVP_WM_ATTACH, which can be used to remove child windows when the window is rebuilt or destroyed. ..
	 * His src / plugins / win32 / wmrdump in the Kirikiri source distribution package has a brief usage description.
	 * @see Window.HWND
	 */
	function registerMessageReceiver( mode, func, userdata);

	/**
	 * Get touch coordinates
	 *
	 * @param index Specifies the index of the touch coordinate array.
	 * @description Gets the coordinate information of the specified index from the current touch coordinate array.
	 * The number of coordinates can be obtained with the Window.touchPointCount property.
	 * Coordinate information is returned in a dictionary that contains the following elements:
	 *
	 * + startX     : The x coordinate value (client coordinate system) of the start coordinate of this touch
	 * + startY   : The y coordinate value (client coordinate system) of the start coordinate of this touch
	 * + x    : The x coordinate value (client coordinate system) of the current coordinate of this touch
	 * + y    : The y coordinate value (client coordinate system) of the current coordinate of this touch
	 * + ID    : The ID for identifying this touch
	 *
	 * @see Window.touchPointCount
	 */
	function getTouchPoint( index);

	/**
	 * [Windows *] Get mouse coordinate movement speed
	 *
	 * @param x Returns the mouse coordinate movement speed in the X-axis direction.
	 * @param y Returns the mouse coordinate movement speed in the Y-axis direction.
	 * @param speed The mouse coordinate movement speed is returned.
	 * @return Returns whether the acquisition was successful or unsuccessful
	 * @description Get the current mouse movement speed in pixel / sec.
	 * Measurement starts from the moment you enter the window.
	 * You can use Window.resetMouseVelocity to reset the measurement so that you can get the measurement at any time.
	 * @see Window.getTouchVelocity
	 * @see Window.resetMouseVelocity
	 */
	function getMouseVelocity( x, y, speed);

	/**
	 * Get touch coordinate movement speed
	 *
	 * @param id Specify Touch ID.
	 * @param x Returns the mouse coordinate movement speed in the X-axis direction.
	 * @param y Returns the mouse coordinate movement speed in the Y-axis direction.
	 * @param speed The mouse coordinate movement speed is returned.
	 * @return Returns whether the acquisition was successful or unsuccessful
	 * @description Get the current touch movement speed in pixel / sec.
	 * It is measured from the time it is pressed until it is released.
	 * Since it supports multi-touch, the speed is measured for each ID.
	 * Note that the measured speed information disappears when the method call of the Window.onTouchUp event ends.
	 * @see Window.getMouseVelocity
	 */
	function getTouchVelocity( id, x, y, speed);

	/**
	 * [Windows *] Reset mouse coordinate movement speed measurement
	 *
	 * @description Resets the mouse coordinate movement speed measurement.
	 * You can start speed measurement from any timing by resetting.
	 * @see Window.getMouseVelocity
	 */
	function resetMouseVelocity( );

	/**
	 * Explicitly call drawing.
	 *
	 * @description This method calls onDraw indirectly.
	 * If you want to draw it yourself, call this method and draw within onDraw.
	 * Specify Window.drawCycle to draw periodically, and avoid explicitly drawing with this method as much as possible.
	 * It may not be supported on other platforms in the future.
	 */
	function startDrawing();

	/**
	 * [Windows *] Whether the window is displayed
	 *
	 * @description Indicates whether the window is displayed.
	 * You can also set the value.
	 * If true, the window is visible, if false, the window is hidden.
	 */
	 property visible {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Window caption
	 *
	 * @description Represents the window caption (title bar title).
	 * You can also set the value.
	 * It's the title of the activity on Android, but it doesn't make much sense because it doesn't appear in full screen.
	 */
	 property caption {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Window width
	 *
	 * @description Represents the width of the window.
	 * You can also set the value.
	 * On Android, it can only be read in the width of Activity.
	 * @see Window.height
	 * @see Window.setSize
	 */
	 property width {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Window height
	 *
	 * @description Represents the height of the window.
	 * You can also set the value.
	 * On Android, it can only be read at the height of Activity.
	 * @see Window.width
	 * @see Window.setSize
	 */
	 property height {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Minimum width of the window
	 *
	 * @description Represents the minimum width of the window.
	 * You can also set the value.
	 * If you specify 0, there is no limit.
	 * @see Window.width
	 * @see Window.minHeight
	 * @see Window.maxWidth
	 * @see Window.maxHeight
	 * @see Window.setMinSize
	 * @see Window.setMaxSize
	 * @see Window.setSize
	 */
	 property minWidth {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Minimum height of the window
	 *
	 * @description Represents the minimum height of the window.
	 * You can also set the value.
	 * If you specify 0, there is no limit.
	 * @see Window.height
	 * @see Window.minWidth
	 * @see Window.maxWidth
	 * @see Window.maxHeight
	 * @see Window.setMinSize
	 * @see Window.setMaxSize
	 * @see Window.setSize
	 */
	 property minHeight {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Maximum width of the window
	 *
	 * @description Represents the maximum width of the window.
	 * You can also set the value.
	 * If you specify 0, there is no limit.
	 * @see Window.width
	 * @see Window.maxHeight
	 * @see Window.minWidth
	 * @see Window.minHeight
	 * @see Window.setMinSize
	 * @see Window.setMaxSize
	 * @see Window.setSize
	 */
	 property maxWidth {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Maximum height of the window
	 *
	 * @description Represents the maximum height of the window.
	 * You can also set the value.
	 * If you specify 0, there is no limit.
	 * @see Window.height
	 * @see Window.maxWidth
	 * @see Window.minWidth
	 * @see Window.minHeight
	 * @see Window.setMinSize
	 * @see Window.setMaxSize
	 * @see Window.setSize
	 */
	 property maxHeight {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Left edge position of the window
	 *
	 * @description Represents the left edge position of the window.
	 * You can also set the value.
	 * The left edge position is the x coordinate from the screen origin (upper left corner).
	 * @see Window.top
	 * @see Window.setPos
	 */
	 property left {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Top position of the window
	 *
	 * @description Represents the top position of the window.
	 * You can also set the value.
	 * The top position is the y coordinate from the screen origin (upper left corner).
	 * @see Window.left
	 * @see Window.setPos
	 */
	 property top {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Can I get focus?
	 *
	 * @description Indicates whether focus can be obtained.
	 * You can also set the value.
	 * If set to false, you will not be able to get focus, that is, the window will not be active.
	 * As a side effect, you will not be able to grab the title bar to move the window, resize the window, or press the "x" button to close the window.
	 * You can use the Window.trapKey property if you want to get keyboard input.
	 * This is usually used to implement a window that appears in the foreground, such as a pop-up menu, but does not get its own focus.
	 * In the current version, the settings for this property may be lost when the window goes to full screen or returns from full screen.
	 * Always true on Android.
	 * @see Window.trapKey
	 * @see Window.onPopupHide
	 */
	 property focusable {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Whether to trap keystrokes
	 *
	 * @description Indicates whether to trap keystrokes.
	 * You can also set the value.
	 * When set to true, keystroke events that occur in other windows can be intercepted and fired on this window.
	 * If this property for multiple windows is set to true, a keystroke event will be fired for the last window created.
	 * Always false on Android.
	 * @see Window.focusable
	 */
	 property trapKey {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Width of client area
	 *
	 * @description Represents the width of the client area.
	 * You can also set the value.
	 * On Android, it can only be read with the width of MainView.
	 * @see Window.innerHeight
	 * @see Window.setInnerSize
	 */
	 property innerWidth {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Vertical width of client area
	 *
	 * @description Represents the vertical width of the client area.
	 * You can also set the value.
	 * On Android, it can only be read at the height of MainView.
	 * @see Window.innerWidth
	 * @see Window.setInnerSize
	 */
	 property innerHeight {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Layer magnification (molecule)
	 *
	 * @description Represents the numerator of the magnification of the layer.
	 * You can set the value, but if you want to set the value, use the Window.setZoom method.
	 * The denominator is represented by the Window.zoomDenom property.
	 * See the Window.setZoom method for more information.
	 * @see Window.setZoom
	 * @see Window.zoomDenom
	 */
	 property zoomNumer {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Layer magnification (denominator)
	 *
	 * @description Represents the denominator of the layer's magnification.
	 * You can set the value, but if you want to set the value, use the Window.setZoom method.
	 * The numerator is represented by the Window.zoomNumer property.
	 * See the Window.setZoom method for more information.
	 * @see Window.setZoom
	 * @see Window.zoomNumer
	 */
	 property zoomDenom {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows +] Drawing device
	 *
	 * @description Represents a drawing device object.
	 * Drawing devices have been deprecated.
	 * Drawing using Canvas is recommended.
	 * You can also set the value.
	 * Setting a value automatically disables (invalidates) the drawing device previously specified for this window.
	 * By default, an instance of the class Window.BasicDrawDevice is specified.
	 * For more information on Window.BasicDrawDevice, see also the description in his core / visual / win32 / BasicDrawDevice.cpp in KiriKiri source.
	 * If you want to specify your own drawing device (the one provided by the plugin), follow the documentation for that plugin.
	 */
	 property drawDevice {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Window appearance
	 *
	 * @description Represents the appearance of the window. You can also set the value.
	 * Always bsNone on Android.
	 * You can set the following values.
	 *
	 * + bsDialog      : It has a non-resizable, dialog-box-like appearance.
	 * + bsSingle      : This window cannot be resized.
	 * + bsNone        : It is a window without borders.
	 * + bsSizeable    : This is a general window that can be resized. This is the default.
	 * + bsToolWindow  : A non-resizable tool window (a window with a small caption).
	 * + bsSizeToolWin : Similar to bsToolWindow, but resizable.
	 *
	 */
	 property borderStyle {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Whether to always display at the top
	 *
	 * @description Indicates whether the window is always displayed at the top (front).
	 * You can also set the value.
	 * If true, the window will always be at the top.
	 * In the current version, the settings for this property may be lost when the window goes to full screen or returns from full screen.
	 * Always true on Android.
	 */
	 property stayOnTop {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Default IME mode
	 *
	 * @description Represents the default IME mode.
	 * The mode specified here is the mode that is set so that there is no focus on any layer.
	 * If not specified, imDisable, which means that the IME is disabled when no layer has focus.
	 * See Layer.imeMode for possible values.
	 */
	 property imeMode {
		 getter() { return value; }
	}
	/**
	 * [Windows *] Mouse cursor display status
	 *
	 * @description Indicates the display status of the mouse cursor.
	 * You can also set the value.
	 * If you specify mcsVisible, the mouse cursor will be displayed.
	 * This is the default state.
	 * If you specify mcsTempHidden, the mouse cursor will be hidden, but if you move the mouse even a little, it will change to mcsVisible and will be displayed.
	 * This happens when you call the Window.hideMouseCursor method.
	 * If you specify mcsHidden, the mouse cursor is hidden.
	 * Even if you move the mouse, it will not be displayed.
	 * Always mcsHidden on Android.
	 */
	 property mouseCursorState {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Whether to use MouseKeys
	 *
	 * @description Indicates whether to use MouseKeys.
	 * You can also set the value.
	 * If true, you can use MouseKeys.
	 * Once the MouseKeys are enabled, you can use the cursor keys to move the mouse cursor, but no keystroke events will occur.
	 * Always false on Android.
	 */
	 property useMouseKey {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Whether it is full screen
	 *
	 * @description Indicates whether it is full screen. You can also set the value.
	 * If set to true, the client area of the current window will be full screen.
	 * The screen resolution at full screen is the size of the client area.
	 * If false is specified, the window will be displayed.
	 * On Android it is always full screen fixed.
	 */
	 property fullScreen {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Main window
	 *
	 * @description Represents the main window (the first window created).
	 */
	 property mainWindow {
		 getter() { return value; }
	}
	/**
	 * [Windows +] Layer object with focus
	 *
	 * @description Represents the layer object that currently has focus.
	 * You can also set the value.
	 * If null, no layer has focus.
	 * Setting a layer object shifts focus to that layer.
	 * Deprecated.
	 * Cannot be used when drawing Canvas.
	 */
	 property focusedLayer {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows +] Primary layer object
	 *
	 * @description Represents a primary layer object.
	 * Deprecated.
	 * Cannot be used when drawing Canvas.
	 */
	 property primaryLayer {
		 getter() { return value; }
	}
	/**
	 * [Windows +] window handle
	 *
	 * @description Represents a window handle.
	 * You can get an integer here, but if you want to use this number in a plug-in etc., cast it to HWND type and use it.
	 * @see Window.registerMessageReceiver
	 */
	 property HWND {
		 getter() { return value; }
	}
	/**
	 * Multi-touch expansion threshold
	 *
	 * @description This is the threshold to start enlargement with multi-touch. The expansion event occurs when the distance between the two touch positions changes by more than this value.
	 * Once the threshold is exceeded, the expansion event will be active until the finger is released.
	 * @see Window.onTouchScaling
	 */
	 property touchScaleThreshold {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Multi-touch rotation threshold
	 *
	 * @description This is the threshold for starting rotation with multi-touch. A rotation event occurs when the movement distance of each touch position changes by this value or more.
	 * Once the threshold is exceeded, the rotation event is valid until the finger is released.
	 * @see Window.onTouchRotate
	 */
	 property touchRotateThreshold {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Number of touches
	 *
	 * @description The number touched on the touch panel.
	 * @see Window.getTouchPoint
	 */
	 property touchPointCount {
		 getter() { return value; }
	}
	/**
	 * Touch event enabled / disabled
	 *
	 * @description Indicates whether the touch event is enabled.
	 * You can also set the value.
	 * If true is specified, events such as Window.onTouchDown will be enabled, and Window.onMouseDown etc. will not occur in touch operations.
	 * In environments with touch devices and multi-touch enabled, the default is true.
	 * Touch is always enabled on Android.
	 */
	 property enableTouch {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Waiting for vertical synchronization
	 *
	 * @description It is a setting whether to draw after waiting for vertical synchronization of the display by transition (screen switching).
	 * Changing the settings may reduce screen flicker, but it may also reduce drawing performance.
	 * In the case of Canvas drawing, it is meaningless (always waiting for vsync) even if it is set in the environment that cannot be specified.
	 */
	 property waitVSync {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * [Windows *] Hint display wait time
	 *
	 * @description Represents the hint display wait time in milliseconds.
	 * You can also set the value.
	 * The default is 500 milliseconds.
	 * If set to 0, Window.onHintChanged will be called immediately (always visible).
	 * If you set -1, the hint will not be displayed.
	 * @see Window.onHintChanged
	 */
	 property hintDelay {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Display orientation
	 *
	 * @description Indicates the orientation of the display.
	 *
	 * + oriUnknown (Acquisition failure / unknown)
	 * + oriPortrait (Vertical)
	 * + oriLandscape (landscape) Either value.
	 *
	 * @see Window.onDisplayRotate
	 * @see Window.displayRotate
	 */
	 property displayOrientation {
		 getter() { return value; }
	}
	/**
	 * Display rotation angle
	 *
	 * @description Represents the rotation angle of the display.
	 * If it is 0, 90, 180, 270, or -1, and it cannot be obtained, it is -1.
	 * @see Window.onDisplayRotate
	 * @see Window.displayOrientation
	 */
	 property displayRotate {
		 getter() { return value; }
	}

	/**
	 * Draw in a specified cycle
	 *
	 * @description Specify 60, 30 and so on.
	 * If you specify 0, onDraw is not called.
	 * It is effective when drawing Canvas.
	 */
	property drawCycle;

	/**
	 * Get an instance of the Canvas class for drawing
	 * @description Used within onDraw.
	 */
	property canvas;

	/**
	 * Screen density (dpi)
	 * @description Returns the dpi value.
	 * Only read is possible.
	 * For Windows, this is the value obtained with GetDeviceCaps.
	 * Android is a config value, and some values are returned from the screen size.
	 * When excluding input by swiping in from the side of the screen, Android recognizes (int) (20 * displayDensity + 0.5) as the range of the screen corner, so when touchDown is in this range, swipe in as well. Should be considered.
	 * On Android, swipe-ins other than from the right at full screen are assigned functions, so it is recommended to ignore them when it is judged to be a swipe-in.
	 * When you want to display the menu, it is common on Android to display the menu by swiping in from the right.
	 */
	property displayDensity;
};
