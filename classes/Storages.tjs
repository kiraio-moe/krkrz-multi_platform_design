/**
 * @description Storages クラスは 吉里吉里本体のストレージシステムに関するメソッドやプロパティを持ったクラスです。
 * このクラスからオブジェクトを作成することはできません。
 */
class Storages {
	/**
	 * 自動検索パスへの追加
	 *
	 * @param path 自動検索パスに追加するパスを指定します。
	 * パスの最後は、アーカイブ内のルートフォルダを指定するときは '>'、通常のフォルダを指定するときは '/' で終わる必要があります
	 * ( 例 : "Archive/arc.xp3>" や "System/" ) 。2.19 beta 14 よりアーカイブの区切り文字が '#' から '>' に変わりました。
	 * @description 自動検索パスに、指定したパスを追加します。
	 * 吉里吉里は、利用可能なストレージを検索するとき、この自動検索パスに登録されたパスを探します。
	 * 自動検索パスは、後に指定したものがより優先されて検索されます。
	 * また、プロジェクトフォルダはもっとも優先されて検索されます。
	 * @see Storages.removeAutoPath
	 */
	function addAutoPath( path);

	/**
	 * 自動検索パスの削除
	 *
	 * @param path 自動検索から削除するパスを指定します。
	 * @description 自動検索パスから、指定したパスを削除します。
	 * @see Storages.addAutoPath
	 */
	function removeAutoPath( path);

	/**
	 * 完全な統一ストレージ名の取得
	 *
	 * @param path 完全な統一ストレージ名にしたいストレージ名を指定します。
	 * @return 完全な統一ストレージ名
	 * @description path で指定されたストレージ名を完全な統一ストレージ名に変換します。
	 * 冗長なパスアクセス ( たとえば system/flags/../data/ など ) はすべて圧縮されます。
	 * カレントメディア、カレントフォルダが指定されていなければ、補完します。
	 * @see Storages.getPlacedPath
	 */
	function getFullPath( path);

	/**
	 * ストレージの検索
	 *
	 * @param storage 検索したいストレージ名を指定します。
	 * @return 発見された場所が統一ストレージ名で返ります。
	 * 見つからなかった場合は空文字列が返ります。
	 * @description storage で指定されたストレージを自動検索パスから検索します。
	 * @see Storages.getFullPath
	 * @see Storages.isExistentStorage
	 */
	function getPlacedPath( storage);

	/**
	 * ストレージの存在確認
	 *
	 * @param storage 存在を確認したいストレージ名を指定します。
	 * @return 存在を確認できれば真、なければ偽が返ります。
	 * @description storage で指定したストレージが存在するかどうかを確認します。
	 * getPlacedPath を用いるよりは高速です。
	 * @see Storages.getPlacedPath
	 */
	function isExistentStorage( storage);

	/**
	 * ストレージ名の拡張子の抽出
	 *
	 * @param storage 拡張子部分を抽出したいストレージ名を指定します。
	 * @return 拡張子部分が返ります。拡張子部分は . (ドット)も含みます。拡張子がなかった場合は空文字列が返ります。
	 * @description 指定されたストレージ名から拡張子の部分を抽出して返します。
	 * @see Storages.extractStorageName
	 * @see Storages.extractStoragePath
	 * @see Storages.chopStorageExt
	 */
	function extractStorageExt( storage);

	/**
	 * ストレージ名の抽出
	 *
	 * @param storage ストレージ名を抽出したいストレージ名を指定します。
	 * @return ストレージ名が返ります。
	 * ストレージ名がなかった場合は空文字列が返ります。
	 * @description 指定されたストレージ名から、ストレージ名の部分 ( パスを除く ) を抽出して返します。
	 * たとえば "System/hoge.txt" を渡した場合、"hoge.txt" が返ります。
	 * @see Storages.extractStorageExt
	 * @see Storages.extractStoragePath
	 */
	function extractStorageName( storage);

	/**
	 * ストレージ名のパスの抽出
	 *
	 * @param storage パスを抽出したいストレージ名を指定します。
	 * @return パスが返ります。パスがなかった場合は空文字列が返ります。
	 * @description 指定されたストレージ名から、パスの部分を抽出して返します。
	 * たとえば "file://home/dee/hoge.txt" を渡した場合、"file://home/dee/" が返ります。
	 * @see Storages.extractStorageExt
	 * @see Storages.extractStorageName
	 */
	function extractStoragePath( storage);

	/**
	 * ストレージ名の拡張子の切り落とし
	 *
	 * @param storage 拡張子部分を切り落としたいストレージ名を指定します。
	 * @return 拡張子部分が切り落とされたストレージ名が返ります。
	 * @description 指定されたストレージ名から拡張子の部分を切り落として返します。
	 * たとえば "file://home/dee/hoge.txt" を渡した場合、"file://home/dee/hoge" が返ります。
	 * 	
	 * @see Storages.extractStorageExt
	 */
	function chopStorageExt( storage);

	/**
	 * [Windows+]CD の検索
	 *
	 * @param volume 検索するCDのボリュームラベルを指定します。
	 * @return 見つかった CD-ROM ドライブのドライブ文字が返ります。
	 * @description 指定されたボリュームラベルを持つ CD ドライブを探して、そのドライブ文字 ( 'H' など ) を返します。
	 * もちろん、ドライブには該当する CD-ROM が挿入されていなければなりません。
	 */
	function searchCD( volume);

	/**
	 * ローカルファイル名の取得
	 *
	 * @param path ローカルファイル名 に変換したい統一ストレージ名を指定します。
	 * @return ローカルファイル名が返ります。
	 * ローカルファイル名に変換できなかった場合は空文字が返るか、例外が発生します。
	 * @description 指定された統一ストレージ名を、OS ネイティブの形式 ( ローカルファイル名 ) に変換して返します。
	 */
	function getLocalName( path);

	/**
	 * [Windows+]ファイル選択ダイアログボックスを表示
	 *
	 * @param params データの受け渡しに用いる辞書配列を指定します。
	 * このメソッドに渡すとき、以下のメンバを指定することができます。
	 * また、いくつかのメンバはこのメソッドが終わると値が変更されます。
	 * filterフィルタ文字列を配列で渡します。
	 * フィルタ文字列は、フィルタの説明と フィルタを | (半角縦棒) で区切って指定するもので、フィルタにはワイルドカードを指定します。
	 * 一つのフィルタに複数の拡張子が対応する場合は ; (半角セミコロン) で区切ります。
	 * 複数のフィルタを指定するには配列で指定します。
	 * 省略するとフィルタは用いません。
	 * 例 :["画像ファイル(*.bmp;*.png;*.jpg;*.jpeg;*.eri;*.tlg)|*.bmp;*.png;*.jpg;*.jpeg;*.eri;*.tlg",  "スクリプトファイル(*.tjs;*.ks)|*.tjs;*.ks"]
	 * filterIndex選択されているフィルタの番号 ( filter で指定したもの ) を指定します。
	 * 1 を指定すると、filter で指定された最初のフィルタが初期状態において選択されています。
	 * 2 を指定すると2番目のフィルタが選択さている状態になります ( 0 から始まるインデックス番号ではないことに注意してください; 先頭は 1 です )。
	 * 省略すると先頭のフィルタが選択されます。
	 * また、ユーザが OK ボタンを押した場合、最後にダイアログボックス上で選ばれていたフィルタのインデックスがこのメンバに設定されます。
	 * nameファイル名を指定します。
	 * 省略したり、空文字列を指定すると初期状態ではなにもファイルを選択されていない状態にすることができます。
	 * また、ユーザが OK ボタンを押した場合、選択されたファイルがこのメンバに設定されます。
	 * initialDir初期状態で表示するフォルダを指定します。
	 * 省略するとカレントディレクトリが使用されます。
	 * titleダイアログボックスのタイトルを表示します。
	 * 省略されるとデフォルトの「開く」や「名前を付けて保存」になります( save メンバの設定によります )。
	 * saveダイアログボックスの種類を指定します。
	 * false(デフォルト) の場合、「開く」のダイアログボックスが使われます。
	 * true の場合、「名前を付けて保存」のダイアログボックスが使われます。
	 * defaultExtデフォルトの拡張子を指定します。
	 * ユーザが拡張子を指定しなかった場合に自動的にこの拡張子を付加します。
	 * ここで指定する拡張子には . (ピリオド)を指定しないでください。
	 * 省略すると、拡張子が付加されることはありません。
	 * @return ユーザがファイルを選択して OK ボタンを押せば真、キャンセルボタンを押せば偽が戻ります。
	 * @description ファイル選択ダイアログボックスを開きます。
	 * 例:
	 *
	 * ```
	 * var params = %[filter : [ "テキストファイル(*.txt)|*.txt", "バイナリファイル(*.bin)|*.bin" ],filterIndex : 1,name : "",initialDir : System.exePath,title : "ファイルを開く",save : false,];
	 * if(Storages.selectFile(params))
	 *     System.inform("選択したファイルは : " + params.name);
	 * ```
	 */
	function selectFile( params);

};
