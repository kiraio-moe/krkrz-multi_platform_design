
/**
 * ウインドウのサイズ制御と画面への拡縮表示制御は環境依存で固定化して隠蔽
 * 隠蔽するかどうかは、オプションが良いか？ strictモードとかそういう
 * 移植のために互換性を確保出来た方が良い場合もあるし、今あるWindowクラスを流用出来た方が楽
 * メソッドなどはifdef?で増減か、オプションで動的にとなると、コンストラクタから別メソッド読んで、そっちで登録切り替え？
 * ※フルスクリーン切り換えのみプロパティ準備
 */
class Window {

	/**
	 * コンストラクタ
	 * ※描画領域サイズは生成時のみ指定
	 * @param width  描画領域の横幅
	 * @param height 描画領域の縦幅
	 */
	function Window(width, height);

	//< フルスクリーン指定
	property fullScreen;

	// ---------------------------------------------------------------
	// イベント処理
	// ---------------------------------------------------------------

	/**
	 * 画面更新コールバック
	 * 画面更新処理時に呼び出される
	 * この呼び出しの間に独自の描画処理を行う
	 */
	function onDraw();
	// onDraw はまだ描画完了していないので、描画後にキャプチャなど何か行いたい時用に onPostDraw など必要ではないか？
	// capture のテストスクリプト実装中に気付いたが。

	// onDrawが呼ばれる、自前呼び出しか、vsink待ちして、スレッドから呼ばれるか？
	// タイマーで適当に60fpsか30fpsにして使うか？
	// OpenGL の eglSwapBuffers は、キューに積むのみで実際にvsink待ちするわけではないようなので、
	// 呼び出し周期を適当に設定可能にして、その周期以上で呼び出されるようにするのが妥当か？
	// 内部的に再描画が必要であっても、指定周期は待つような。
	// つまり、property drawCycle のようなプロパティで、60や30など設定するのが良さそう。
	// v-syncがいつ発生したかは分からないため、タイミング的に次のvsyncになってしまっているかもしれないが、そこは気にしない。
	// function startDrawing();
	property drawCycle;

	/**
	 * Windowsと同じ。
	 * ティアリング等発生する場合に設定する。
	 * 指定できない環境では、設定しても無意味(常時vsync待ちがある)。
	 */
	property waitVSync;

	/**
	 * マウス系イベント
	 * Android などの場合は最初のタッチでの動作でエミュ
	 */
	onMouseXXXX();

	/**
	 * タッチ系イベント
	 * Windows でマウスしかない場合は、それでエミュ
	 */
	function onTouchXXXX();

	// 以下のようなイベントに集約する方が、エミュよりスマートに思える。
	// MouseXXXとTouchXXXと同時発生しつつ、基本はonPointer系で単一処理にするような。
	// 一応パラメータでどのデバイスからの入力か識別可能にはしておく形
	function onPointerDown();
	function onPointerMove();
	function onPointerUp();

	/**
	 * キー操作系要検討
	 */
	function onKeyXXX();

	/**
	 * ウインドウがアクティブになった
	 */
	function onActivate();

	/**
	 * ウインドウが非アクティブになった
	 */
	function onDeactivate();

	/**
	 * 終了確認用
	 */
	function onClose(); --> 元々ある onCloseQuery で統一

	// ---------------------------------------------------------------
	// modalダイアログ機能 : 今のダイアログってSystemクラスにあるんだよな……
	// ---------------------------------------------------------------
	// モーダルが難しいということで、ダイアログの結果をクロージャで受ける形の要望があったが、
	// イベントで結果が返ってくるデザインが一番楽。
	// クロージャを内部で保持しなければならないので、それならスクリプトで保持したほうが記述も簡単。
	// クロージャで受けるバージョンは、スクリプト側で書いてもらう。

	// 根本的にTJS2スクリプトでダイアログ書くのが一番効率良さそう。

	/**
	 * 簡易確認表示
	 * @param text 表示するテキスト
	 */
	function inform(text, func);

	/**
	 * 簡易 YES/NO 確認
	 * @param text 表示するテキスト
	 * @return YES なら true
	 */
	function confirm(text, func);

	/**
	 * 簡易テキスト入力
	 * @param text 初期表示
	 * @return 入力結果 (void の場合はキャンセル)
	 */
	function inputText(text, func); // --> 次期送りでは…

	/**
	 * 各種ダイアログ結果受け取りイベント
	 * @param type ダイアログ種別
	 * @param ok YES/NO or OK/Cancel or void
	 * @param input テキスト入力ダイアログの時の結果があれば、なければnull or void
	 */
	function onDialogResult( type, ok, input );

	// ダイアログ機能ボタン文言調整用
	property okText;
	property cancelText;
	property yesText;
	property noText;

	/**
	 * 描画用のCanvasクラスのインスタンスを得る
	 * onDraw 内で
	 */
	property canvas;
}

