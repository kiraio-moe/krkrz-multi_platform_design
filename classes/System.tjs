/**
 * @description System クラスは 吉里吉里本体や、吉里吉里が実行されている環境に関する情報を取得したり、設定したりするためのクラスです。このクラスからオブジェクトを作成することはできません。
 */
class System {
	/**
	 * 吉里吉里の非同期終了
	 *
	 * @param code プロセスの終了コードを指定します
	 * 			
	 * @description 吉里吉里を終了させます。このメソッドを呼び出してもすぐには吉里吉里は終了しません。すべてのイベントハンドラから吉里吉里に制御が戻った際に終了します。
	 */
	function terminate( code=0);

	/**
	 * 吉里吉里の同期終了
	 *
	 * @param code プロセスの終了コードを指定します
	 * 			
	 * @description 吉里吉里を終了させます。このメソッドは System.terminate と異なり、呼び出した時点で終了します。そのため、
	 * 		このメソッドは戻ることはありません。
	 */
	function exit( code=0);

	/**
	 * Continuous ハンドラの追加
	 *
	 * @param callback ハンドラとなる関数を指定します。
	 * @description Continuous ハンドラを登録します。Continuous ハンドラは、「できる限り頻繁に」呼び出されるイベントハンドラです。他にする処理がない場合、吉里吉里は Continuous ハンドラを呼び出し続けます。
	 * 		他にイベントなどが起きた場合はそちらが優先されます。ただし、コマンドラインオプションの -contfreq で呼び出しの頻度が指定されている
	 * 		場合はそれに従います。
	 */
	function addContinuousHandler( callback);

	/**
	 * Continuous ハンドラの削除
	 *
	 * @param callback ハンド関数を指定します。
	 * @description Continuous ハンドラを削除します。
	 */
	function removeContinuousHandler( callback);

	/**
	 * メッセージの表示
	 *
	 * @param text 表示するメッセージを指定します。
	 * @param caption ウィンドウのキャプションとなる文字列を指定します。
	 * @description ユーザにメッセージを示すためのウィンドウを表示します。ウィンドウはモーダルで表示されます ( つまり、表示中は他のウィンドウは操作できない )。
	 */
	function inform( text, caption="");

	/**
	 * ティックカウントの取得
	 *
	 * @return ティックカウント(64bitの整数)が戻ります。
	 * @description ティックカウントは 1/1000 秒ごとにカウントアップする数値です。二つの時点でこのメソッドを
	 * 		用いてティックカウントを取得し、その差をとれば、二つの時点の時間差を知ることができます。
	 */
	function getTickCount( );

	/**
	 * キー状態の取得
	 *
	 * @param code 状態を取得する仮想キーコード  を指定します。
	 * @return キーが押されていれば真、押されていなければ偽になります。
	 * @description code で指定したキーコードに対応するキーが、このメソッドを呼んだ時点で押されているかどうかを
	 * 		取得します。
	 */
	function getKeyState( code);

	/**
	 * ファイル/プログラムの実行
	 *
	 * @param target 実行するファイルやソフトウェアを指定します。ファイルを指定された場合は、それに関連づけられたプログラムが起動します。
	 * @param param 実行するソフトウェアに渡すパラメータを指定します。target 引数にファイルを指定した場合はこの引数を省略するか、あるいは空文字列を
	 * 				指定してください。
	 * @return 実行に成功すれば真、失敗すれば偽が返ります。
	 * @description target で指定したファイルやソフトウェアを実行します。
	 */
	function shellExecute( target, param="");

	/**
	 * レジストリの読み込み
	 *
	 * @param key 読み込むレジストリキーを指定します。
	 * @return 実行に成功すればレジストリの値、失敗すれば void が返ります。
	 * @description key で指定した Windows レジストリを読み込みます。レジストリキーは、以下のルートキー名で始めることができます。HKEY_CLASSES_ROOTHKEY_CURRENT_CONFIGHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY_PERFORMANCE_DATAHKEY_DYN_DATAたとえば、以下のような文字列を key に指定することができます。HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\hoeg\installdir数値、単一文字列のみを読み込むことができます。数値の場合は整数型、文字列の場合は文字列型
	 * 		の結果が返ります。
	 */
	function readRegValue( key);

	/**
	 * コマンドラインオプションの取得
	 *
	 * @param name 取得するコマンドラインオプション名を指定します。最初に '-'
	 * 				( ハイフン ) をつけてください ( 例 : '-nosplash' )。
	 * @return コマンドラインオプションが指定されていればその値、指定されていなければ
	 * 		void が返ります。
	 * @description コマンドラインオプションは、-name=valueまたは-nameの形式で吉里吉里に渡されている必要があります。前者の場合は値として value が
	 * 		返り、前者の場合は値として 'yes' が返ります。
	 * @see System.setArgument
	 */
	function getArgument( name);

	/**
	 * コマンドラインオプションの設定
	 *
	 * @param name 設定するコマンドラインオプション名を指定します。最初に '-'
	 * 				( ハイフン ) をつけてください ( 例 : '-contfreq' )。
	 * @param value 設定する値を指定します。 ( 例 : '60' )。
	 * @description 動的にコマンドラインオプションを設定します。すべてのコマンドラインオプションが設定可能な訳ではありません。設定可能なコマンドラインオプションについては コマンドラインオプション を参照してください。ここで動的に変更可能という表記のないオプションについては変更を行わないでください。このメソッドは、そのオプションが動的に変更可能かどうかやオプションの存在、値の有効性などをチェックしません。値の設定には十分気をつけてください。
	 * @see System.getArgument
	 */
	function setArgument( name, value);

	/**
	 * 色定数の実際の色の取得
	 *
	 * @param color 色定数を指定します ( 色定数一覧 を参照 )。通常の 0xRRGGBB 形式の色を指定した場合はそのままの値が返ります。
	 * @return 指定された色定数が表す実際の色が 0xRRGGBB 形式で返ります。
	 * @description 色定数を実際の色に変換し、0xRRGGBB 形式で返します。
	 */
	function toActualColor( color);

	/**
	 * 二重起動のチェック
	 *
	 * @param key チェックを行うためのキー文字列を指定します。同じキー文字列をほかの
	 * 				実行中の吉里吉里がこのメソッドに指定していた場合、false が戻ります。キー文字列には基本的には TJS の変数の命名規則と同じ文字のみが使えると
	 * 				考えてください。キー文字列は十分にユニークな物である必要があります。
	 * @return すでに同じキー文字列が指定された吉里吉里が実行中の場合は false、そうでなければ true が戻ります。
	 * @description 他に同じキー文字列を指定された吉里吉里が実行中ならば false、そうでなければ true が戻ります。二重起動の防止に用います。
	 */
	function createAppLock( key);

	/**
	 * UUID 文字列の生成
	 *
	 * @return 生成された UUID 文字列が "e8b2a2b5-5ceb-4f75-a08b-1f1bdfdca4f1" の形式
	 * 	(ハイフンを除く各英数字は16進数の数字) で戻ります。
	 * @description UUID 文字列を生成して返します。このメソッドはランダムビット列を元に生成された
	 * 		128bitの UUID (universal unique identifier) を生成します。吉里吉里に実装されている UUID 生成アルゴリズムは、
	 * 		ある程度、環境ノイズを拾ってランダムビット列を生成しますが、
	 * 		高度なセキュリティが要求されるような用途に使用することはおすすめしません。しかし、
	 * 		他の UUID とは「非常に非常に高い確率で重ならない」と考えられます。
	 */
	function createUUID( );

	/**
	 * メッセージ割り当ての変更
	 *
	 * @param id 割り当てるメッセージ ID を指定します。
	 * @param msg id で指定された ID に割り当てるメッセージを指定します。
	 * @return ID が存在し、メッセージの割り当てが成功すれば真、そうでなければ偽が戻ります。
	 * @description メッセージ割り当てを変更します。吉里吉里が内蔵しているメッセージをこのメソッドで別のメッセージに変更することができます。通常、メッセージマップファイル内に記述します ( 起動の仕方 参照 )。設定可能な ID と、それに現在割り当てられているメッセージの一覧を取得するには  から
	 * 		「メッセージマップファイルの作成」を実行してください。
	 * 	
	 */
	function assignMessage( id, msg);

	/**
	 * メモリのコンパクト化
	 *
	 * @param level レベルを指定します。clIdle を指定すると、システムがアイドル状態 (システムが比較的動作をしていない状態) に実行されるコンパクト化と同じ処理が行われます。現バージョンでは TJS2 のガベージコレクションが行われます。clDeactivate を指定すると、吉里吉里が非アクティブになったとき (他のアプリケーションがアクティブになったとき) に実行されるコンパクト化と同じ処理が行われます。現バージョンではレイヤの演算用の一時画像バッファ、レイヤキャッシュ、XP3 アーカイブのセグメント(ストレージの断片) キャッシュ、自動検索パスのキャッシュがクリアされます。clMinimize を指定すると、吉里吉里が最小化されたときに実行されるコンパクト化と同じ処理が行われます。現バージョンでは、描画文字のキャッシュ、画像キャッシュがクリアされます。clAll を指定すると、上記のコンパクト化の全てが実行されます。コンパクト化のレベルは、clIdle < clDeactivate < clMinimize < clAll の順に強くなります。より上位のレベルを指定すると、下位のレベルで行われるコンパクト化も行われます。たとえば、clDeactivate を実行すると、clIdle での処理も実行されます。引数を省略すると clAll が指定された物と見なされます。
	 * @description メモリのコンパクト化を行います。コンパクト化とは、使用していないメモリや各種キャッシュ用メモリを解放して、メモリ使用量を減らす処理です。吉里吉里は自動でこれを行うので通常はあまり気にする必要はありませんが、強制的にプログラム側の処理で行いたい場合にこのメソッドを使用することができます。
	 */
	function doCompact( level=clAll);

	/**
	 * 画像のキャッシュへの読み込み
	 *
	 * @param storages キャッシュに入れたい画像ストレージ名を配列(Arrayクラスのオブジェクト)で渡します。先に書いた物ほど優先されます。吉里吉里は、Layer.loadImages の第１引数に指定された
	 * 				文字列をそのままキーにしてキャッシュを管理するため、
	 * 				キャッシュを意味のある物にするには、
	 * 				ここで指定する画像ストレージ名は Layer.loadImages の第１引数に指定するものと
	 * 				同一である必要があります。
	 * @param limitbytes このメソッドの呼び出しで使用するキャッシュ容量の制限値をバイト単位で指定します。0 を指定すると、キャッシュをすべて使用します。正の数を指定すると、そのバイト数までキャッシュを使用しようとします。負の数を指定すると、現在のキャッシュの
	 * 				制限値 ( System.graphicCacheLimit ) からその数値が加算された数 ( ただし
	 * 				「負の数」を加算するので実際は減算 ) が制限値として使用されます。その結果制限値が
	 * 				0 または負になってしまった場合は、このメソッドは何もせずに終了します。たとえば、
	 * 				-2*1024*1024 を指定すれば、現在のキャッシュ制限値から 2MB が引かれた数値が指定さ
	 * 				れたとみなされます。これは、キャッシュの残り容量に余裕を残したい場合に便利です。
	 * @param timeout タイムアウト ( 時間制限 ) を ms 単位で指定します。0 を指定すると無制限と
	 * 				なります。このメソッドはこの引数で指定された時間が経過すると、以降の画像の読み込みを中止し、
	 * 				戻ります。ただし、ある画像の読み込み中にタイムアウトになっても、その画像の読み
	 * 				込みが終了するまでは戻りません。
	 * @description このメソッドは、指定された画像をキャッシュに入れようと試行します。ただし、このメソッドは
	 * 		キャッシュに画像を入れようと努力はしますが、実際に画像がキャッシュにはいる保証
	 * 		はありません。画像キャッシュの制限値をすぎたり、タイムアウトすると画像読み込みを中断します。
	 * 		画像は、storages引数に指定した物のうち、最初に書いた物ほどキャッシュに入る可能性が大きくなり
	 * 		ます ( 優先されます )。すでに指定された画像がキャッシュに入っていた場合は、キャッシュ中での
	 * 		生存の順位を引き上げるだけの動作をします。このメソッドは、画像読み込み中のエラーはすべて無視します。現バージョンでは、このメソッドでキャッシュに入れることのできる画像は、通常
	 * 		Layer.loadImages で読み込み可能な画像で、かつカラーキーを指定しない画像
	 * 		です ( アルファチャンネル付き画像は問題ありません )。ユニバーサルトランジションのルール画像や、
	 * 		領域画像は読み込む動作はしますが、キャッシュとして有効なデータにはなりません ( 読み込んだ
	 * 		データは無駄になります ) ので、指定しないようにしてください。画像がキャッシュで使用するバイト数については System.graphicCacheLimit を参照
	 * 		してください。
	 */
	function touchImages( storages, limitbytes=0, timeout=0);

	/**
	 * バージョン文字列
	 *
	 * @description 吉里吉里本体のバージョン文字列を得ることができます。バージョン文字列は以下のような形式です。1.0.0.1
	 */
	 property versionString {
		 getter() { return value; }
	}
	/**
	 * バージョン情報文字列
	 *
	 * @description 吉里吉里本体のバージョン情報文字列を得ることができます。バージョン情報文字列は System.versionString よりも長い形式で、以下のようになります。吉里吉里[きりきり] Z 実行コア/1.0.0.0 (Compiled on Dec 16 2013 23:15:27) TJS2/2.4.28 Copyright (C) 1997-2013 W.Dee and contributors All rights reserved.
	 */
	 property versionInformation {
		 getter() { return value; }
	}
	/**
	 * イベント配信が停止されているかどうか
	 *
	 * @description 吉里吉里のイベント配信が停止されている場合に true になります。値を設定することもで
	 * 		きます。イベント配信が停止されると、吉里吉里上のイベントは発生しなくなるか、発生が延期されま
	 * 		す ( イベントの種類によって挙動は異なります )。
	 */
	 property eventDisabled {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 画像キャッシュ制限
	 *
	 * @description 吉里吉里の画像キャッシュ制限をバイト単位で表します。値を設定することもできます。gcsAuto を指定すると、マシンに搭載されているメモリ量に応じて自動的に
	 * 		値が設定されます。ルール画像や領域画像は、幅×高さ で表されるバイト数を消費します。それ以外の画像は
	 * 		幅×高さ×４ で表されるバイト数を消費します。
	 */
	 property graphicCacheLimit {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * プラットフォーム名
	 *
	 * @description 吉里吉里が動作しているプラットフォーム名を表します。Windows の場合は 'Win32' となります。
	 */
	 property platformName {
		 getter() { return value; }
	}
	/**
	 * OS 名
	 *
	 * @description 吉里吉里が動作している OS の名前を表します。
	 */
	 property osName {
		 getter() { return value; }
	}
	/**
	 * 吉里吉里本体のあるフォルダのパス
	 *
	 * @description 吉里吉里本体が設置してあるパスを表します。パス名は統一ストレージ名で表現されます。
	 * @see System.appDataPath
	 * @see System.personalPath
	 */
	 property exePath {
		 getter() { return value; }
	}
	/**
	 * マイドキュメントのパス
	 *
	 * @description ユーザのマイドキュメントのパスを表します。Windows の場合、レジストリの
	 * 		HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders の
	 * 		Personal で表されるフォルダが返されます。通常これは「マイドキュメント」フォルダを指します。このフォルダがない場合は System.exePath と同じフォルダを返します。
	 * @see System.appDataPath
	 * @see System.exePath
	 */
	 property personalPath {
		 getter() { return value; }
	}
	/**
	 * ユーザのホームディレクトリのパス
	 *
	 * @description ユーザのホームディレクトリのパスを表します。Windows の場合、レジストリの
	 * 		HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders の
	 * 		AppData で表されるフォルダが返されます。このフォルダがない場合は System.exePath と同じ
	 * 		フォルダを返します。これは、通常、以下の通りになります。
	 * 		XP の場合C:\Documents and Settings\<ユーザ名>\Application Data\ ( C: の部分は環境によって異なります )Vista, 7, 8 の場合C:\Users\<ユーザ名>\AppData\Roaming ( C: の部分は環境によって異なります )何らかの理由で レジストリキー ( 上記参照 ) を読み出せなかった場合吉里吉里の実行可能ファイルのあるフォルダ (System.exePath)になります
	 * @see System.exePath
	 * @see System.personalPath
	 */
	 property appDataPath {
		 getter() { return value; }
	}
	/**
	 * データ保存場所のパス
	 *
	 * @description コマンドラインオプションの -datapath で指定したディレクトリを表します。標準では、ログなどがすべてここに出力されます。ユーザスクリプトがデータを保存する場合は、ここに保存することを推奨します。
	 */
	 property dataPath {
		 getter() { return value; }
	}
	/**
	 * 吉里吉里本体のパス
	 *
	 * @description 吉里吉里本体へのパス名を表します。パス名は統一ストレージ名で表現されます。
	 */
	 property exeName {
		 getter() { return value; }
	}
	/**
	 * タイトル
	 *
	 * @description メインウィンドウのタイトルを文字列で表します。値を設定することもできます。
	 * @see Window.caption
	 */
	 property title {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 画面幅
	 *
	 * @description 画面サイズ ( 画面解像度 ) の横サイズをピクセル単位で表します。値はメインウィンドウのあるディスプレイを対象としたものです。メインウィンドウがない場合はプライマリーディスプレイが対象となります。
	 * @see System.screenHeight
	 * @see System.desktopLeft
	 * @see System.desktopTop
	 * @see System.desktopWidth
	 * @see System.desktopHeight
	 */
	 property screenWidth {
		 getter() { return value; }
	}
	/**
	 * 画面高さ
	 *
	 * @description 画面サイズ ( 画面解像度 ) の縦サイズをピクセル単位で表します。値はメインウィンドウのあるディスプレイを対象としたものです。メインウィンドウがない場合はプライマリーディスプレイが対象となります。
	 * @see System.screenWidth
	 * @see System.desktopLeft
	 * @see System.desktopTop
	 * @see System.desktopWidth
	 * @see System.desktopHeight
	 */
	 property screenHeight {
		 getter() { return value; }
	}
	/**
	 * デスクトップ左端位置
	 *
	 * @description デスクトップ ( ウィンドウを表示可能な領域 ) の左端位置をピクセル単位で表します。値はメインウィンドウのあるディスプレイを対象としたものです。メインウィンドウがない場合はプライマリーディスプレイが対象となります。
	 * @see System.screenWidth
	 * @see System.screenHeight
	 * @see System.desktopTop
	 * @see System.desktopWidth
	 * @see System.desktopHeight
	 */
	 property desktopLeft {
		 getter() { return value; }
	}
	/**
	 * デスクトップ上端位置
	 *
	 * @description デスクトップ ( ウィンドウを表示可能な領域 ) の上端位置をピクセル単位で表します。値はメインウィンドウのあるディスプレイを対象としたものです。メインウィンドウがない場合はプライマリーディスプレイが対象となります。
	 * @see System.screenWidth
	 * @see System.screenHeight
	 * @see System.desktopLeft
	 * @see System.desktopWidth
	 * @see System.desktopHeight
	 */
	 property desktopTop {
		 getter() { return value; }
	}
	/**
	 * デスクトップ幅
	 *
	 * @description デスクトップ ( ウィンドウを表示可能な領域 ) の幅をピクセル単位で表します。値はメインウィンドウのあるディスプレイを対象としたものです。メインウィンドウがない場合はプライマリーディスプレイが対象となります。
	 * @see System.screenWidth
	 * @see System.screenHeight
	 * @see System.desktopLeft
	 * @see System.desktopTop
	 * @see System.desktopHeight
	 */
	 property desktopWidth {
		 getter() { return value; }
	}
	/**
	 * デスクトップ高さ
	 *
	 * @description デスクトップ ( ウィンドウを表示可能な領域 ) の高さをピクセル単位で表します。値はメインウィンドウのあるディスプレイを対象としたものです。メインウィンドウがない場合はプライマリーディスプレイが対象となります。
	 * @see System.screenWidth
	 * @see System.screenHeight
	 * @see System.desktopLeft
	 * @see System.desktopTop
	 * @see System.desktopWidth
	 */
	 property desktopHeight {
		 getter() { return value; }
	}
	/**
	 * メインウィンドウが閉じたときに終了するかどうか
	 *
	 * @description メインウィンドウ(一番最初に作成したWindowクラスのインスタンス)が閉じたときに終了するかどうかを表します。値を設定することもできます。デフォルトは真です。メインウィンドウが閉じ、ほかのデバッグ関連ウィンドウも表示していない場合は吉里吉里は終了すること無くシステムに残り、制御不能に陥る可能性がありますので注意してください(タスクマネージャからプロセスを終了させるしか無くなる可能性があります)。
	 * 	
	 */
	 property exitOnWindowClose {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 捕捉されなかった例外のためのハンドラ関数
	 *
	 * @description 捕捉されなかった例外 (どこにも捕捉されずに吉里吉里本体に渡された例外) を処理する関数を表します。null を指定すると、デフォルトの動作になります。デフォルトの動作とは、
	 * 		非同期イベントの配信を停止する (System.eventDisabled を 真 に設定)ログをファイルに出力開始する (Debug.logAsError を呼ぶ)エラーを通知するダイアログボックスを表示し、スクリプトエディタでその箇所を示すです。ハンドラ関数は引数を一つ取り、それが例外オブジェクトになります。ハンドラ関数が指定されないか、あるいはハンドラ関数が null であるか、あるいはハンドラ関数が偽を返すと、デフォルトの動作が行われます。ハンドラ関数が真を返すと上記のデフォルトの動作は行われません。ハンドラ関数を実行中に非同期イベントが発生する可能性を考慮してください。吉里吉里本体が非同期イベントを処理できてしまうと、例外ハンドラを実行中に再び予期せぬ例外が発生する可能性があります。これを避けるため、通常、ハンドラ関数内でなにかを待つような処理をする場合 (吉里吉里が非同期イベントを処理する機会がある場合 )、非同期イベントの発生を停止させます。例: System.exceptionHandler = function (e){// どこにも捕捉されない例外がシステム側で捕捉された場合、この関数が// 呼ばれる。e は例外オブジェクト。if(e instanceof "ConductorException"){// コンダクタの投げた例外の場合Debug.logAsError(); // ログのファイルへの書き出し動作の開始などvar event_disabled = System.eventDisabled;System.eventDisabled = true;// エラーの理由を表示させている間にイベントが発生すると// やっかいなのでいったんイベント発生を停止させるSystem.inform(e.message);System.eventDisabled = event_disabled;// イベントを発生するかどうかを元の状態にreturn true; // true を返すと本体側で例外の処理は行わなくなる}else{return false; // false を返すと通常の例外処理}};
	 * @see System.eventDisabled
	 * @see Debug.logAsError
	 */
	 property exceptionHandler {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * アプリケーションがアクティブになったとき
	 *
	 * @description アプリケーションがアクティブになったときに呼び出されるイベント関数を表します。null を指定すると関数は呼び出されません。通常のイベントハンドラと異なり、このイベントを受け取りたい場合は、呼び出したい関数をこのプロパティに設定してください。Window.onActivate は、同じアプリケーション内のそれぞれのウィンドウがアクティブになったときに発生しますが、このイベントは、メインウィンドウがアクティブになった場合に発生します。このイベントは、メインウィンドウが既にアクティブの場合にも発生する可能性があるので注意してください (完全に onActivate → onDeactivate → onActivate → …… の順に発生する保証がない )。
	 * @see System.onDeactivate
	 * @see Window.onActivate
	 * @see Window.onDeactivate
	 */
	 property onActivate {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * アプリケーションが非アクティブになったとき
	 *
	 * @description アプリケーションが非アクティブになったときに呼び出されるイベント関数を表します。null を指定すると関数は呼び出されません。通常のイベントハンドラと異なり、このイベントを受け取りたい場合は、呼び出したい関数をこのプロパティに設定してください。Window.onDeactivate は、同じアプリケーション内のそれぞれのウィンドウが非アクティブになったときに発生しますが、このイベントは、メインウィンドウが非アクティブになった場合に発生します。このイベントは、メインウィンドウが既に非アクティブの場合にも発生する可能性があるので注意してください (完全に onActivate → onDeactivate → onActivate → …… の順に発生する保証がない )。
	 * @see System.onActivate
	 * @see Window.onActivate
	 * @see Window.onDeactivate
	 */
	 property onDeactivate {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 描画に使用するスレッドの数
	 *
	 * @description                 　吉里吉里のレイヤシステムが描画時に使用するスレッド数を表します。値を設定することもできます。                　dtnAuto を指定すると、OSの認識するプロセッサ数と同数のスレッドが自動的に割り当てられます。                　描画スレッドを複数設定することで、マルチコア環境での描画パフォーマンスを向上させられる可能性がありますが、逆にパフォーマンスが低下する場合もあります。                　描画面積が大きい処理、Affine系の高負荷な処理、演算の重いレイヤ合成処理などに適用することで、良好な結果を得られる可能性があります。                　マルチスレッドを使用するように設定しても、描画処理の負荷が軽くマルチスレッド化の効果が得られないとシステムが判断した場合は、マルチスレッドで実行されない場合があります。        
	 */
	 property drawThreadNum {
		 getter() { return value; }
		 setter( value ) {}
	}
	
	/**
	 * システムがWindowsかどうか判定(readonly)。
	 */
	property isWindows;

	/**
	 * システムがAndroidかどうか判定(readonly)。
	 */
	property isAndroid;
};

