/**
 * @description Bitmap クラスは、画像情報を保持するクラスです。
 */
class Bitmap {
	/**
	 * デフォルトBitmapオブジェクトの構築
	 *
	 * @description Bitmap クラスのオブジェクトを構築します。初期状態では 幅と高さは32ピクセルになっています。
	 */
	function Bitmap();

	/**
	 * 大きさを指定したBitmapオブジェクトの構築
	 *
	 * @param width 画像の幅を指定します。
	 * @param height 画像の高さを指定します。
	 * @param bpp 画像の各ピクセルのビット数を指定します。32 か 8 のいずれかを指定してください。
	 * @description Bitmap クラスのオブジェクトを指定の大きさで構築します。
	 */
	function Bitmap( width, height, bpp=32);

	/**
	 * ファイルを指定したBitmapオブジェクトの構築
	 *
	 * @param filename 画像のファイル名を指定します。
	 * @param colorkey カラーキーを指定します。値は Layer.loadImages と同じです。
	 * @description Bitmap クラスのオブジェクトをファイルから構築します。
	 */
	function Bitmap( filename, colorkey=clNone);

	/**
	 * 非同期読込みが完了した
	 *
	 * @param meta 読み込んだ画像のタグ情報です。
	 * @param async 非同期で読み込まれたかどうかです。画像データがキャッシュ内にある場合、 Bitmap.loadAsync 実行中に本イベントが発生します。
	 * @param error 画像読込みでエラーが発生したかどうかです。
	 * @param message エラーメッセージです。エラーが発生した場合、エラーメッセージが渡されます。
	 * @description 非同期読込みが完了した時に発生します。
	 * 読み込んだ画像は Layer.copyFromBitmapToMainImage で Layer にコピーできます。
	 * 読込み処理は非同期であるため、読込みが完了した時に、その画像を渡す Layer が既に無効化されている可能性があります。
	 * 本イベントで他のオブジェクトへアクセスする場合は、無効化されていないか確認して下さい。
	 * もしくは、本イベントが完了するまで対象オブジェクトが無効化されないようにしてください。
	 * @see Bitmap.loadAsync
	 * @see Layer.copyFromBitmapToMainImage
	 */
	event onLoaded( meta, async, error, message);

	/**
	 * ピクセル値の取得
	 *
	 * @param x 取得する x 座標値をピクセル単位で指定します。
	 * @param y 取得する y 座標値をピクセル単位で指定します。
	 * @return ピクセル値
	 * @description 画像のピクセル値を取得します。
	 * @see Bitmap.setPixel
	 */
	function getPixel( x, y);

	/**
	 * ピクセル値の設定
	 *
	 * @param x 設定する x 座標値をピクセル単位で指定します。
	 * @param y 設定する y 座標値をピクセル単位で指定します。
	 * @param value 設定するピクセル値を指定します。
	 * @description 画像のピクセル値を設定します。
	 * @see Bitmap.getPixel
	 */
	function setPixel( x, y, value);

	/**
	 * ピクセルのアルファ値の取得
	 *
	 * @param x 取得する x 座標値をピクセル単位で指定します。
	 * @param y 取得する y 座標値をピクセル単位で指定します。
	 * @return ピクセルのアルファ値
	 * @description 画像のピクセルのアルファ値を取得します。
	 * @see Bitmap.setMaskPixel
	 */
	function getMaskPixel( x, y);

	/**
	 * ピクセルのアルファ値の取得
	 *
	 * @param x 設定する x 座標値をピクセル単位で指定します。
	 * @param y 設定する y 座標値をピクセル単位で指定します。
	 * @param value 設定するピクセルのアルファ値を指定します。
	 * @description 画像のピクセルのアルファ値を設定します。
	 * @see Bitmap.getMaskPixel
	 */
	function setMaskPixel( x, y, value);

	/**
	 * 画像の共有の解除
	 *
	 * @param copy 共有状態を解除する際、元の画像をコピーするかどうかを指定します。真を指定すると元の画像をコピーします。偽を指定すると元の画像はコピーされず、画像の
	 * 				内容は不定となります。
	 * 			
	 * @description 画像の共有状態を強制的に解除します。
	 * 吉里吉里は、assignImages などで画像をまるごとコピーした場合、実際には画像バッファのコピーを行わず、同一の画像を共有するようになります。
	 * 通常、画像に変更を加えようとする直前でこの共有状態は自動的に解除されますが、このメソッドで強制的に解除することができます。
	 * copy 引数に false を指定した場合は、画像の共有は解除されますが、元の画像を引き継ぐことは保証されません ( 画像の内容は不定になります ) が、共有の解除をより高速に行うことができます。
	 * 画像全部を書き換える場合は元の画像を引き継ぐ必要はありませんので、描画を行う前にあらかじめこのメソッドに false を指定して呼び出すと効率が良くなる場合があります。
	 * このメソッドは、画像が共有されていない場合は何もしません。
	 */
	function independ( copy=true);

	/**
	 * 画像サイズの設定
	 *
	 * @param width 画像の横幅をピクセル単位で指定します。この値は Bitmap.width プロパティでも取得や設定ができます。
	 * @param height 画像の縦幅をピクセル単位で指定します。この値は Bitmap.height プロパティでも取得や設定ができます。
	 * @description 画像サイズを指定します。
	 */
	function setSize( width, height);

	/**
	 * 画像のコピー
	 *
	 * @param src コピー元の Bitmap オブジェクトを指定します。
	 * @description 画像のコピーを行います。
	 * コピーといっても、実際は「同じ画像を二つ以上のオブジェクトで共有している」という状態になるだけなのでこのメソッドはほとんど実行時間がかかりません。
	 */
	function copyFrom( src);

	/**
	 * 画像の保存
	 *
	 * @param name 保存するストレージ名を指定します。
	 * @param type 保存する画像形式を文字列で指定します。
	 * 現バージョンでは以下の形式を指定可能です。 
	 * "bmp" または "bmp32"32bpp の BMP です。アルファチャンネル(マスク)も保存します。
	 * "bmp24"24bpp の BMP です。アルファチャンネル(マスク)は保存されません。
	 * "bmp8"8bpp の BMP です。アルファチャンネル(マスク)は保存されません。画像は252色の固定パレットによる4×4組織化ディザリングを用いて減色されます。
	 * "jpg"JPEG です。アルファチャンネル(マスク)は保存されません。画像はクオリティー90%で保存されます。
	 * "jpg###"JPEG です。アルファチャンネル(マスク)は保存されません。画像は###で指定されたクオリティーで保存されます。"jpg010" で 10%、"jpg100" で 100%、"jpg080" で 80%です。
	 * "png"32bpp の PNG です。アルファチャンネル(マスク)も保存します。
	 * "png24"24bpp の PNG です。アルファチャンネル(マスク)は保存されません。
	 * "tlg5"32bpp の TLG5 です。アルファチャンネル(マスク)も保存します。
	 * "tlg524"24bpp の TLG5 です。アルファチャンネル(マスク)は保存されません。
	 * "tlg6"32bpp の TLG6 です。アルファチャンネル(マスク)も保存します。
	 * "tlg624"24bpp の TLG6 です。アルファチャンネル(マスク)は保存されません。
	 * @param meta TLG 形式の場合、保存するタグ情報を辞書形式で指定します。その他の形式の場合は追加オプションを指定します(1.3.0以降)。指定可能なオプションはgetSaveOptionで取得可能です。
	 * @description name で指定したストレージ (ファイル) に、type で指定した画像形式でファイルを保存します。
	 * @see Bitmap.getSaveOption
	 */
	function save( name, type="bmp", meta=null);

	/**
	 * 画像の読み込み
	 *
	 * @param image 読み込む画像ストレージを指定します。
	 * @param colorkey 読み込む画像のカラーキー ( 透明色 ) を指定します。
	 * 0xRRGGBB 形式で色を指定すると、その色をカラーキーとします。
	 * clPalIdx に 任意のパレットインデックスを加算した数値を指定すると、そのパレットインデックスが透明色になります ( 256 色以下の画像の場合 )。
	 * clAdapt を指定すると、画像の一番上のラインにおいてもっとも多く使われている色が自動的に透明色になります。
	 * clAlphaMat に 0xRRGGBB形式の色を表す数値を加算したものを指定すると、画像がその色の上にαブレンド(ltAlphaの方式)を用いて重ね合わせられます。
	 * たとえば、(clAlphaMat + 0xffffff) を指定すると、読み込まれた画像が白い色の上に重ね合わせられます。
	 * 画像は全て不透明な画像となります( 画像は全て不透明となりますが、このモードではタグ情報はいっさい変更されないので注意してください )。
	 * @return タグ情報の辞書配列
	 * @description 画像を読み込みます。戻り値としてタグ情報(その画像のレイヤタイプや表示位置など、画像そのものに対する情報)の辞書配列が返ります。画像がタグ情報を持たない場合は null が返ります。現バージョンでは、タグ情報は PNG, TLG5/6 形式のみが持つことができます。取得可能な情報については、画像フォーマットコンバータ を参照してください。
	 */
	function load( image, colorkey=clNone);

	/**
	 * 画像の非同期読み込み
	 *
	 * @param image 読み込む画像ストレージを指定します。
	 * ここで指定するファイル名は拡張子を含んだものになることに注意してください。
	 * 拡張子がないとファイルが見つからずエラーとなります。
	 * @description 画像を非同期で読み込みます。
	 * 読込みの完了は Bitmap.onLoaded で受け取れます。
	 * 非同期読込み中か否かは Bitmap.loading で確認できます。
	 * 非同期読込み中は Bitmap.loading 以外のメンバへアクセスすると例外が発生します。
	 * Bitmap.onLoaded の説明も確認してください。
	 * @see Bitmap.onLoaded
	 * @see Bitmap.loading
	 * @see Layer.copyFromBitmapToMainImage
	 */
	function loadAsync( image);

	/**
	 * 画像情報の読み込み(1.3.0以降)
	 *
	 * @param image 読み込む画像ストレージを指定します。
	 * ここで指定するファイル名は拡張子を含んだものになることに注意してください。
	 * 拡張子がないとファイルが見つからずエラーとなります。
	 * @return 情報の辞書配列
	 * @description 画像情報のみを読み込みます。
	 * 画像の読み込みは行われないため、情報のみを得たい時は高速に読み込めます。
	 * 返される辞書のwidth, heightは必須で、その他の情報は画像形式に依存します。
	 */
	function loadHeader( image);

	/**
	 * 画像保存追加情報取得(1.3.0以降)
	 *
	 * @param type 画像形式を指定します。指定方法はsaveメソッドと同じ形式です。
	 * @return 追加情報の辞書配列
	 * @description 画像保存時に指定可能な追加情報を取得します。
	 * @see Bitmap.save
	 */
	function getSaveOption( type);

	/**
	 * 画像横幅
	 *
	 * @description 画像の横幅をピクセル単位で指定します。
	 * 値を設定することもできます。
	 * @see Bitmap.setSize
	 */
	 property width {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 画像縦幅
	 *
	 * @description 画像の縦幅をピクセル単位で指定します。
	 * 値を設定することもできます。
	 * @see Bitmap.setSize
	 */
	 property height {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * 画像バッファポインタ
	 *
	 * @description 画像 ( 色とマスク(不透明度)の情報を含む 32bpp のビットマップ ) の画像バッファ左上隅へのポインタを表します。
	 * このプロパティは、プラグインなどのために画像バッファへの直接のアクセスの手段を提供するためにあります。
	 * 整数型で返されますが、プラグインなどでは適切な型 ( const unsigned long * 等 ) にキャストして使ってください。
	 * このプロパティで得られたポインタには値を書き込まないでください。
	 * Bitmap.bufferForWrite で得られたポインタならば書き込むことができます。
	 * 画像のサイズは Bitmap.width と Bitmap.height プロパティが表しています。
	 * ポインタの計算方法は Bitmap.bufferPitch を参照してください。
	 * @see Bitmap.bufferForWrite
	 * @see Bitmap.bufferPitch
	 */
	 property buffer {
		 getter() { return value; }
	}
	/**
	 * 画像バッファポインタ(書き込み用)
	 *
	 * @description 画像 ( 色とマスク(不透明度)の情報を含む 32bpp のビットマップ ) の画像バッファ左上隅へのポインタを表します。
	 * このプロパティは、プラグインなどのために画像バッファへの直接のアクセスの手段を提供するためにあります。
	 * 整数型で返されますが、プラグインなどでは適切な型 ( unsigned long * 等 ) にキャストして使ってください。
	 * このプロパティで得られたポインタには Bitmap.buffer と異なり、値を書き込むことができます。
	 * 吉里吉里内部では全く同じ画像は複数のオブジェト間で共有しますが、このプロパティを参照するとその共有状態を解除します。
	 * 画像のサイズは Bitmap.width と Bitmap.height プロパティが表しています。
	 * ポインタの計算方法は Bitmap.bufferPitch を参照してください。
	 * @see Bitmap.buffer
	 * @see Bitmap.bufferPitch
	 */
	 property bufferForWrite {
		 getter() { return value; }
	}
	/**
	 * 画像バッファピッチ
	 *
	 * @description 画像 ( 色とマスク(不透明度)の情報を含む 32bpp のビットマップ ) の画像バッファのピッチ( 一つ下のスキャンラインまでのバイト数 ) を表します。
	 * このプロパティは、プラグインなどのために画像バッファへの直接のアクセスの手段を提供するためにあります。
	 * tjs_uint32 が 32bit の整数型、tjs_uint8 が 8bit (1byte) の整数型として、画像位置 (x, y) へのポインタは C 言語で書くと以下のように計算することができます。
	 * ( (tjs_uint32*)( (tjs_uint8*)buffer + y*bufferPitch )) + x
	 * このプロパティは、次のスキャンラインまでのピクセル数ではなく、バイト数を返すことに注意してください。
	 * この数値は画像横幅ぴったりに必要なバイト数よりも若干大きい場合があります。
	 * このプロパティは値が負になり得ますので注意してください。
	 * @see Bitmap.buffer
	 * @see Bitmap.bufferForWrite
	 */
	 property bufferPitch {
		 getter() { return value; }
	}
	/**
	 * 非同期読込み中確認
	 *
	 * @description 非同期読込み中かどうかを表します。
	 * この値が真の時非同期読込み中です。
	 * 非同期読込み中に他のメンバにアクセスすると例外が発生するので注意してください。
	 * @see Bitmap.buffer
	 * @see Bitmap.bufferPitch
	 */
	 property loading {
		 getter() { return value; }
	}
};
