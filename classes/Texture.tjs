/**
 * @description Texture class.
 * It almost corresponds to the texture on the hardware.
 *
 * Since the texture is invalidated by invalidating, it is recommended to explicitly call invalidate when it is no longer needed.
 */
class Texture {
	/**
	 * File read version constructor
	 * @param filename Image file name
	 * @param format Color information is grayscaled when color format (tcfRGBA or tcfAlpha), tcfAlpha is selected
	 * @param is9patch Whether to read 9patch information and use it for 9patch drawing
	 */
	function Texture( filename:string, format:int=tcfRGBA, is9patch:bool=false );

	/**
	 * Bitmap copy version constructor
	 * @param bitmap An instance of the Bitmap class that is the source of the texture
	 * @param format Color information is grayscaled when color format (tcfRGBA or tcfAlpha), tcfAlpha is selected
	 * @param is9patch Whether to read 9patch information and use it for 9patch drawing
	 */
	function Texture( bitmap:Bitmap, format:int=tcfRGBA, is9patch:bool=false );

	/**
	 * Sized constructor
	 * @description The content of the texture is uninitialized, so it contains dust.
	 * @param width Texture width
	 * @param height Texture height
	 * @param format Color format (tcfRGBA or tcfAlpha)
	 */
	function Texture( width:int, height:int, format:int=tcfRGBA );

	/**
	 * Mipmap generated constructor
	 * @param sizelist Specify the size to generate the mipmap by the combination of width and height in the array.
	 * @param filename Image file name
	 * @param type Specifies the reduction algorithm. Same as the type argument for ImageFunction.operateStretch or the type argument for Layer.operateStretch.
	 * @param typeopt Sharpness during 3D interpolation. It currently has no meaning with other interpolation methods.
	 */
	function Texture( sizelist:Array, filename:string, type=stFastAreaAvg, typeopt:real=-1.0 );

	/**
	 * Rectangle copy (position specified Rect version)
	 * @param dleft Copy destination left end
	 * @param dtop Top edge of copy destination
	 * @param src Bitmap class object
	 * @param srcRect src copy source rectangle
	 */
	function copyRect( dleft:int, dtop:int, src:Bitmap, srcRect:Rect );

	/**
	 * Rectangle copy (position designation)
	 * @param dleft Copy destination left end
	 * @param dtop Top edge of copy destination
	 * @param src Bitmap class object
	 * @param sleft Copy source left edge position
	 * @param stop Copy source top position
	 * @param swidth Copy source width
	 * @param sheight Copy source height
	 */
	function copyRect( dleft:int, dtop:int, src:Bitmap, sleft:int, stop:int, swidth:int, sheight:int );

	/**
	 * Rectangle copy (all copy)
	 * @description Copy the entire bitmap. If it sticks out, it will be clipped.
	 * @param src Bitmap class object
	 */
	function copyRect( src:Bitmap );

	/**
	 * Setting drawing standard size
	 * @description When drawing at the same size with Canvas.drawTexture, if nothing is specified, it will be drawn with the texture size, but if you set the width and height with this method, it will be drawn with the size set when drawing with this texture instance. It will be so.
	 * Enlargement / reduction etc. are also drawn based on this size.
	 * If you set it when the size of the internal image data and the size you normally draw are different, you can specify the enlargement ratio based on the size you want to display.
	 * @param width Display reference width
	 * @param height Display standard height
	 */
	function setDrawSize( width:int, height:int );

	/**
	 * Width (effective range)
	 * @description If pot is not specified, it is the same as memoryWidth.
	 */
	property width;
	/**
	 * Height (effective range)
	 * @description If pot is not specified, it is the same as memoryHeight.
	 */
	property height;

	/**
	 * Actual (on hardware) width
	 */
	property memoryWidth;
	/**
	 * Actual (on hardware) height
	 */
	property memoryHeight;

	/**
	 * Whether it is 8-bit color (alpha texture inside)
	 */
	property isGray;

	/**
	 * Whether the texture size is a power of 2
	 */
	property isPowerOfTwo;

	/**
	 * Native handle (environment dependent)
	 * @description Texture ID under OpenGL ES2 / 3 environment
	 */
	property nativeHandle;

	/**
	 * Interpolation method when scaling
	 */
	property stretchType;

	/**
	 * Horizontal lap mode
	 */
	property wrapModeHorizontal;
	/**
	 * Vertical lap mode
	 */
	property wrapModeVertical;

	/**
	 * 9patch margin
	 * @description When reading with is9patch, objects of Rect class can be accessed read-only.
	 * It is void if it is not specified or cannot be read.
	 */
	property margin9Patch;

	/**
	 * Nearest point method. Set to the stretchType property.
	 */
	const stNearest;
	/**
	 * Linear interpolation. Set to the stretchType property.
	 */
	const stLinear;

	/**
	 * repetition. Set to the wrapModeHorizontal / wrapModeVertical property.
	 */
	const wmRepeat;
	/**
	 * Stretching the edge color. Set to the wrapModeHorizontal / wrapModeVertical property. Must be this constant if it is not a power of 2 size (default).
	 */
	const wmClampToEdge;
	/**
	 * Mirror repeat. Set to the wrapModeHorizontal / wrapModeVertical property.
	 */
	const wmMirror;
};
