/**
 * @description Timer クラスは、一定時間ごとにイベントを発生するためのクラスです。
 */
class Timer {
	/**
	 * Timer オブジェクトの構築
	 *
	 * @param owner イベントの発生先を指定します。
	 * @param actionname owner で指定したイベントの発生先オブジェクトで、イベントを受け取るメソッド名を
	 * 				指定します。空文字列を指定すると owner はメソッドとみなされ、イベントの周期ごとに
	 * 				owner が直接呼ばれます。
	 * @description Timer クラスのオブジェクトを構築します。初期状態では interval プロパティは 1000、enabled プロパティは偽になっています。
	 */
	function Timer( owner, actionname="action");

	/**
	 * タイマー周期が来た
	 *
	 * @description タイマーの周期ごとに呼ばれます。
	 * 	
	 */
	event onTimer( );

	/**
	 * イベントの発生周期
	 *
	 * @description イベントの発生周期を表します。値を設定することもできます。単位は ms ( ミリ秒 ) で、指定された時間ごとにイベントが発生します。実数で発生周期を指定することもできます。現バージョンでは、1/65536ミリ秒精度で
	 * 		指定することができます (小数点以下の数値は、この精度に丸められます)。1/65536ミリ秒程度の精度があると言っても、実際にこの精度でイベントハンドラが呼び出される保証はありません。
	 * 		実際には、イベントが呼び出されるタイミングには3縲鰀10ms程度のぶれがあります。
	 * 		しかし、平均的・長期的にはこのプロパティで指定した周期でイベントが発生するように自動的に調整が行われます。
	 * 	
	 */
	 property interval {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * イベントの最大発生許容量
	 *
	 * @description どれだけのイベントを、一時期に発生させることができるかを指定します。値を設定することもできます。タイマの周期よりも長い処理が行われた時など、タイマイベントを処理しきれない場合があります。
	 * 		このとき、タイマはイベントをイベントキューには溜めますが、そのイベントキューに溜めるイベントの数には上限があります。
	 * 		このプロパティはその最大数を指定します。イベントを処理する段階になった場合、吉里吉里はキューに溜まった数のイベントを一時期に処理しようとします。1を指定すると、イベントキューには最大1個までしかイベントが溜まりません。0 を指定するとイベントキューに溜まるイベントの数に
	 * 		制限はなくなりますが、あまりにイベントが溜まりすぎると、フリーズしたようになる可能性があるので注意してください。デフォルトは 6 です。
	 */
	 property capacity {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * イベントを発生させるかどうか
	 *
	 * @description イベントを発生させるかどうかを表します。値を設定することもできます。真ならばイベントが発生します。偽ならばイベントは発生しません。
	 * 	
	 */
	 property enabled {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * モード
	 *
	 * @description 動作のモードを表します。値を設定することもできます。以下の値のいずれかを指定します。atmNormal    :  通常のイベント配信の優先度でイベントが配信されます。atmExclusive :  他の非同期イベントよりも優先されて配信されますatmAtIdle    :  アイドル状態 ( 他に配信するイベントが無くなったとき ) に配信されます。
	 * @see AsyncTrigger.mode
	 */
	 property mode {
		 getter() { return value; }
		 setter( value ) {}
	}
};
