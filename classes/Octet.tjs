/**
 * @description オクテット列は擬似的に Octet クラスのオブジェクトということになっていますが、Octet クラスは存在していませんし、実際に Octet クラスのオブジェクトというわけではありません ( ただし オクテット列に対して typeof 演算子を使うと "Octet" を返します )。
 * しかし オクテット列をオブジェクトと見立てて、いくつかのメソッドやプロパティが使用可能になっています。
 */
class Octet {
	/**
	 * オクテット列の長さ
	 * @description このプロパティへの値の代入はできません。
	 */
	property length;

	/**
	 * '数値' プロパティ
	 * @description 数値をプロパティとして間接指定すると、その位置にあるオクテットにアクセスできます。
	 * 結果はオクテットの数値で表されます。
	 * たとえば、oct がオクテット列を表す式だとすると、oct[0] は先頭のオクテットの値を表す数値になります。
	 * 数値がオクテット列よりも長い位置や、負の場合は例外が発生します。
	 * 
	 * 代入式を生成することはできません。
	 */
	property ［］;

	/**
	 * 引数で指定された文字列に従い、バイナリ(Octet)を配列(Array)化して返します
	 * @description 指定の文字列はテンプレートと呼びます。
	 * テンプレートは、型指定文字とその長さを並べたものです。
	 * 長さとして * が指定された時は残り全ての長さを表します。
	 * 長さが省略された場合は1として扱います。
	 * @param template テンプレート文字列
	 * テンプレート文字列には以下の文字が使用可能です。
	 * a : ASCII 文字列(ヌル文字が補完される)
	 * A : ASCII 文字列(スペースが補完される)
	 * b : 2進数文字列(下位ビットから上位ビットの順)
	 * B : 2進数文字列(上位ビットから下位ビットの順)
	 * c : 符号付き1バイト数値(-128 縲鰀 127)
	 * C : 符号無し1バイト数値(0縲鰀255)
	 * d : 倍精度浮動小数点値
	 * f : 単精度浮動小数点値
	 * h : 16進数文字列(low nybble first)
	 * H : 16進数文字列(high nybble first)
	 * i : 符号付きint数値(通常4バイト)
	 * I : 符号無しint数値(通常4バイト)
	 * l : 符号付きlong数値(通常4バイト)
	 * L : 符号無しlong数値(通常4バイト)
	 * n : 符号無しshort数値(ネットワークバイトオーダ)
	 * N : 符号無しlong数値(ネットワークバイトオーダ)
	 * s : 符号付きshort数値(通常2バイト)
	 * S : 符号無しshort数値(通常2バイト)
	 * v : 符号無しshort値(リトルエンディアン)
	 * V : 符号無しlong値(リトルエンディアン)
	 * x : 1バイト読み飛ばす
	 * X : 1バイト後退
	 * @ : 指定位置まで移動
	 * m : Base64 encode
	 */
	function unpack( template:string ):Array;
};

