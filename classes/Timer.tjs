/**
 * @description The Timer class is a class for raising an event at regular intervals.
 */
class Timer {
	/**
	 * Constructing a Timer object
	 *
	 * @param owner Specify where the event will occur.
	 * @param actionname Specifies the method name that receives the event in the event destination object specified by owner.
	 * If you specify an empty string, the owner is considered a method and the owner is called directly every cycle of the event.
	 * @description Build an object of the Timer class.
	 * Initially, the interval property is 1000 and the enabled property is false.
	 */
	function Timer( owner, actionname="action");

	/**
	 * The timer cycle has come
	 *
	 * @description Called every timer cycle.
	 * .
	 */
	event onTimer();

	/**
	 * Event occurrence cycle
	 *
	 * @description Represents the event occurrence cycle.
	 * You can also set the value.
	 * The unit is ms (milliseconds), and the event fires every specified time.
	 * You can also specify the generation cycle with a real number.
	 * In the current version, you can specify with a precision of 1/65536 milliseconds (numbers after the decimal point are rounded to this precision).
	 * Even if it has an accuracy of about 1/65536 milliseconds, there is no guarantee that the event handler will actually be called with this accuracy.
	 * Actually, there is a fluctuation of about 3 to 10 ms when the event is called.
	 * However, on average and in the long run, the event will be automatically adjusted to occur at the cycle specified by this property.
	 */
	 property interval {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Maximum event allowance
	 *
	 * @description Specifies how many events can be fired at one time.
	 * You can also set the value.
	 * It may not be possible to process the timer event, such as when processing is performed longer than the timer cycle.
	 * At this time, the timer stores events in the event queue, but there is an upper limit to the number of events that can be stored in the event queue.
	 * This property specifies the maximum number.
	 * When it comes time to process the events, Kirikiri tries to process the number of events in the queue at one time.
	 * If you specify 1, only one event can be stored in the event queue.
	 * Specifying 0 does not limit the number of events that can be stored in the event queue, but be aware that if too many events are stored, it may appear to freeze.
	 * The default is 6.
	 */
	 property capacity {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Whether to raise an event
	 *
	 * @description Indicates whether to raise an event.
	 * You can also set the value.
	 * If true, the event will occur.
	 * If false, the event will not occur.
	 */
	 property enabled {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * mode
	 *
	 * @description Indicates the mode of operation.
	 * You can also set the value.
	 * Specify one of the following values.
	 *
	 * + atmNormal    :   Events are delivered with normal event delivery priority.
	 * + atmExclusive :   Delivered in preference to other asynchronous events
	 * + atmAtIdle    :   It will be delivered in the idle state (when there are no other events to be delivered).
	 *
	 * @see AsyncTrigger.mode
	 */
	 property mode {
		 getter() { return value; }
		 setter( value ) {}
	}
};
