/**
 * @description BitmapLayerTreeOwner クラスは、レイヤーツリーを保持し、描画結果を Bitmap クラスで取得できるクラスです。
 * Layer クラスのコンストラクタの第一引数に window の代わりに渡すことで、それら Layer の描画結果を Bitmap クラスとして画像で取得できます。
 * 描画結果の Bitmap を Texture に転送することで Layer 描画系を Canvas で使用できるようになります。
 */
class BitmapLayerTreeOwner {
	/**
	 * BitmapLayerTreeOwner オブジェクトの構築
	 *
	 * @description BitmapLayerTreeOwner クラスのオブジェクトを構築します。
	 */
	function BitmapLayerTreeOwner( );
	/**
	 * クリックをレイヤに通知します(使用非推奨)
	 * @param x クリックされた位置の x 座標 ( クライアント座標 )
	 * @param y クリックされた位置の y 座標 ( クライアント座標 )
	 */
	function fireClick( x, y );
	/**
	 * ダブルクリックをレイヤに通知します(使用非推奨)
	 * @param x ダブルクリックされた位置の x 座標 ( クライアント座標 )
	 * @param y ダブルクリックされた位置の y 座標 ( クライアント座標 )
	 */
	function fireDoubleClick( x, y );
	/**
	 * マウス押下をレイヤに通知します
	 * @param x マウスのボタンが押された位置の x 座標 ( クライアント座標 )
	 * @param y マウスのボタンが押された位置の y 座標 ( クライアント座標 )
	 * @param mb 押されたマウスボタン
	 * @param flag マウスボタンが押されたときに同時に押されていたシフト系のキーの状態
	 */
	function fireMouseDown( x, y, mb, flags );
	/**
	 * マウス押下をレイヤに通知します
	 * @param x マウスのボタンが離された位置の x 座標 ( クライアント座標 )
	 * @param y マウスのボタンが離された位置の y 座標 ( クライアント座標 )
	 * @param mb 離されたマウスボタン
	 * @param flags マウスボタンが離された時に同時に押されていたシフト系のキーの状態
	 */
	function fireMouseUp( x, y, mb, flags );
	/**
	 * マウス移動をレイヤに通知します
	 * @param x マウスが移動した位置の x 座標 ( クライアント座標 )
	 * @param y マウスが移動した位置の y 座標 ( クライアント座標 )
	 * @param flags マウスが移動していた時に同時に押されていたシフト系のキーやマウスのボタンの状態
	 */
	function fireMouseMove( x, y, flags );
	/**
	 * マウスのホイール回転をレイヤに通知します
	 * @param shift マウスが移動していた時に同時に押されていたシフト系のキーやマウスのボタンの状態
	 * @param delta ホイールの回転角
	 * @param x ホイールが回転した位置の x 座標 ( クライアント座標 )
	 * @param y ホイールが回転した位置の y 座標 ( クライアント座標 )
	 */
	function fireMouseWheel( shift, delta, x, y );
	/**
	 * マウスキャプチャ解除をレイヤに通知します
	 */
	function fireReleaseCapture();
	/**
	 * マウスがWindow外に出たことをレイヤに通知します
	 */
	function fireMouseOutOfWindow();
	/**
	 * タッチされたことをレイヤに通知します
	 * @param x タッチされた位置の x 座標 ( クライアント座標 )
	 * @param y タッチされた位置の y 座標 ( クライアント座標 )
	 * @param cx 指が接触している横方向ピクセル数
	 * @param cy 指が接触している縦方向ピクセル数
	 * @param id タッチID
	 */
	function fireTouchDown( x, y, cx, cy, id );
	/**
	 * タッチが離されたことをレイヤに通知します
	 * @param x 離された位置の x 座標 ( クライアント座標 )
	 * @param y 離された位置の y 座標 ( クライアント座標 )
	 * @param cx 指が接触している横方向ピクセル数
	 * @param cy 指が接触している縦方向ピクセル数
	 * @param id タッチID
	 */
	function fireTouchUp( x, y, cx, cy, id );
	/**
	 * タッチが移動されたことをレイヤに通知します
	 * @param x タッチ位置の x 座標 ( クライアント座標 )
	 * @param y タッチ位置の y 座標 ( クライアント座標 )
	 * @param cx 指が接触している横方向ピクセル数
	 * @param cy 指が接触している縦方向ピクセル数
	 * @param id タッチID
	 */
	function fireTouchMove( x, y, cx, cy, id );
	/**
	 * 拡大操作されたことをレイヤに通知します
	 * @param startdist マルチタッチが開始された時のピクセル距離
	 * @param curdist イベント発生時のタッチのピクセル距離
	 * @param cx 中心位置の x 座標 ( クライアント座標 )
	 * @param cy 中心位置の y 座標 ( クライアント座標 )
	 * @param flag マルチタッチ状態フラグです。
	 */
	function fireTouchScaling( startdist, curdist, cx, cy, flag );
	/**
	 * 回転操作されたことをレイヤに通知します
	 * @param startangle マルチタッチが開始された時のラジアン角度
	 * @param curangle イベント発生時のタッチのラジアン角度
	 * @param dist イベント発生時のタッチのピクセル距離
	 * @param cx 中心位置の x 座標 ( クライアント座標 )
	 * @param cy 中心位置の y 座標 ( クライアント座標 )
	 * @param flag マルチタッチ状態フラグ
	 */
	function fireTouchRotate( startangle, curangle, dist, cx, cy, flag );
	/**
	 * マルチタッチ状態変化をレイヤに通知します
	 */
	function fireMultiTouch();
	/**
	 * キーが押されたことをレイヤに通知します
	 * @param key 押されたキーの仮想キーコード
	 * @param shift キーが押された時に同時に押されていたシフト系のキーやマウスのボタンの状態
	 */
	function fireKeyDown( key, shift );
	/**
	 * キーが離されたことをレイヤに通知します
	 * @param key 離されたキーの仮想キーコード
	 * @param shift キーが離された時に同時に押されていたシフト系のキーやマウスのボタンの状態
	 */
	function fireKeyUp( key, shift );
	/**
	 * 文字が入力されたことをレイヤに通知します
	 * @param key 文字
	 */
	function fireKeyPress( key);
	/**
	 * 画面が回転されたことをレイヤに通知します
	 * @param orientation 画面の向き
	 * @param rotate 角度
	 * @param bpp  bits per pixel
	 * @param hresolution 画面の幅
	 * @param vresolution 画面の高さ
	 */
	function fireDisplayRotate( orientation, rotate, bpp, hresolution, vresolution );
	/**
	 * 必要なら1秒間隔で呼び出します。
	 * @description 現在のレイヤのマウス位置確認とヒントの更新、カーソルタイプ、レイヤEnter/Leaveが再チェックされます。
	 * 内部的にはマウスカーソル移動0呼び出しが行われています。
	 */
	function fireRecheckInputState();

	/**
	 * 更新矩形情報をクリアする
	 */
	function clearDirtyRect();

	/**
	 * Layer からカーソル設定が呼び出された
	 * @description 必要であればカーソルの変更を行う。
	 */
	event onSetMouseCursor( cursor );
	/**
	 * Layer からカーソル位置取得が呼び出された
	 * @description 必要であればカーソル位置を返す
	 */
	event onGetCursorPos( x, y );
	/**
	 * Layer からカーソル位置設定が呼び出された
	 * @description 必要であればカーソル位置を設定する
	 */
	event onSetCursorPos( x, y );
	/**
	 * Layer からマウスキャプチャ解除が呼び出された
	 * @description 必要であればマウスキャプチャ解除を行う
	 */
	event onReleaseMouseCapture();
	/**
	 * Layer からヒントテキスト設定が呼び出された
	 * @description 必要であればヒントテキスト設定を行う
	 */
	event onSetHintText( sender, hint );
	/**
	 * プライマリレイヤーのサイズが変更された
	 */
	event onResizeLayer( w, h );
	/**
	 * Layer 画像が更新された
	 */
	event onChangeLayerImage();
	/**
	 * Layer から注視位置の指定が呼び出された
	 */
	event onSetAttentionPoint( layer, x, y );
	/**
	 * Layer から注視位置の指定解除された
	 */
	event onDisableAttentionPoint();
	/**
	 * IMEモードが設定された
	 */
	event onSetImeMode( mode );
	/**
	 * IMEモードがリセットされた
	 */
	event onResetImeMode();

	/** 幅(readonly) */
	property width;
	/** 高さ(readonly) */
	property height;
	/** 描画されているBitmapクラスのインスタンス(readonly) */
	proporty bitmap;
	/** 更新領域、Rectクラス。
	 * @description isUpdatedがtrueの時のみ内容有効(readonly)
	 */
	proporty dirtyRect;
	/** 更新の有無(readonly) */
	proporty isUpdated;

	/** LTOインターフェイス、内部使用(readonly) */
	property layerTreeOwnerInterface;

	/** フォーカスのあるレイヤ */
	propoerty focusedLayer;

	/** プライマリレイヤ(readonly) */
	property primaryLayer;
};
