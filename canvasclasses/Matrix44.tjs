/**
 * 4x4行列
 * OpenGLのため列優先行列であることに注意(列優先の方が演算量的に有利)。
 * DirectXなどから見ると転置されているように感じる(シェーダのHLSLでは列優先で同じ)。
 */
class Matrix44 {

	functiont Matrix44();  単位行列で生成
	functiont Matrix44(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);

	/**
	 * マトリックス設定
	 */
	function set(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
	function set(array);	// 1次元配列からコピー
	function set(matrix);	// matrixからコピー

	// 単位行列化
	function reset();

	/**
	 * 移動量設定
	 * 行列のXYZ移動位置に値を設定します。
	 * 設定のみで現在の行列との演算などは行われません。
	 * @param x 設定するX座標値
	 * @param y 設定するY座標値
	 * @param z 設定するZ座標値
	 */
	function setTranslate( x:real, y:real, z:real=0.0 );

	/**
	 * 拡大率設定
	 * 行列のXYZ拡大位置に値を設定します。
	 * 設定のみで現在の行列との演算などは行われません。
	 * @param x 設定するX軸拡大率
	 * @param y 設定するY軸拡大率
	 * @param z 設定するZ軸拡大率
	 */
	function setScale( x:real, y:real, z=1.0 );

	/**
	 * 回転量設定
	 * Z軸回転を設定します。
	 * 設定のみで現在の行列との演算などは行われません。
	 * @param degree 回転角度
	 */
	function setRotateZ( degree:real );

	/**
	 * 回転量設定
	 * 設定のみで現在の行列との演算などは行われません。
	 * 回転軸は正規化推奨
	 * @param degree 回転角度
	 * @param x 回転軸X
	 * @param y 回転軸Y
	 * @param z 回転軸Z
	 */
	function setRotate( degree:real, x:real, y:real, z:real );

	/**
	 * 自身に行列を加算します
	 * @param matrix 加算する行列
	 */
	function add( matrix:Matrix44 );

	/**
	 * 自身から行列を減算します
	 * @param matrix 減算する行列
	 */
	function sub( matrix:Matrix44 );

	/**
	 * 自身に行列を乗算します
	 * @param matrix 乗算する行列
	 */
	function mul( matrix:Matrix44 );

	/**
	 * 自身から行列を除算します
	 * @param matrix 除算する行列
	 */
	function div( matrix:Matrix44 );

	/**
	 * 行列を移動します
	 * @param x 移動するX座標値
	 * @param y 移動するY座標値
	 * @param z 移動するZ座標値
	 */
	function translate( x:real, y:real, z:real=0.0 );

	/**
	 * 行列を回転します
	 * @param degree 回転角度
	 * @param x 回転軸X
	 * @param y 回転軸Y
	 * @param z 回転軸Z
	 */
	function rotate( degree:real, x:real, y:real, z:real );

	/**
	 * 行列を拡大縮小します
	 * @param x X軸拡大率
	 * @param y Y軸拡大率
	 * @param z Z軸拡大率
	 */
	function scale( x:real, y:real, z=1.0 );

	/**
	 * 平行投影変換行列を設定
	 * @param left 左端
	 * @param right 右端
	 * @param bottom 下端
	 * @param top 上端
	 * @param znear 全面
	 * @param zfar 背面
	 */
	function ortho( left, right, bottom, top, znear, zfar );

	/**
	 * 平行投影変換行列を設定
	 * @param left 左端
	 * @param right 右端
	 * @param bottom 下端
	 * @param top 上端
	 */
	function ortho( left, right, bottom, top );

	/**
	 * 透視投影変換行列を設定
	 * @param left 左端
	 * @param right 右端
	 * @param bottom 下端
	 * @param top 上端
	 * @param znear 全面
	 * @param zfar 背面
	 */
	function frustum( left, right, bottom, top, znear, zfar );

	/**
	 * 射影変換行列を設定
	 * @param fovy 視野角
	 * @param aspect アスペクト比
	 * @param znear 全面
	 * @param zfar 背面
	 */
	function perspective( fovy, aspect, znear, zfar );

	/**
	 * 射影変換行列を設定
	 * @param fovy 視野角
	 * @param width 幅
	 * @param height 高さ
	 * @param znear 全面
	 * @param zfar 背面
	 */
	function perspectiveFov( fovy, width, height, znear, zfar );

	/**
	 * 各種行列を用いた座標変換
	 * @param model モデル行列
	 * @param proj プロジェクション行列
	 * @param viewport ビューポート
	 * @param x X座標値(in/out)
	 * @param y Y座標値(in/out)
	 * @param z Z座標値(in/out)
	 */
	static function project( model:Matrix44, proj:Matrix44, viewport:Rect, x, y, z );

	property array;	// 1次元配列で受け取る(r)

	property m11;
	property m12;
	property m13;
	property m14;
	property m21;
	property m22;
	property m23;
	property m24;
	property m31;
	property m32;
	property m33;
	property m34;
	property m41;
	property m42;
	property m43;
	property m44;
};
