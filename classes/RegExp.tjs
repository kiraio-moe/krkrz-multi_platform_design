/**
 * @description The RegExp class is a class that handles regular expression patterns.
 * You can specify a perl-compatible pattern for the regular expression pattern.
 * It's in JavaScript's RegExp class, but it's not compatible.
 *
 * # Copyright notice
 * K.Kosako's demon car is used to implement the regular expression function.
 * Thanks to him for publishing a useful library.
 *
 * #Regular expression pattern
 * You can specify a regular expression pattern in the part enclosed by / and /.
 * See Tokens.
 */
class RegExp {
	/**
	 * constructor
	 * @param pattern Pattern string
	 * @param flag Flag string
	 * @description The pattern string is a regular expression pattern.
	 * Note that the \ specified in the pattern is written as \\ when writing in the string immediate value.
	 * The flag string is a combination of g i characters.
	 * g is the global search flag.
	 * With this flag, the match, exec, and replace methods process all parts of the string that match the pattern.
	 * The i flag is not case sensitive.
	 */
	function RegExp( pattern:string, flag:string=null );

	/**
	 * Set a new regular expression pattern on the regular expression object
	 * @param pattern Pattern string
	 * @param flag Flag string
	 */
	function compile( pattern:string, flag:string=null );

	/**
	 * Returns whether the string specified in the argument matches the pattern
	 * @param text Judgment character string
	 * @return If it matches the pattern, it returns true, and if it does not match, it returns false.
	 * @description This method updates the value of each property of this object.
	 */
	function test( text:string ):bool;

	/**
	 * Regular expression pattern matching is performed on the character string specified in the argument, and an array containing the matching result is returned.
	 * @param text String
	 * @return If the pattern does not match, the number of elements in the array will be 0.
	 * If there is a match, element 0 (the first element) contains the entire matched part, and subsequent elements contain each matching part (the part specified by () in the regular expression pattern).
	 * @description This method updates the value of each property of this object.
	 */
	function exec( text:string ):Array;

	/**
	 * Regular expression pattern matching is performed on the character string specified in the argument, and an array containing the matching result is returned.
	 * @description It is the same as the exec method, except that it does not update the value of the property of this object.
	 * @param text String
	 * @return If the pattern does not match, the number of elements in the array will be 0.
	 * If there is a match, element 0 (the first element) contains the entire matched part, and subsequent elements contain each matching part (the part specified by () in the regular expression pattern).
	 * @see RegExt.exec
	 */
	function match( text:string ):Array;

	/**
	 * Replaces a string and returns the string after the replacement
	 * @param text Target character string
	 * @param replace Replacement string
	 * @return  Matches the target character string, replaces the matched part with the replacement character string, and returns the character string after the replacement.
	 * @description If you pass a function as the replacement string instead of a string, that function will be called for the replacement operation.
	 * The function takes one argument and is passed an array object that represents the matched part of the target string (see the exec method for this array).
	 * The matched part in the target string is replaced with the string returned by the function.
	 * This method ignores the start property.
	 */
	function replace( text:string, replace:string ):string;

	/**
	 * Split the string
	 * @param text Target character string
	 * @param reserved Reservation
	 * @param ignore Whether to ignore empty elements
	 * @return Returns an array object that contains the result of splitting the string.
	 * @see Array.split
	 */
	function split( text:string, reserved, igonre:bool=false ):Array;

	/**
 	 * A read-only property that represents an array containing each matched part
 	 * @description If the pattern does not match, the number of elements in the array will be 0.
 	 * If there is a match, element 0 (the first element) contains the entire matched part, and subsequent elements contain each matching part (the part specified by () in the regular expression pattern).
 	 */
	property matches;

	/**
	 * It is a property that represents the search start position of the character string.
	 * @description You can also set the value.
	 */
	property start;

	/**
	 * A read-only property that represents the position of the first character of the matched part.
	 * @description Since 0 represents the beginning, it will be 0 if it is the first character of the matching string.
	 */
	property index;

	/**
	 * A read-only property that represents the position of the character next to the last character in the matched part.
	 * @description 0 represents the beginning
	 */
	property lastIndex;

	/**
	 * A read-only property that represents the string to be matched.
	 */
	property input;

	/**
	 * This is a read-only property that represents the character string to the left of the matched part of the matching target character string.
	 */
	property leftContext;

	/**
	 * This is a read-only property that represents the character string to the right of the matched part of the matching target character string.
	 */
	property rightContext;

	/**
	 * Represents the matching target string
	 * @description Same as matches [0].
	 */
	property lastMatch;

	/**
	 * Returns the last part of each matched part
	 * @description Same as matches [matches.count-1].
	 */
	property lastParen;

	/**
	 * The last instance of the RegExp class where the test or exec method was executed
	 * @description Example:
	 * ```
	 * if(/pat(\d+)/.test(target)) { return RegExp.last.matches[1]; }
	 * ```
	 *
	 */
	property last;
};

