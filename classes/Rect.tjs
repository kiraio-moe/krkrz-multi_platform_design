/**
 * @description The Rect class is a class that holds rectangle information.
 */
class Rect {
	/**
	 * Building a Rect object
	 *
	 * @description Build an object of class Rect.
	 */
	function Rect( );

	/**
	 * Building a Rect object
	 *
	 * @param left Specify the left end.
	 * @param top Specify the top edge.
	 * @param right Specify the right end.
	 * @param bottom Specify the bottom edge.
	 * @description Builds an object of class Rect with the specified size.
	 */
	function Rect( left, top, right, bottom);

	/**
	 * Building a Rect object
	 *
	 * @param src Specify the Rect object.
	 * @description Build an object of class Rect from a Rect object.
	 */
	function Rect( src);

	/**
	 * Rectangle size setting
	 *
	 * @param width Specifies the width of the rectangle.
	 * This value can also be obtained and set with the Rect.width property.
	 * @param height Specifies the vertical width of the rectangle.
	 * This value can also be obtained and set with the Rect.height property.
	 * @description Specify the rectangle size.
	 */
	function setSize( width, height);

	/**
	 * Rectangle position setting
	 *
	 * @param x Specifies the X coordinate value of the rectangle.
	 * This value can also be obtained and set with the Rect.left property.
	 * @param y Specifies the Y coordinate value of the rectangle.
	 * This value can also be obtained and set with the Rect.topt property.
	 * @description Set the rectangular position.
	 */
	function setOffset( x, y);

	/**
	 * Rectangle position setting
	 *
	 * @param x Specifies the amount of horizontal movement of the rectangle.
	 * @param y Specifies the amount of vertical movement of the rectangle.
	 * @description Move the rectangular position.
	 * Moves the rectangle by the specified x, y values.
	 */
	function addOffset( x, y);

	/**
	 * Clear rectangle information
	 *
	 * @description Clears each position information of the rectangle to zero.
	 */
	function clear( );

	/**
	 * Rectangle coordinate settings
	 *
	 * @param left Specify the left edge.
	 * @param top Specify the top edge.
	 * @param right Specify the right end.
	 * @param bottom Specify the bottom edge.
	 * @description Sets the rectangle to the specified size.
	 */
	function set( left, top, right, bottom);

	/**
	 * Whether there is a rectangle inside
	 *
	 * @return Presence or absence of area
	 * @description Check if the rectangle has width and height.
	 * If either one is less than or equal to 0, true is returned.
	 */
	function isEmpty( );

	/**
	 * Rectangle clipping
	 *
	 * @param r Specifies the rectangular object to clip.
	 * @return With or without clipping
	 * @description Clips the rectangle to the specified rectangle.
	 * Clipping will only occur if the rectangle is not empty.
	 * If it becomes empty, false is returned and clipping is not performed.
	 * @see Rect.isEmpty
	 */
	function clip( r);

	/**
	 * Rectangle composition
	 *
	 * @param r Specifies the rectangular object to combine.
	 * @return Whether or not synthesis is performed
	 * @description Extends the rectangle with the specified rectangle object.
	 * The value of the target rectangle is the value that is larger in the direction in which the rectangle size expands with the quadrilateral value of the specified rectangle object.
	 * Executed only if the target rectangle is not empty, not if it is empty, and returns false.
	 * @see Rect.isEmpty
	 */
	function union( r);

	/**
	 * Rectangle intersection judgment
	 *
	 * @param r Specifies a rectangular object to determine intersection.
	 * @return With or without intersection
	 * @description Determines if it intersects the specified rectangular object.
	 * Returns true if it intersects.
	 */
	function intersects( r);

	/**
	 * Rectangle inclusion judgment
	 *
	 * @param r Specify the rectangular object to be included.
	 * @return With or without inclusion
	 * @description Determines if the specified rectangular object is included.
	 * If included, true is returned.
	 * If even one side is outside, it is judged that it is not included.
	 */
	function included( r);

	/**
	 * Rectangle inclusion judgment
	 *
	 * @param x Specify the X-axis coordinate value to be judged.
	 * @param y Specify the Y-axis coordinate value to be judged.
	 * @return With or without inclusion
	 * @description Determines if the specified position is included.
	 * If included, true is returned.
	 * Right and bottom are judged in the range not included.
	 */
	function includedPos( x, y);

	/**
	 * Same judgment
	 *
	 * @param r Specifies the rectangular object to judge.
	 * @return Whether they are the same
	 * @description Determines if the rectangles are the same.
	 * If they are the same, true is returned.
	 * The comparison is made with four-sided values.
	 */
	function equal( r);

	/**
	 * Rectangle inclusion judgment
	 *
	 * Right and bottom are judged in the range not included (-1).
	 * @param x X coordinate value
	 * @param y Y coordinate value
	 * @param matrix Transformation matrix
	 * @return true: Included / false: Not included
	 */
	function includedPos( x:real, y:real, matrix:Matrix32 ):boolean;

	/**
	 * Rectangle width
	 *
	 * @description Specifies the width of the rectangle.
	 * You can also set the value.
	 * @see Rect.setSize
	 */
	 property width {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Rectangle height
	 *
	 * @description Specifies the vertical width of the rectangle.
	 * You can also set the value.
	 * @see Rect.setSize
	 */
	 property height {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Left edge of rectangle
	 *
	 * @description Specifies the left edge of the rectangle.
	 * You can also set the value.
	 * @see Rect.setOffset
	 */
	 property left {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Top of rectangle
	 *
	 * @description Specifies the top edge of the rectangle.
	 * You can also set the value.
	 * @see Rect.setOffset
	 */
	 property top {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Right edge of rectangle
	 *
	 * @description Specifies the right edge of the rectangle.
	 * You can also set the value.
	 */
	 property right {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Bottom edge of rectangle
	 *
	 * @description Specifies the bottom edge of the rectangle.
	 * You can also set the value.
	 */
	 property bottom {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * Rectangle buffer pointer
	 *
	 * @description Represents a pointer to a rectangular coordinate array.
	 * This property is there to provide a means of direct access to the coordinate array buffer for plugins etc.
	 * It is returned as an integer type, but for plugins etc., cast it to an appropriate type (int [4] etc.) and use it.
	 */
	 property nativeArray {
		 getter() { return value; }
	}
};
