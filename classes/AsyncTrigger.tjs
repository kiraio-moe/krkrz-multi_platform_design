/**
 * @description The AsyncTrigger class is a class for generating an event at the timing of event distribution immediately after control returns to Kirikiri.
 * This feature is called an asynchronous trigger.
 * In a script that takes an event-driven programming model like Kirikiri, processing that cannot be executed in the event handler (for example, trying to invalidate the object that originated the event in the event handler) is performed for that event. This is convenient when you want to do it outside the handler.
 */
class AsyncTrigger {
	/**
	 * Building an AsyncTrigger object
	 *
	 * @param owner Specify where the event will occur.
	 * @param actionname Specifies the method name that receives the event in the event destination object specified by owner.
	 * If you specify an empty string, the owner is considered a method and the owner is called directly each time an event occurs.
	 * @description Build an object of class AsyncTrigger.
	 */
	function AsyncTrigger( owner, actionname="action");

	/**
	 * When firing
	 *
	 * @description Occurs after pulling a trigger with the AsyncTrigger.trigger method.
	 */
	event onFire( );

	/**
	 * Pull the trigger
	 *
	 * @description Raise an event.
	 * After calling this method, control returns to Kirikiri's body, and when it's time to deliver the accumulated asynchronous events, he fires the AsyncTrigger.onFire event.
	 */
	function trigger( );

	/**
	 * Trigger cancellation
	 *
	 * @description Cancels the trigger pulled by the AsyncTrigger.trigger method. You can cancel at any time before firing.
	 */
	function cancel( );

	/**
	 * Whether to cache events
	 *
	 * @description Indicates whether to cache the event.
	 * You can also set the value.
	 * If you specify true, no matter how many times you call the AsyncTrigger.trigger method before firing, it will fire only once.
	 * If you specify false, it will be fired as many times as you called before firing.
	 */
	 property cached {
		 getter() { return value; }
		 setter( value ) {}
	}
	/**
	 * mode
	 *
	 * @description Indicates the mode of operation.
	 * You can also set the value.
	 * Specify one of the following values.
	 * atmNormal: Fired during normal event delivery.
	 * atmExclusive: Fired in preference to other asynchronous events
	 * atmAtIdle: Fired when idle (when there are no more events to deliver).
	 * When the trigger is pulled at the same time, the order of firing is atmExclusive, atmNormal, atmIdle.
	 * If multiple triggers in the same mode are pulled, they will fire in the order in which the triggers are pulled.
	 * @see Timer.mode
	 */
	 property mode {
		 getter() { return value; }
		 setter( value ) {}
	}
};
