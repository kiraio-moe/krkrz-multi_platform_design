/**
 * @description The octet column is supposed to be an object of the Octet class in a pseudo manner, but the Octet class doesn't exist and it's not really an object of the Octet class (although we use the typeof operator on the octet column). And "Octet").
 * However, the octet column is considered an object, and some methods and properties are available.
 */
class Octet {
	/**
	 * Octet row length
	 * @description You cannot assign a value to this property.
	 */
	property length;

	/**
	 * 'Numeric' property
	 * @description If you indirectly specify a number as a property, you can access the octet at that location.
	 * The result is expressed as an octet number.
	 * For example, if oct is an expression that represents a column of octets, then oct [0] is a number that represents the value of the first octet.
	 * An exception will be thrown if the number is longer than the octet column or if it is negative.
	 * 
	 * Substitution expressions cannot be generated.
	 */
	property ［］;

	/**
	 * Returns the binary (Octet) as an array (Array) according to the character string specified by the argument.
	 * @description The specified string is called a template.
	 * A template is a list of typed characters and their lengths.
	 * When * is specified as the length, it represents all the remaining lengths.
	 * If the length is omitted, it is treated as 1.
	 * @param template Template string
	 * The following characters can be used in the template string.
	 *
	 * + a : ASCII string (null-terminated)
	 * + A : ASCII string (spaces are completed)
	 * + b : Binary string (from low-order bit to high-order bit)
	 * + B : Binary string (from high-order bit to low-order bit)
	 * + c : Signed 1-byte number (-128~127)
	 * + C : Unsigned 1-byte number (0~255)
	 * + d : Double precision floating point value
	 * + f : Single precision floating point value
	 * + h : Hexagonal string (low nybble first)
	 * + H : Hexic string (high nybble first)
	 * + i : Signed int number (usually 4 bytes)
	 * + I : Unsigned int number (usually 4 bytes)
	 * + l : Signed long number (usually 4 bytes)
	 * + L : Unsigned long number (usually 4 bytes)
	 * + n : Unsigned short number (network byte order)
	 * + N : Unsigned long number (network byte order)
	 * + s : Signed short number (usually 2 bytes)
	 * + S : Unsigned short number (usually 2 bytes)
	 * + v : Unsigned short value (little endian)
	 * + V : Unsigned long value (little endian)
	 * + x : Skip 1 byte
	 * + X : 1 byte backward
	 * + @ : Move to specified position
	 * + m : Base64 encode
	 *
	 */
	function unpack( template:string ):Array;
};

