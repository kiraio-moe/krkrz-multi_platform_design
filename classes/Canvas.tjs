/**
 * @description Canvasは描画機能を提供するクラスです。
 * Windowを生成すると、プロパティcanvasが自動的に作られます。
 * 使用する時は、このcanvasプロパティを使用します。
 */
class Canvas {
	// function Canvas()

	/**
     * クリア色指定・描画処理前の画面クリア色
     */
	property clearColor;

	
	/**
	 * 描画領域全体をクリア
	 * @param argb クリア色(未指定時はclearColorプロパティでクリアされる)
	 */
	function clear(argb:int);

	/**
	 * 現在の描画内容全体をBitmap/Texture/Offscreenにキャプチャ
	 * @description ビットマップのサイズはスクリーンサイズに補正
	 * Texture/Offscreenの場合は変更されない
	 * @param dest キャプチャ先Bitmap/Texture/Offscreen
	 * @param front front bufferからのキャプチャかback bufferからのキャプチャかの指定。trueでfront、falseでback
	 */
	function capture(dest,front:bool=true);

	/**
	 * 描画ターゲット指定
	 * @description Offscreenクラスを指定可能。null/void指定で直接描画に。
	 */
	property renderTarget;

	/**
	 * 描画の合成モード指定
	 * @description bmDisable, bmOpaque, bmAlpha, bmAdd, bmAddWithAlpha が指定可能。
	 * ここにないブレンド方法が必要であればシェーダーを記述する。
	 */
	property blendMode;

	/** 描画マトリックス指定
	 * @description (Matrix32 クラス)
	 */
	property matrix;

	/**
	 * matrix と clip の状態を保存する(スタック)
	 */
	function save();

	/**
	 * matrix と clip の状態を復元する(スタック)
	 */
	function restore();

	/**
	 * 色での塗りつぶし
	 * @description XY座標はmatrixで指定する。
	 * @param width 塗りつぶし範囲幅
	 * @param height 塗りつぶし範囲高さ
	 * @param colors 4頂点の頂点カラーARGB。単独数値なら単色、配列なら4頂点個別指定
	 * @param shader 塗りつぶしシェーダー。nullの時defaultFillShaderで塗りつぶされる
	 */
	function fill( width:int, height:int, colors=0xffffffff, shader=null );

	/**
	 * メッシュ描画
	 * @description メッシュ(VertexBinder:頂点情報)は、呼び出し前にshaderに関連付け(プロパティで設定)しておく。
	 * テクスチャ情報も同様に関連付けしておく。
	 * 呼出し後shaderに関連付けた情報は解除(=void)する。
	 * @param shader テクスチャや頂点情報まで関連付けられたシェーダーを指定する
	 * @param count 描画する頂点数
	 * @param primitiveType トライアングルなどの指定
	 * @param offset 頂点配列の中で描画開始するオフセット
	 */
 	function drawMesh( shader:ShaderProgram, count:int, primitiveType:int=VertexBuffer.ptTriangles, offset:int=0 );

 	/**
 	 * メッシュ描画のインデックスバッファ使用版
	 * @description メッシュ(VertexBinder:頂点情報)は、呼び出し前にshaderに関連付け(プロパティで設定)しておく。
	 * テクスチャ情報も同様に関連付けしておく。
	 * 呼出し後shaderに関連付けた情報は解除(=void)する。
	 * @param shader テクスチャや頂点情報まで関連付けられたシェーダーを指定する
	 * @param index インデックスバッファを指定する
	 * @param count 描画するインデックス数
	 * @param primitiveType トライアングルなどの指定
 	 */
 	function drawMesh( shader:ShaderProgram, index:VertexBinder, count:int, primitiveType:int=VertexBuffer.ptTriangles );

	/**
	 * テクスチャを描画する。
	 * @description テクスチャのみを指定した場合はdefaultShaderで描画される。
	 * 位置や拡大縮小、回転は matrix で指定する。
	 * テクスチャはTextureクラスだけでなく、Offscreenクラスを指定しても問題ない。
	 * Offscreenクラスを指定する場合は、renderTargetからそのOffscreenクラスは外されていることが前提(循環しないように)。
	 * @param texture 描画に使用するテクスチャを指定する
	 * @param texture2 描画に使用する2枚目のテクスチャを指定する
	 * @param texture3 描画に使用する3枚目のテクスチャを指定する
	 * @param shader 描画に使用するシェーダーを指定する
	 *
	 * @description OpenGL ES 2.0の場合はテクスチャ最大8枚、3.0は頂点側最大16枚，フラグメント側最大16枚なので、まだ追加できるが、
	 * とりあえずは3枚まで定義しておく。
	 * 将来的にはテクスチャを配列で渡すバージョンを作り、4枚以上はそちらで対応する。
	 */
	function drawTexture( texture:Texture );
	function drawTexture( texture:Texture, shader:ShaderProgram );
	function drawTexture( texture:Texture, texture2:Texture, shader:ShaderProgram );
	function drawTexture( texture:Texture, texture2:Texture, texture3:Texture, shader:ShaderProgram );

	/**
	 * テクスチャの一部分を描画する
	 * @param rect テクスチャ内で描画する矩形領域
	 * @param texture 描画するテクスチャ
	 * @param shader 描画に使用するシェーダー
	 */
	function drawTextureAtlas( rect:Rect, texture:Texture );
	function drawTextureAtlas( rect:Rect, texture:Texture, shader:ShaderProgram );

	/**
	 * テクスチャの描画に使用されるデフォルトのシェーダー(drawTextureでtexture1枚のみ渡した時のシェーダー)
	 * @description 設定もできるが、基本的に変更する必要はない。
	 * voidを入れると組み込みの初期デフォルトシェーダーに戻る。
	 */
	property defaultShader;
	
	/**
	 * fill時に使用されるデフォルトのシェーダー
	 * @description 設定もできるが、基本的に変更する必要はない
	 * voidを入れると組み込みの初期デフォルトシェーダーに戻る。
	 */
	property defaultFillShader;

	/** 描画領域の幅。
	 * @description 基本的にはクライアント領域と一致、Windowリサイズから再描画まで一時的にずれる期間あり
	 */
	property width;
	/** 描画領域の高さ */
	property height;

	/**
	 * クリッピング用矩形のRectクラス
	 * @description canvas.clipRect.set( l, t, r, b ); 等で呼び出せる。
	 * enableClipRect で有効/無効設定可
	 */
	property clipRect;

	/**
	 * 矩形でクリッピングするかどうかの設定
	 * @description true の時、clipRectプロパティによってクリッピングされる
	 */
	property enableClipRect;

	/**
	 * 描画をフラッシュする。
	 * @description 描画を反映したいrenderTargetを入れ替える場合などに使われる。
	 * onDraw中にrenderTargetを入れ替えると、内部的にflushは呼ばれる。
	 */
	function flush();

	/**
	 * テキスト描画(未実装)
	 * @param font フォント
	 * @param x X位置
	 * @param y Y位置
	 * @param text テキスト
	 * @param color 色指定
	 */
	function drawText(font:Font, x:int, y:int, text:string, color:int);
};

