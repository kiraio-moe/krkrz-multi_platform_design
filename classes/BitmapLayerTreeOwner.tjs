/**
 * @description The BitmapLayerTreeOwner class is a class that holds the layer tree and can get the drawing result with the Bitmap class.
 * By passing it as the first argument of the constructor of the Layer class instead of window, you can get the drawing result of those Layers as a Bitmap class as an image.
 * By transferring the drawing result Bitmap to Texture, the Layer drawing system can be used in Canvas.
 */
class BitmapLayerTreeOwner {
	/**
	 * Building a BitmapLayerTreeOwner object
	 *
	 * @description Build an object of class BitmapLayerTreeOwner.
	 */
	function BitmapLayerTreeOwner( );
	/**
	 * Notify layers of clicks (not recommended)
	 * @param x X coordinate of the clicked position (client coordinate)
	 * @param y The y coordinate of the clicked position (client coordinate)
	 */
	function fireClick( x, y );
	/**
	 * Notify layer of double click (not recommended)
	 * @param x X coordinate of the double-clicked position (client coordinate)
	 * @param y The y coordinate of the double-clicked position (client coordinate)
	 */
	function fireDoubleClick( x, y );
	/**
	 * Notify the layer of mouse presses
	 * @param x X coordinate of the position where the mouse button was pressed (client coordinate)
	 * @param y The y coordinate of the position where the mouse button was pressed (client coordinate)
	 * @param mb Pressed mouse button
	 * @param flag The state of shift keys that were pressed at the same time when the mouse button was pressed
	 */
	function fireMouseDown( x, y, mb, flags );
	/**
	 * Notify the layer of mouse presses
	 * @param x X coordinate of the position where the mouse button is released (client coordinate)
	 * @param y The y coordinate of the position where the mouse button is released (client coordinate)
	 * @param mb Mouse button released
	 * @param flags The state of shift keys that were pressed at the same time when the mouse button was released
	 */
	function fireMouseUp( x, y, mb, flags );
	/**
	 * Notify layer of mouse movement
	 * @param x X coordinate of the position where the mouse is moved (client coordinate)
	 * @param y Y coordinate of the position where the mouse is moved (client coordinate)
	 * @param flags The state of shift keys and mouse buttons that were pressed at the same time when the mouse was moving
	 */
	function fireMouseMove( x, y, flags );
	/**
	 * Notifies the layer of mouse wheel rotation
	 * @param shift The state of shift keys and mouse buttons that were pressed at the same time when the mouse was moving
	 * @param delta Wheel rotation angle
	 * @param x X coordinate of the position where the wheel is rotated (client coordinate)
	 * @param y Y coordinate of the position where the wheel is rotated (client coordinate)
	 */
	function fireMouseWheel( shift, delta, x, y );
	/**
	 * Notify layer of mouse capture release
	 */
	function fireReleaseCapture();
	/**
	 * Notifies the layer that the mouse has gone out of the window
	 */
	function fireMouseOutOfWindow();
	/**
	 * Notify the layer that it has been touched
	 * @param x X coordinate of the touched position (client coordinate)
	 * @param y Y coordinate of the touched position (client coordinate)
	 * @param cx Number of horizontal pixels that the finger is in contact with
	 * @param cy Number of vertical pixels that the finger is in contact with
	 * @param id Touch ID
	 */
	function fireTouchDown( x, y, cx, cy, id );
	/**
	 * Notifies the layer that the touch has been released
	 * @param x X coordinate of the separated position (client coordinate)
	 * @param y Y coordinate of the separated position (client coordinate)
	 * @param cx Number of horizontal pixels that the finger is in contact with
	 * @param cy Number of vertical pixels that the finger is in contact with
	 * @param id Touch ID
	 */
	function fireTouchUp( x, y, cx, cy, id );
	/**
	 * Notify the layer that the touch has been moved
	 * @param x X coordinate of touch position (client coordinate)
	 * @param y Y coordinate of touch position (client coordinate)
	 * @param cx Number of horizontal pixels that the finger is in contact with
	 * @param cy Number of vertical pixels that the finger is in contact with
	 * @param id Touch ID
	 */
	function fireTouchMove( x, y, cx, cy, id );
	/**
	 * Notifies the layer that the enlargement operation has been performed
	 * @param startdist Pixel distance when multi-touch is started
	 * @param curdist Pixel distance of touch when an event occurs
	 * @param cx X coordinate of center position (client coordinate)
	 * @param cy Center y coordinate (client coordinate)
	 * @param flag Multi-touch status flag.
	 */
	function fireTouchScaling( startdist, curdist, cx, cy, flag );
	/**
	 * Notifies the layer that the rotation operation has been performed
	 * @param startangle Radian angle when multi-touch is started
	 * @param curangle Radian angle of touch when an event occurs
	 * @param dist Pixel distance of touch when an event occurs
	 * @param cx X coordinate of center position (client coordinate)
	 * @param cy Center y coordinate (client coordinate)
	 * @param flag Multi-touch state flag
	 */
	function fireTouchRotate( startangle, curangle, dist, cx, cy, flag );
	/**
	 * Notify layers of multi-touch state changes
	 */
	function fireMultiTouch();
	/**
	 * Notify the layer that a key has been pressed
	 * @param key Virtual key code of the pressed key
	 * @param shift The state of shift keys and mouse buttons that were pressed at the same time when the keys were pressed
	 */
	function fireKeyDown( key, shift );
	/**
	 * Notifies the layer that the key has been released
	 * @param key Virtual key code for the released key
	 * @param shift The state of shift keys and mouse buttons that were pressed at the same time when the keys were released
	 */
	function fireKeyUp( key, shift );
	/**
	 * Notifies the layer that a character has been entered
	 * @param key letter
	 */
	function fireKeyPress( key);
	/**
	 * Notify the layer that the screen has been rotated
	 * @param orientation Screen orientation
	 * @param rotate angle
	 * @param bpp  bits per pixel
	 * @param hresolution Screen width
	 * @param vresolution Screen height
	 */
	function fireDisplayRotate( orientation, rotate, bpp, hresolution, vresolution );
	/**
	 * Call every 1 second if necessary.
	 * @description The current layer's mouse position and hint updates, cursor type, and layer Enter / Leave are rechecked.
	 * Internally, the mouse cursor movement 0 call is made.
	 */
	function fireRecheckInputState();

	/**
	 * Clear update rectangle information
	 */
	function clearDirtyRect();

	/**
	 * Cursor setting was called from Layer
	 * @description Change the cursor if necessary.
	 */
	event onSetMouseCursor( cursor );
	/**
	 * Cursor position acquisition was called from Layer
	 * @description Returns the cursor position if necessary
	 */
	event onGetCursorPos( x, y );
	/**
	 * Cursor position setting was called from Layer
	 * @description Set the cursor position if necessary
	 */
	event onSetCursorPos( x, y );
	/**
	 * Mouse capture release called from Layer
	 * @description Cancel mouse capture if necessary
	 */
	event onReleaseMouseCapture();
	/**
	 * The hint text setting was called from the layer
	 * @description Set hint text if necessary
	 */
	event onSetHintText( sender, hint );
	/**
	 * Primary layer resized
	 */
	event onResizeLayer( w, h );
	/**
	 * Layer image updated
	 */
	event onChangeLayerImage();
	/**
	 * The gaze position specification was called from the layer
	 */
	event onSetAttentionPoint( layer, x, y );
	/**
	 * The gaze position has been dedesignated from the layer
	 */
	event onDisableAttentionPoint();
	/**
	 * IME mode set
	 */
	event onSetImeMode( mode );
	/**
	 * IME mode reset
	 */
	event onResetImeMode();

	/** Width (read only) */
	property width;
	/** Height (read only) */
	property height;
	/** Instance of Bitmap class being drawn (readonly) */
	proporty bitmap;
	/** Update area, Rect class.
	 * @description Content valid (read only) only when isUpdated is true
	 */
	proporty dirtyRect;
	/** With or without update (read only) */
	proporty isUpdated;

	/** LTO interface, readonly */
	property layerTreeOwnerInterface;

	/** Layer with focus */
	propoerty focusedLayer;

	/** Primary layer (read only) */
	property primaryLayer;
};
