/**
 * 色々と検討した結果Meshクラスと言うものはやめて、VertexBuffer/VertexBinderの2つのクラスとCanvas,ShaderProgramとの合わせ技で同等の
 * 機能を実現する方向にする。
 * Meshクラスは、LayerやSprite等と似たような性質で、他のクラス等と設計思想的に少し毛色が違ってしまうのと、ShaderProgramへの指定と
 * TJS2スクリプトとの合わせ技で同等の機能が実現できるため。
 *
 * メッシュ情報オブジェクト
 * ※ drawMesh 用の情報最適化のために専用オブジェクト化
 * VBO や VAO(ES3) など色々検討課題が多いので、Meshは一度わきに置いておく
 *
 * property として追加されたメンバとShaderProgramのメンバを結び付けて描画を行うためのクラス。
 * プロパティが VertexBuffer クラスの場合は、attributeのShaderProgramメンバとして
 * Texture/Offscreenの場合は、テクスチャとして設定後、uniformのShaderProgramとして
 * 設定される。
 * Texture/Offscreenのインデックスは順不同。
 *
 * → Indexbuffer と vertexbuffer の関連付けが上記では実現できない。
 * もう少し検討の必要あり？
 * VertexBufferがIndexbufferの場合は、別動作にすると何とかなるか。
 *
 * VAOを使うには事前にshaderが必要なので、そのセットアップメソッドも必要。
 *
 * プロパティと対応付けようと思ったけど、オフセットやストライドなど、一つのVertexBufferに複数の頂点データまとめておく手法が使えないか。
 * 明示的にバインドさせるメソッドを追加するのがよい？
 *
 *
 * Mesh クラスと言うものがそもそも要らないか
 * 他と設計思想が異なっている気もする
 * VertexBuffer, VertexBinder の2つのクラスを作り、VertexBufferで頂点情報を保持、VertexBinderでストライドやオフセットなどの情報を保持
 * VertexBinderをShaderProgramのプロパティにセットして、ShaderProgramで頂点等の設定を行うのがスマートか？
 * テクスチャもShaderProgramのプロパティにセット
 */
class Mesh2D {

  function Mesh2D();
  // メソッドを検討

  // 描画位置のx,yは別の方が良くないかな？
  // テクスチャと関連付けられるものなので、別のテクスチャに適用する必要性があるかどうか……
  // つまり、Meshにテクスチャ情報も含むかどうか
  // TJS2 で Sprite など作って管理するのなら、分離していてもいいか
  // 最適化のためなら内部実装に依存した情報を集約するのがいいか？
  // テクスチャの大きさがわからないことには、uv座標を事前計算することが出来ず、最適化出来ないので、テクスチャ情報がもう少し必要
  // x,y 位置は、meshではなく、matrixで移動させるか……
  
  // VBO ( vertex buffer object ) で事前に GPU に転送して置くものだと思うが…
  /**
   * 矩形領域の追加
   * @param u テクスチャ中座標x
   * @param v テクスチャ中座標y
   * @param w 横幅
   * @param h 縦幅
   * @param x 配置位置x
   * @param y 配置位置y
   * @parmm argb 頂点カラー指定
   */
  function addRange(l,t,w,h,x,y,argb);
  
  
  /**
   * インデックスバッファが使われているかどうか
   * 追加されているメンバのVertexBufferからIndexタイプのものがあるかどうか探せば対応できるが…
   */
  property useIndex;
};
